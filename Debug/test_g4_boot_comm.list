
test_g4_boot_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006470  08006470  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006478  08006478  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000090  08006518  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006518  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001676e  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a3  00000000  00000000  00036871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea2  00000000  00000000  0003abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a5c2  00000000  00000000  0003ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018263  00000000  00000000  0006605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106cbd  00000000  00000000  0007e2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005374  00000000  00000000  00184f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063d8 	.word	0x080063d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	080063d8 	.word	0x080063d8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_ZN7IntegerC1Ev>:
#include <string.h>

static char hexDigits[] = "0123456789abcdef";


Integer::Integer() {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <_ZN7IntegerC1Ev+0x1c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	08006428 	.word	0x08006428

08000544 <_ZN7IntegerD1Ev>:

Integer::~Integer() {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <_ZN7IntegerD1Ev+0x1c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	08006428 	.word	0x08006428

08000564 <_ZN7IntegerD0Ev>:
Integer::~Integer() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
}
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ffe9 	bl	8000544 <_ZN7IntegerD1Ev>
 8000572:	2104      	movs	r1, #4
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f005 fddf 	bl	8006138 <_ZdlPvj>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZN7Integer5toAXnEjPcib>:

bool Integer::toAXn(unsigned int n, char * retBuf, int retLen, bool prefix){
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	70fb      	strb	r3, [r7, #3]
	char * startError = retBuf;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
	int remainingForHex = retLen;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	623b      	str	r3, [r7, #32]
	if (prefix) {
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00e      	beq.n	80005be <_ZN7Integer5toAXnEjPcib+0x3a>
		if (retLen <= 3) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	dd3c      	ble.n	8000620 <_ZN7Integer5toAXnEjPcib+0x9c>
			goto error_exit;
		} else {
			strcpy (retBuf, "0x");
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <_ZN7Integer5toAXnEjPcib+0xe0>)
 80005aa:	8811      	ldrh	r1, [r2, #0]
 80005ac:	7892      	ldrb	r2, [r2, #2]
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	709a      	strb	r2, [r3, #2]
			retBuf += 2;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	3302      	adds	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
			retLen -= 2;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b02      	subs	r3, #2
 80005bc:	607b      	str	r3, [r7, #4]
		}
	}
	startError = retBuf;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
	remainingForHex = retLen;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	623b      	str	r3, [r7, #32]
	unsigned char b;
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 80005c6:	2307      	movs	r3, #7
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	e01c      	b.n	8000606 <_ZN7Integer5toAXnEjPcib+0x82>
		b = (n & (0xF << (i*4))) >> (i*4);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	401a      	ands	r2, r3
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fa22 f303 	lsr.w	r3, r2, r3
 80005e4:	75fb      	strb	r3, [r7, #23]
		if (retLen == 0){ // no space for digit
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01b      	beq.n	8000624 <_ZN7Integer5toAXnEjPcib+0xa0>
			goto error_exit;
		}
		(*retBuf++) = hexDigits[b];
 80005ec:	7dfa      	ldrb	r2, [r7, #23]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1c59      	adds	r1, r3, #1
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	491c      	ldr	r1, [pc, #112]	; (8000668 <_ZN7Integer5toAXnEjPcib+0xe4>)
 80005f6:	5c8a      	ldrb	r2, [r1, r2]
 80005f8:	701a      	strb	r2, [r3, #0]
		retLen--;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b01      	subs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dadf      	bge.n	80005cc <_ZN7Integer5toAXnEjPcib+0x48>
	}
	if (retLen == 0){ // no space final 0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <_ZN7Integer5toAXnEjPcib+0xa4>
		goto error_exit;
	}
	(*retBuf++) = '\0';
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	60ba      	str	r2, [r7, #8]
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	return true;
 800061c:	2301      	movs	r3, #1
 800061e:	e01a      	b.n	8000656 <_ZN7Integer5toAXnEjPcib+0xd2>
			goto error_exit;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
			goto error_exit;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
		goto error_exit;
 8000628:	bf00      	nop

	error_exit:
	for (int i = 0; i < remainingForHex-1; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	e007      	b.n	8000640 <_ZN7Integer5toAXnEjPcib+0xbc>
		(*startError++) = '#';
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	627a      	str	r2, [r7, #36]	; 0x24
 8000636:	2223      	movs	r2, #35	; 0x23
 8000638:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < remainingForHex-1; i++) {
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	3301      	adds	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	3b01      	subs	r3, #1
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf2      	blt.n	8000630 <_ZN7Integer5toAXnEjPcib+0xac>
	}
	(*startError++) = '\0';
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	627a      	str	r2, [r7, #36]	; 0x24
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	return false;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	080063f0 	.word	0x080063f0
 8000668:	20000000 	.word	0x20000000

0800066c <_Z12delay_us_DWTm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us_DWT(unsigned long  uSec)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles = (SystemCoreClock / 1000000L)*uSec;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <_Z12delay_us_DWTm+0x48>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <_Z12delay_us_DWTm+0x4c>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	0c9b      	lsrs	r3, r3, #18
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	60fb      	str	r3, [r7, #12]
	volatile uint32_t start = DWT->CYCCNT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <_Z12delay_us_DWTm+0x50>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	60bb      	str	r3, [r7, #8]
	do {
	} while (DWT->CYCCNT - start < cycles);
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <_Z12delay_us_DWTm+0x50>)
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	bf34      	ite	cc
 800069c:	2301      	movcc	r3, #1
 800069e:	2300      	movcs	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f3      	bne.n	800068e <_Z12delay_us_DWTm+0x22>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000014 	.word	0x20000014
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <_Z9doPinFastP12GPIO_TypeDeft>:
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
	HAL_Delay(1000);
}
void doPinFast(GPIO_TypeDef* port, uint16_t pin){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f003 fbc8 	bl	8003e68 <HAL_GPIO_WritePin>
	delay_us_DWT(10);
 80006d8:	200a      	movs	r0, #10
 80006da:	f7ff ffc7 	bl	800066c <_Z12delay_us_DWTm>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f003 fbbf 	bl	8003e68 <HAL_GPIO_WritePin>
	delay_us_DWT(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ffbe 	bl	800066c <_Z12delay_us_DWTm>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a2      	sub	sp, #136	; 0x88
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006fe:	4b87      	ldr	r3, [pc, #540]	; (800091c <main+0x224>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4a86      	ldr	r2, [pc, #536]	; (800091c <main+0x224>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000708:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800070a:	4b85      	ldr	r3, [pc, #532]	; (8000920 <main+0x228>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  // Enable cycle counter
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000710:	4b83      	ldr	r3, [pc, #524]	; (8000920 <main+0x228>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a82      	ldr	r2, [pc, #520]	; (8000920 <main+0x228>)
 8000716:	f023 0301 	bic.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800071c:	4b80      	ldr	r3, [pc, #512]	; (8000920 <main+0x228>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a7f      	ldr	r2, [pc, #508]	; (8000920 <main+0x228>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fd65 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f90a 	bl	8000944 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 faba 	bl	8000ca8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000734:	f000 f9d8 	bl	8000ae8 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8000738:	f000 fa56 	bl	8000be8 <_ZL19MX_USART2_UART_Initv>
  MX_OPAMP3_Init();
 800073c:	f000 fa22 	bl	8000b84 <_ZL14MX_OPAMP3_Initv>
  MX_ADC3_Init();
 8000740:	f000 f94a 	bl	80009d8 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp3);
 8000744:	4877      	ldr	r0, [pc, #476]	; (8000924 <main+0x22c>)
 8000746:	f003 fda9 	bl	800429c <HAL_OPAMP_Start>


#if 1
  FLASH_OBProgramInitTypeDef obInit = {0};
 800074a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fdb0 	bl	80062b8 <memset>
  HAL_StatusTypeDef status;
  obInit.OptionType = OPTIONBYTE_USER;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  obInit.USERType = OB_USER_nSWBOOT0;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	657b      	str	r3, [r7, #84]	; 0x54
  obInit.USERConfig = 0;// FLASH_OPTR_nSWBOOT0;
 8000762:	2300      	movs	r3, #0
 8000764:	65bb      	str	r3, [r7, #88]	; 0x58
  //HAL_FLASH_OB_Unlock();
  status = HAL_FLASHEx_OBProgram(&obInit);
 8000766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fc9c 	bl	80030a8 <HAL_FLASHEx_OBProgram>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t status2 = HAL_FLASH_GetError();
 8000776:	f002 fc37 	bl	8002fe8 <HAL_FLASH_GetError>
 800077a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  //FLASH_OB_UserConfig(OB_USER_nSWBOOT0, FLASH_OPTR_nSWBOOT0);
  //FLASH_OB_UserConfig(OB_USER_nBOOT0, FLASH_OPTR_nBOOT0);
#endif

  FLASH_OBProgramInitTypeDef obInitRead = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2234      	movs	r2, #52	; 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fd96 	bl	80062b8 <memset>
  HAL_FLASHEx_OBGetConfig(&obInitRead);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fd19 	bl	80031c8 <HAL_FLASHEx_OBGetConfig>



  int statusTransmit;
  char str[] = "start\n\r";
 8000796:	4a64      	ldr	r2, [pc, #400]	; (8000928 <main+0x230>)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079e:	e883 0003 	stmia.w	r3, {r0, r1}
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),1000);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd37 	bl	8000218 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	1d39      	adds	r1, r7, #4
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	485d      	ldr	r0, [pc, #372]	; (800092c <main+0x234>)
 80007b6:	f004 fe13 	bl	80053e0 <HAL_UART_Transmit>
 80007ba:	4603      	mov	r3, r0
 80007bc:	67fb      	str	r3, [r7, #124]	; 0x7c

#define intro_message "flash BYTES value:"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)intro_message, strlen(intro_message),1000);
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	2212      	movs	r2, #18
 80007c4:	495a      	ldr	r1, [pc, #360]	; (8000930 <main+0x238>)
 80007c6:	4859      	ldr	r0, [pc, #356]	; (800092c <main+0x234>)
 80007c8:	f004 fe0a 	bl	80053e0 <HAL_UART_Transmit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	67fb      	str	r3, [r7, #124]	; 0x7c

  char * buffer;
  buffer = (char*)malloc(11);
 80007d0:	200b      	movs	r0, #11
 80007d2:	f005 fcb5 	bl	8006140 <malloc>
 80007d6:	4603      	mov	r3, r0
 80007d8:	67bb      	str	r3, [r7, #120]	; 0x78
  Int.toAXn(obInitRead.USERConfig, buffer, 11, true);
 80007da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007dc:	2301      	movs	r3, #1
 80007de:	220b      	movs	r2, #11
 80007e0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80007e2:	f7ff fecf 	bl	8000584 <_ZN7Integer5toAXnEjPcib>
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),1000);
 80007e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80007e8:	f7ff fd16 	bl	8000218 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80007f6:	484d      	ldr	r0, [pc, #308]	; (800092c <main+0x234>)
 80007f8:	f004 fdf2 	bl	80053e0 <HAL_UART_Transmit>
 80007fc:	4603      	mov	r3, r0
 80007fe:	67fb      	str	r3, [r7, #124]	; 0x7c

#define eol_message "\n\r"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)eol_message, strlen(eol_message),1000);
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	2202      	movs	r2, #2
 8000806:	494b      	ldr	r1, [pc, #300]	; (8000934 <main+0x23c>)
 8000808:	4848      	ldr	r0, [pc, #288]	; (800092c <main+0x234>)
 800080a:	f004 fde9 	bl	80053e0 <HAL_UART_Transmit>
 800080e:	4603      	mov	r3, r0
 8000810:	67fb      	str	r3, [r7, #124]	; 0x7c

#define start_message "adc value:"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)start_message, strlen(start_message),1000);
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	220a      	movs	r2, #10
 8000818:	4947      	ldr	r1, [pc, #284]	; (8000938 <main+0x240>)
 800081a:	4844      	ldr	r0, [pc, #272]	; (800092c <main+0x234>)
 800081c:	f004 fde0 	bl	80053e0 <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c

  HAL_ADC_Start(&hadc3);
 8000824:	4845      	ldr	r0, [pc, #276]	; (800093c <main+0x244>)
 8000826:	f001 f9af 	bl	8001b88 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc3, 1000);
 800082a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082e:	4843      	ldr	r0, [pc, #268]	; (800093c <main+0x244>)
 8000830:	f001 fac2 	bl	8001db8 <HAL_ADC_PollForConversion>
  uint32_t value = HAL_ADC_GetValue(&hadc3);
 8000834:	4841      	ldr	r0, [pc, #260]	; (800093c <main+0x244>)
 8000836:	f001 fbc5 	bl	8001fc4 <HAL_ADC_GetValue>
 800083a:	6778      	str	r0, [r7, #116]	; 0x74
  HAL_ADC_Stop(&hadc3);
 800083c:	483f      	ldr	r0, [pc, #252]	; (800093c <main+0x244>)
 800083e:	f001 fa87 	bl	8001d50 <HAL_ADC_Stop>

  Int.toAXn(value, buffer, 11, true);
 8000842:	2301      	movs	r3, #1
 8000844:	220b      	movs	r2, #11
 8000846:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000848:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800084a:	f7ff fe9b 	bl	8000584 <_ZN7Integer5toAXnEjPcib>
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),1000);
 800084e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000850:	f7ff fce2 	bl	8000218 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800085e:	4833      	ldr	r0, [pc, #204]	; (800092c <main+0x234>)
 8000860:	f004 fdbe 	bl	80053e0 <HAL_UART_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	67fb      	str	r3, [r7, #124]	; 0x7c
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)eol_message, strlen(eol_message),1000);
 8000868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086c:	2202      	movs	r2, #2
 800086e:	4931      	ldr	r1, [pc, #196]	; (8000934 <main+0x23c>)
 8000870:	482e      	ldr	r0, [pc, #184]	; (800092c <main+0x234>)
 8000872:	f004 fdb5 	bl	80053e0 <HAL_UART_Transmit>
 8000876:	4603      	mov	r3, r0
 8000878:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_SET); // start at pin 2
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	482f      	ldr	r0, [pc, #188]	; (8000940 <main+0x248>)
 8000882:	f003 faf1 	bl	8003e68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fd26 	bl	80012d8 <HAL_Delay>
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_RESET); // start at pin 2
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	482b      	ldr	r0, [pc, #172]	; (8000940 <main+0x248>)
 8000894:	f003 fae8 	bl	8003e68 <HAL_GPIO_WritePin>
		doPinFast(T_PC0_GPIO_Port, T_PC0_Pin);
 8000898:	2101      	movs	r1, #1
 800089a:	4829      	ldr	r0, [pc, #164]	; (8000940 <main+0x248>)
 800089c:	f7ff ff10 	bl	80006c0 <_Z9doPinFastP12GPIO_TypeDeft>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // start at pin 2
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f003 fade 	bl	8003e68 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80008ac:	20c8      	movs	r0, #200	; 0xc8
 80008ae:	f000 fd13 	bl	80012d8 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // start at pin 2
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f003 fad5 	bl	8003e68 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80008be:	20c8      	movs	r0, #200	; 0xc8
 80008c0:	f000 fd0a 	bl	80012d8 <HAL_Delay>


	  HAL_ADC_Start(&hadc3);
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <main+0x244>)
 80008c6:	f001 f95f 	bl	8001b88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 1000);
 80008ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ce:	481b      	ldr	r0, [pc, #108]	; (800093c <main+0x244>)
 80008d0:	f001 fa72 	bl	8001db8 <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc3);
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <main+0x244>)
 80008d6:	f001 fb75 	bl	8001fc4 <HAL_ADC_GetValue>
 80008da:	6778      	str	r0, [r7, #116]	; 0x74
	  HAL_ADC_Stop(&hadc3);
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <main+0x244>)
 80008de:	f001 fa37 	bl	8001d50 <HAL_ADC_Stop>

	  Int.toAXn(value, buffer, 11, true);
 80008e2:	2301      	movs	r3, #1
 80008e4:	220b      	movs	r2, #11
 80008e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80008e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80008ea:	f7ff fe4b 	bl	8000584 <_ZN7Integer5toAXnEjPcib>
	  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),1000);
 80008ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80008f0:	f7ff fc92 	bl	8000218 <strlen>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <main+0x234>)
 8000900:	f004 fd6e 	bl	80053e0 <HAL_UART_Transmit>
 8000904:	4603      	mov	r3, r0
 8000906:	67fb      	str	r3, [r7, #124]	; 0x7c
	  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)eol_message, strlen(eol_message),1000);
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	2202      	movs	r2, #2
 800090e:	4909      	ldr	r1, [pc, #36]	; (8000934 <main+0x23c>)
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <main+0x234>)
 8000912:	f004 fd65 	bl	80053e0 <HAL_UART_Transmit>
 8000916:	4603      	mov	r3, r0
 8000918:	67fb      	str	r3, [r7, #124]	; 0x7c
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_SET); // start at pin 2
 800091a:	e7ae      	b.n	800087a <main+0x182>
 800091c:	e000edf0 	.word	0xe000edf0
 8000920:	e0001000 	.word	0xe0001000
 8000924:	20000170 	.word	0x20000170
 8000928:	08006418 	.word	0x08006418
 800092c:	200001ac 	.word	0x200001ac
 8000930:	080063f4 	.word	0x080063f4
 8000934:	08006408 	.word	0x08006408
 8000938:	0800640c 	.word	0x0800640c
 800093c:	200000b0 	.word	0x200000b0
 8000940:	48000800 	.word	0x48000800

08000944 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	2238      	movs	r2, #56	; 0x38
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f005 fcb0 	bl	80062b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000966:	f44f 7000 	mov.w	r0, #512	; 0x200
 800096a:	f003 fcc9 	bl	8004300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fd5f 	bl	8004448 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	bf14      	ite	ne
 8000990:	2301      	movne	r3, #1
 8000992:	2300      	moveq	r3, #0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800099a:	f000 f9e7 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 f858 	bl	8004a6c <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf14      	ite	ne
 80009c2:	2301      	movne	r3, #1
 80009c4:	2300      	moveq	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f9ce 	bl	8000d6c <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	; 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f005 fc61 	bl	80062b8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 80009f8:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <_ZL12MX_ADC3_Initv+0x108>)
 80009fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 80009fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000a10:	4b32      	ldr	r3, [pc, #200]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a5e:	481f      	ldr	r0, [pc, #124]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a60:	f000 fed6 	bl	8001810 <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_ZL12MX_ADC3_Initv+0xa0>
  {
    Error_Handler();
 8000a74:	f000 f97a 	bl	8000d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	4816      	ldr	r0, [pc, #88]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000a84:	f002 f8c4 	bl	8002c10 <HAL_ADCEx_MultiModeConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL12MX_ADC3_Initv+0xc4>
  {
    Error_Handler();
 8000a98:	f000 f968 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_ZL12MX_ADC3_Initv+0x10c>)
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa8:	237f      	movs	r3, #127	; 0x7f
 8000aaa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aac:	2304      	movs	r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <_ZL12MX_ADC3_Initv+0x104>)
 8000aba:	f001 fa91 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <_ZL12MX_ADC3_Initv+0xfa>
  {
    Error_Handler();
 8000ace:	f000 f94d 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	50000400 	.word	0x50000400
 8000ae4:	b6982000 	.word	0xb6982000

08000ae8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <_ZL12MX_I2C1_Initv+0x94>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <_ZL12MX_I2C1_Initv+0x98>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	4815      	ldr	r0, [pc, #84]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b24:	f003 f9b8 	bl	8003e98 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000b38:	f000 f918 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b40:	f003 fa45 	bl	8003fce <HAL_I2CEx_ConfigAnalogFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000b54:	f000 f90a 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <_ZL12MX_I2C1_Initv+0x90>)
 8000b5c:	f003 fa82 	bl	8004064 <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf14      	ite	ne
 8000b66:	2301      	movne	r3, #1
 8000b68:	2300      	moveq	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000b70:	f000 f8fc 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000011c 	.word	0x2000011c
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	00303d5b 	.word	0x00303d5b

08000b84 <_ZL14MX_OPAMP3_Initv>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */
#else
  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <_ZL14MX_OPAMP3_Initv+0x60>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000bae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <_ZL14MX_OPAMP3_Initv+0x5c>)
 8000bc2:	f003 fa9b 	bl	80040fc <HAL_OPAMP_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <_ZL14MX_OPAMP3_Initv+0x56>
  {
    Error_Handler();
 8000bd6:	f000 f8c9 	bl	8000d6c <Error_Handler>

#endif

  /* USER CODE END OPAMP3_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000170 	.word	0x20000170
 8000be4:	40010308 	.word	0x40010308

08000be8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c32:	f004 fb85 	bl	8005340 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf14      	ite	ne
 8000c3c:	2301      	movne	r3, #1
 8000c3e:	2300      	moveq	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000c46:	f000 f891 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c4e:	f005 f9a9 	bl	8005fa4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf14      	ite	ne
 8000c58:	2301      	movne	r3, #1
 8000c5a:	2300      	moveq	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000c62:	f000 f883 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c6a:	f005 f9d9 	bl	8006020 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000c7e:	f000 f875 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000c84:	f005 f955 	bl	8005f32 <HAL_UARTEx_DisableFifoMode>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000c98:	f000 f868 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001ac 	.word	0x200001ac
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <_ZL12MX_GPIO_Initv+0xbc>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, T_PC13_Pin|T_PC0_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f242 0101 	movw	r1, #8193	; 0x2001
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d0e:	f003 f8ab 	bl	8003e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f003 f8a5 	bl	8003e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_PC13_Pin T_PC0_Pin */
  GPIO_InitStruct.Pin = T_PC13_Pin|T_PC0_Pin;
 8000d1e:	f242 0301 	movw	r3, #8193	; 0x2001
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <_ZL12MX_GPIO_Initv+0xc0>)
 8000d38:	f002 ff14 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f002 ff05 	bl	8003b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d107      	bne.n	8000d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d102      	bne.n	8000d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Integer Int;
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d94:	f7ff fbc6 	bl	8000524 <_ZN7IntegerC1Ev>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d107      	bne.n	8000dae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d102      	bne.n	8000dae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000daa:	f7ff fbcb 	bl	8000544 <_ZN7IntegerD1Ev>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000ac 	.word	0x200000ac

08000dbc <_GLOBAL__sub_I_hadc3>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ffd7 	bl	8000d78 <_Z41__static_initialization_and_destruction_0ii>
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_GLOBAL__sub_D_hadc3>:
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffcf 	bl	8000d78 <_Z41__static_initialization_and_destruction_0ii>
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_MspInit+0x44>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b098      	sub	sp, #96	; 0x60
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2254      	movs	r2, #84	; 0x54
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 fa3f 	bl	80062b8 <memset>
  if(hadc->Instance==ADC3)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_ADC_MspInit+0x60>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d11b      	bne.n	8000e7c <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e4e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 f825 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000e60:	f7ff ff84 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_ADC_MspInit+0x64>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_ADC_MspInit+0x64>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_ADC_MspInit+0x64>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3760      	adds	r7, #96	; 0x60
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	50000400 	.word	0x50000400
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0a0      	sub	sp, #128	; 0x80
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	2254      	movs	r2, #84	; 0x54
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fa03 	bl	80062b8 <memset>
  if(hi2c->Instance==I2C1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_I2C_MspInit+0xe0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d153      	bne.n	8000f64 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 ffeb 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ed4:	f7ff ff4a 	bl	8000d6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f002 fe1c 	bl	8003b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f44:	4619      	mov	r1, r3
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_I2C_MspInit+0xe8>)
 8000f48:	f002 fe0c 	bl	8003b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_I2C_MspInit+0xe4>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3780      	adds	r7, #128	; 0x80
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_OPAMP_MspInit+0x8c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d130      	bne.n	8000ffc <HAL_OPAMP_MspInit+0x84>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_OPAMP_MspInit+0x90>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP3 GPIO Configuration
    PA1     ------> OPAMP3_VINP
    PB2     ------> OPAMP3_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f002 fdc0 	bl	8003b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_OPAMP_MspInit+0x94>)
 8000ff8:	f002 fdb4 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010308 	.word	0x40010308
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2254      	movs	r2, #84	; 0x54
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f005 f941 	bl	80062b8 <memset>
  if(huart->Instance==USART2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_UART_MspInit+0xa8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d136      	bne.n	80010ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f003 ff29 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001058:	f7ff fe88 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_UART_MspInit+0xac>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_UART_MspInit+0xac>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_UART_MspInit+0xac>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_UART_MspInit+0xac>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_UART_MspInit+0xac>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_UART_MspInit+0xac>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108c:	230c      	movs	r3, #12
 800108e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109c:	2307      	movs	r3, #7
 800109e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f002 fd5b 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3778      	adds	r7, #120	; 0x78
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40004400 	.word	0x40004400
 80010bc:	40021000 	.word	0x40021000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f8c6 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f005 f8d0 	bl	80062e8 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00000400 	.word	0x00000400
 8001178:	20000240 	.word	0x20000240
 800117c:	20000390 	.word	0x20000390

08001180 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f005 f88f 	bl	80062f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d6:	f7ff fa8f 	bl	80006f8 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   r0, =_estack
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011e8:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 80011ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011f0:	20000390 	.word	0x20000390

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>

080011f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f001 febf 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f80e 	bl	8001228 <HAL_InitTick>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e001      	b.n	800121c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001218:	f7ff fde0 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121c:	79fb      	ldrb	r3, [r7, #7]

}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_InitTick+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d022      	beq.n	8001282 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_InitTick+0x6c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_InitTick+0x68>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001248:	fbb1 f3f3 	udiv	r3, r1, r3
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f001 febc 	bl	8002fce <HAL_SYSTICK_Config>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d809      	bhi.n	8001276 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001262:	2200      	movs	r2, #0
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	f001 fe96 	bl	8002f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0x70>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e007      	b.n	8001286 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e004      	b.n	8001286 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000001c 	.word	0x2000001c
 8001294:	20000014 	.word	0x20000014
 8001298:	20000018 	.word	0x20000018

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x1c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x20>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_IncTick+0x1c>)
 80012ac:	6013      	str	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000244 	.word	0x20000244
 80012bc:	2000001c 	.word	0x2000001c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000244 	.word	0x20000244

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d004      	beq.n	80012fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fc:	bf00      	nop
 80012fe:	f7ff ffdf 	bl	80012c0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	429a      	cmp	r2, r3
 800130c:	d8f7      	bhi.n	80012fe <HAL_Delay+0x26>
  {
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000001c 	.word	0x2000001c

0800131c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <LL_ADC_SetOffset+0x44>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	4313      	orrs	r3, r2
 80013b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	03fff000 	.word	0x03fff000

080013cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3360      	adds	r3, #96	; 0x60
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3360      	adds	r3, #96	; 0x60
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800142e:	b480      	push	{r7}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3360      	adds	r3, #96	; 0x60
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	431a      	orrs	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3360      	adds	r3, #96	; 0x60
 8001474:	461a      	mov	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3330      	adds	r3, #48	; 0x30
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	211f      	movs	r1, #31
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0e9b      	lsrs	r3, r3, #26
 800151e:	f003 011f 	and.w	r1, r3, #31
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800153e:	b480      	push	{r7}
 8001540:	b087      	sub	sp, #28
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3314      	adds	r3, #20
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	0e5b      	lsrs	r3, r3, #25
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0d1b      	lsrs	r3, r3, #20
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2107      	movs	r1, #7
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	0d1b      	lsrs	r3, r3, #20
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	431a      	orrs	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0318 	and.w	r3, r3, #24
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	400b      	ands	r3, r1
 80015be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c2:	431a      	orrs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	0007ffff 	.word	0x0007ffff

080015dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 031f 	and.w	r3, r3, #31
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6093      	str	r3, [r2, #8]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800164c:	d101      	bne.n	8001652 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <LL_ADC_IsEnabled+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_IsEnabled+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d101      	bne.n	800173e <LL_ADC_IsDisableOngoing+0x18>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <LL_ADC_IsDisableOngoing+0x1a>
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001784:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001788:	f043 0210 	orr.w	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d101      	bne.n	80017b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d6:	f043 0220 	orr.w	r2, r3, #32
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d101      	bne.n	8001802 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1a9      	b.n	8001b7e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff faf3 	bl	8000e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fef1 	bl	8001638 <LL_ADC_IsDeepPowerDownEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fed7 	bl	8001614 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff0c 	bl	8001688 <LL_ADC_IsInternalRegulatorEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fef0 	bl	8001660 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001880:	4b9c      	ldr	r3, [pc, #624]	; (8001af4 <HAL_ADC_Init+0x2e4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	4a9c      	ldr	r2, [pc, #624]	; (8001af8 <HAL_ADC_Init+0x2e8>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	3301      	adds	r3, #1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001894:	e002      	b.n	800189c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3b01      	subs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff feee 	bl	8001688 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff62 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 80018d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8142 	bne.w	8001b6c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 813e 	bne.w	8001b6c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fefb 	bl	8001700 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d141      	bne.n	8001994 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001918:	d004      	beq.n	8001924 <HAL_ADC_Init+0x114>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_ADC_Init+0x2ec>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_ADC_Init+0x134>
 8001924:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001928:	f7ff feea 	bl	8001700 <LL_ADC_IsEnabled>
 800192c:	4604      	mov	r4, r0
 800192e:	4873      	ldr	r0, [pc, #460]	; (8001afc <HAL_ADC_Init+0x2ec>)
 8001930:	f7ff fee6 	bl	8001700 <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	4323      	orrs	r3, r4
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e012      	b.n	800196a <HAL_ADC_Init+0x15a>
 8001944:	486e      	ldr	r0, [pc, #440]	; (8001b00 <HAL_ADC_Init+0x2f0>)
 8001946:	f7ff fedb 	bl	8001700 <LL_ADC_IsEnabled>
 800194a:	4604      	mov	r4, r0
 800194c:	486d      	ldr	r0, [pc, #436]	; (8001b04 <HAL_ADC_Init+0x2f4>)
 800194e:	f7ff fed7 	bl	8001700 <LL_ADC_IsEnabled>
 8001952:	4603      	mov	r3, r0
 8001954:	431c      	orrs	r4, r3
 8001956:	486c      	ldr	r0, [pc, #432]	; (8001b08 <HAL_ADC_Init+0x2f8>)
 8001958:	f7ff fed2 	bl	8001700 <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	4323      	orrs	r3, r4
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d012      	beq.n	8001994 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Init+0x172>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5f      	ldr	r2, [pc, #380]	; (8001afc <HAL_ADC_Init+0x2ec>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x176>
 8001982:	4a62      	ldr	r2, [pc, #392]	; (8001b0c <HAL_ADC_Init+0x2fc>)
 8001984:	e000      	b.n	8001988 <HAL_ADC_Init+0x178>
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_ADC_Init+0x300>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff fcc4 	bl	800131c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7f5b      	ldrb	r3, [r3, #29]
 8001998:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d106      	bne.n	80019d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	3b01      	subs	r3, #1
 80019c8:	045b      	lsls	r3, r3, #17
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_ADC_Init+0x304>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fee5 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 8001a20:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d17f      	bne.n	8001b28 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d17c      	bne.n	8001b28 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a4a:	f023 0302 	bic.w	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6911      	ldr	r1, [r2, #16]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a8e:	e013      	b.n	8001ab8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ab4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12a      	bne.n	8001b18 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	e019      	b.n	8001b28 <HAL_ADC_Init+0x318>
 8001af4:	20000014 	.word	0x20000014
 8001af8:	053e2d63 	.word	0x053e2d63
 8001afc:	50000100 	.word	0x50000100
 8001b00:	50000400 	.word	0x50000400
 8001b04:	50000500 	.word	0x50000500
 8001b08:	50000600 	.word	0x50000600
 8001b0c:	50000300 	.word	0x50000300
 8001b10:	50000700 	.word	0x50000700
 8001b14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10c      	bne.n	8001b4a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f023 010f 	bic.w	r1, r3, #15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
 8001b48:	e007      	b.n	8001b5a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 020f 	bic.w	r2, r2, #15
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b6a:	e007      	b.n	8001b7c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop

08001b88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b98:	d004      	beq.n	8001ba4 <HAL_ADC_Start+0x1c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_ADC_Start+0x1b4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_Start+0x20>
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_ADC_Start+0x1b8>)
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_Start+0x22>
 8001ba8:	4b66      	ldr	r3, [pc, #408]	; (8001d44 <HAL_ADC_Start+0x1bc>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fd16 	bl	80015dc <LL_ADC_GetMultimode>
 8001bb0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fdf0 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80b4 	bne.w	8001d2c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Start+0x4a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e0af      	b.n	8001d32 <HAL_ADC_Start+0x1aa>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fefc 	bl	80029d8 <ADC_Enable>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 809b 	bne.w	8001d22 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <HAL_ADC_Start+0x1b4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d009      	beq.n	8001c1e <HAL_ADC_Start+0x96>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_ADC_Start+0x1c0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_Start+0x92>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_Start+0x9a>
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_ADC_Start+0x1c4>)
 8001c1c:	e001      	b.n	8001c22 <HAL_ADC_Start+0x9a>
 8001c1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d002      	beq.n	8001c30 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f023 0206 	bic.w	r2, r3, #6
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	661a      	str	r2, [r3, #96]	; 0x60
 8001c56:	e002      	b.n	8001c5e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	221c      	movs	r2, #28
 8001c64:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <HAL_ADC_Start+0x1b4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_ADC_Start+0x104>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_ADC_Start+0x1c0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d002      	beq.n	8001c88 <HAL_ADC_Start+0x100>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	e003      	b.n	8001c90 <HAL_ADC_Start+0x108>
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_ADC_Start+0x1c4>)
 8001c8a:	e001      	b.n	8001c90 <HAL_ADC_Start+0x108>
 8001c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d008      	beq.n	8001caa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d002      	beq.n	8001caa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	d114      	bne.n	8001cd4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fd3d 	bl	800174c <LL_ADC_REG_StartConversion>
 8001cd2:	e02d      	b.n	8001d30 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_ADC_Start+0x1b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_ADC_Start+0x176>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_ADC_Start+0x1c0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d002      	beq.n	8001cfa <HAL_ADC_Start+0x172>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_Start+0x17a>
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_ADC_Start+0x1c4>)
 8001cfc:	e001      	b.n	8001d02 <HAL_ADC_Start+0x17a>
 8001cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d02:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00f      	beq.n	8001d30 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d20:	e006      	b.n	8001d30 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001d2a:	e001      	b.n	8001d30 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	50000100 	.word	0x50000100
 8001d40:	50000300 	.word	0x50000300
 8001d44:	50000700 	.word	0x50000700
 8001d48:	50000500 	.word	0x50000500
 8001d4c:	50000400 	.word	0x50000400

08001d50 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Stop+0x16>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e023      	b.n	8001dae <HAL_ADC_Stop+0x5e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d6e:	2103      	movs	r1, #3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fd75 	bl	8002860 <ADC_ConversionStop>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 febf 	bl	8002b04 <ADC_Disable>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_PollForConversion+0x1e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_PollForConversion+0x22>
 8001dd6:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_ADC_PollForConversion+0x1fc>)
 8001dd8:	e000      	b.n	8001ddc <HAL_ADC_PollForConversion+0x24>
 8001dda:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <HAL_ADC_PollForConversion+0x200>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fbfd 	bl	80015dc <LL_ADC_GetMultimode>
 8001de2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d102      	bne.n	8001df2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001dec:	2308      	movs	r3, #8
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	e037      	b.n	8001e62 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d002      	beq.n	8001e04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d111      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	f043 0220 	orr.w	r2, r3, #32
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0c1      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e22:	2304      	movs	r3, #4
 8001e24:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e26:	e01c      	b.n	8001e62 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_PollForConversion+0x84>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5e      	ldr	r2, [pc, #376]	; (8001fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x88>
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_ADC_PollForConversion+0x1fc>)
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_PollForConversion+0x8a>
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_ADC_PollForConversion+0x200>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fbd8 	bl	80015f8 <LL_ADC_GetMultiDMATransfer>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0a3      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e5e:	2304      	movs	r3, #4
 8001e60:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e62:	f7ff fa2d 	bl	80012c0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e68:	e021      	b.n	8001eae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d01d      	beq.n	8001eae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e72:	f7ff fa25 	bl	80012c0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <HAL_ADC_PollForConversion+0xd0>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	f043 0204 	orr.w	r2, r3, #4
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e07b      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0d6      	beq.n	8001e6a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff faf7 	bl	80014c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01c      	beq.n	8001f12 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7f5b      	ldrb	r3, [r3, #29]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d111      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_ADC_PollForConversion+0x178>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_ADC_PollForConversion+0x204>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d002      	beq.n	8001f2c <HAL_ADC_PollForConversion+0x174>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_PollForConversion+0x17c>
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_ADC_PollForConversion+0x208>)
 8001f2e:	e001      	b.n	8001f34 <HAL_ADC_PollForConversion+0x17c>
 8001f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d008      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d002      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b09      	cmp	r3, #9
 8001f4c:	d104      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	e014      	b.n	8001f82 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_ADC_PollForConversion+0x1be>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_ADC_PollForConversion+0x204>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_PollForConversion+0x1ba>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_PollForConversion+0x1c2>
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_ADC_PollForConversion+0x208>)
 8001f74:	e001      	b.n	8001f7a <HAL_ADC_PollForConversion+0x1c2>
 8001f76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d104      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e008      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	50000100 	.word	0x50000100
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	50000700 	.word	0x50000700
 8001fbc:	50000500 	.word	0x50000500
 8001fc0:	50000400 	.word	0x50000400

08001fc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0b6      	sub	sp, #216	; 0xd8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x24>
 8001ffe:	2302      	movs	r3, #2
 8002000:	f000 bc13 	b.w	800282a <HAL_ADC_ConfigChannel+0x84a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fbc3 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 83f3 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f7ff fa5b 	bl	80014e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fbb1 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 800203a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fbd1 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 8002048:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800204c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 81d9 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 81d4 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002068:	d10f      	bne.n	800208a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	f7ff fa62 	bl	800153e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fa09 	bl	800149a <LL_ADC_SetSamplingTimeCommonConfig>
 8002088:	e00e      	b.n	80020a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	461a      	mov	r2, r3
 8002098:	f7ff fa51 	bl	800153e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f9f9 	bl	800149a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	08db      	lsrs	r3, r3, #3
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d022      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020da:	f7ff f953 	bl	8001384 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f7ff f99f 	bl	800142e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x126>
 8002100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002104:	e000      	b.n	8002108 <HAL_ADC_ConfigChannel+0x128>
 8002106:	2300      	movs	r3, #0
 8002108:	461a      	mov	r2, r3
 800210a:	f7ff f9ab 	bl	8001464 <LL_ADC_SetOffsetSaturation>
 800210e:	e17b      	b.n	8002408 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f958 	bl	80013cc <LL_ADC_GetOffsetChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_ADC_ConfigChannel+0x15c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff f94d 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	f003 021f 	and.w	r2, r3, #31
 800213a:	e01e      	b.n	800217a <HAL_ADC_ConfigChannel+0x19a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f942 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800215a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800215e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e004      	b.n	8002178 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800216e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x1b2>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	e018      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x1e4>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e004      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f911 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff f8f5 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x222>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f8ea 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	e01e      	b.n	8002240 <HAL_ADC_ConfigChannel+0x260>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f8df 	bl	80013cc <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e004      	b.n	800223e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x278>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	e018      	b.n	800228a <HAL_ADC_ConfigChannel+0x2aa>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800226c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e004      	b.n	800228a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800228a:	429a      	cmp	r2, r3
 800228c:	d106      	bne.n	800229c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f8ae 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2102      	movs	r1, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f892 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x2e8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2102      	movs	r1, #2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f887 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	f003 021f 	and.w	r2, r3, #31
 80022c6:	e01e      	b.n	8002306 <HAL_ADC_ConfigChannel+0x326>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f87c 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80022e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80022ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022f6:	2320      	movs	r3, #32
 80022f8:	e004      	b.n	8002304 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_ADC_ConfigChannel+0x33e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	e016      	b.n	800234c <HAL_ADC_ConfigChannel+0x36c>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f84d 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2103      	movs	r1, #3
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f831 	bl	80013cc <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x3aa>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2103      	movs	r1, #3
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f826 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	e017      	b.n	80023ba <HAL_ADC_ConfigChannel+0x3da>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2103      	movs	r1, #3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f81b 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e003      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x3f2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	e011      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x416>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d106      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	2103      	movs	r1, #3
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fff8 	bl	80013f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f977 	bl	8001700 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 813d 	bne.w	8002694 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	f7ff f8b4 	bl	8001594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4aa2      	ldr	r2, [pc, #648]	; (80026bc <HAL_ADC_ConfigChannel+0x6dc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f040 812e 	bne.w	8002694 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x480>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2b09      	cmp	r3, #9
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e019      	b.n	8002494 <HAL_ADC_ConfigChannel+0x4b4>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800246e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002470:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800247c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2b09      	cmp	r3, #9
 800248c:	bf94      	ite	ls
 800248e:	2301      	movls	r3, #1
 8002490:	2300      	movhi	r3, #0
 8002492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002494:	2b00      	cmp	r3, #0
 8002496:	d079      	beq.n	800258c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x4d4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	e015      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x500>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x520>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	e017      	b.n	8002530 <HAL_ADC_ConfigChannel+0x550>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800250e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002510:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800251c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x576>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	051b      	lsls	r3, r3, #20
 8002554:	e018      	b.n	8002588 <HAL_ADC_ConfigChannel+0x5a8>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e003      	b.n	800257a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002588:	430b      	orrs	r3, r1
 800258a:	e07e      	b.n	800268a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5c8>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	069b      	lsls	r3, r3, #26
 80025a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a6:	e015      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x5f4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	069b      	lsls	r3, r3, #26
 80025d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x614>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	e017      	b.n	8002624 <HAL_ADC_ConfigChannel+0x644>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	61fb      	str	r3, [r7, #28]
  return result;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	ea42 0103 	orr.w	r1, r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x670>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	3301      	adds	r3, #1
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	3b1e      	subs	r3, #30
 8002648:	051b      	lsls	r3, r3, #20
 800264a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800264e:	e01b      	b.n	8002688 <HAL_ADC_ConfigChannel+0x6a8>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	613b      	str	r3, [r7, #16]
  return result;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	3b1e      	subs	r3, #30
 8002682:	051b      	lsls	r3, r3, #20
 8002684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002688:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe ff55 	bl	800153e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80be 	beq.w	800281e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x6d6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x6ec>
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80026b8:	e009      	b.n	80026ce <HAL_ADC_ConfigChannel+0x6ee>
 80026ba:	bf00      	nop
 80026bc:	407f0000 	.word	0x407f0000
 80026c0:	80080000 	.word	0x80080000
 80026c4:	50000100 	.word	0x50000100
 80026c8:	50000300 	.word	0x50000300
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_ADC_ConfigChannel+0x854>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fe4a 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 80026d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a56      	ldr	r2, [pc, #344]	; (8002838 <HAL_ADC_ConfigChannel+0x858>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x70c>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a55      	ldr	r2, [pc, #340]	; (800283c <HAL_ADC_ConfigChannel+0x85c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d13a      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d134      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002700:	d005      	beq.n	800270e <HAL_ADC_ConfigChannel+0x72e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <HAL_ADC_ConfigChannel+0x860>)
 8002708:	4293      	cmp	r3, r2
 800270a:	f040 8085 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002716:	d004      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x742>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a49      	ldr	r2, [pc, #292]	; (8002844 <HAL_ADC_ConfigChannel+0x864>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x746>
 8002722:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_ADC_ConfigChannel+0x868>)
 8002724:	e000      	b.n	8002728 <HAL_ADC_ConfigChannel+0x748>
 8002726:	4a43      	ldr	r2, [pc, #268]	; (8002834 <HAL_ADC_ConfigChannel+0x854>)
 8002728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800272c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f7fe fe05 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002738:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_ADC_ConfigChannel+0x86c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	4a44      	ldr	r2, [pc, #272]	; (8002850 <HAL_ADC_ConfigChannel+0x870>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002752:	e002      	b.n	800275a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3b01      	subs	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f9      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002760:	e05a      	b.n	8002818 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_ADC_ConfigChannel+0x874>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d125      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800276c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11f      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_ADC_ConfigChannel+0x864>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d104      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7ac>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a34      	ldr	r2, [pc, #208]	; (8002858 <HAL_ADC_ConfigChannel+0x878>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d047      	beq.n	800281c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x7c0>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_ADC_ConfigChannel+0x864>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x7c4>
 80027a0:	4a29      	ldr	r2, [pc, #164]	; (8002848 <HAL_ADC_ConfigChannel+0x868>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x7c6>
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_ADC_ConfigChannel+0x854>)
 80027a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7fe fdc6 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b6:	e031      	b.n	800281c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_ADC_ConfigChannel+0x87c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12d      	bne.n	800281e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d127      	bne.n	800281e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_ADC_ConfigChannel+0x864>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x80c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_ADC_ConfigChannel+0x864>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x810>
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_ADC_ConfigChannel+0x868>)
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x812>
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_ADC_ConfigChannel+0x854>)
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7fe fda0 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
 8002802:	e00c      	b.n	800281e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002816:	e002      	b.n	800281e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002818:	bf00      	nop
 800281a:	e000      	b.n	800281e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002826:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800282a:	4618      	mov	r0, r3
 800282c:	37d8      	adds	r7, #216	; 0xd8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	50000700 	.word	0x50000700
 8002838:	c3210000 	.word	0xc3210000
 800283c:	90c00010 	.word	0x90c00010
 8002840:	50000600 	.word	0x50000600
 8002844:	50000100 	.word	0x50000100
 8002848:	50000300 	.word	0x50000300
 800284c:	20000014 	.word	0x20000014
 8002850:	053e2d63 	.word	0x053e2d63
 8002854:	c7520000 	.word	0xc7520000
 8002858:	50000500 	.word	0x50000500
 800285c:	cb840000 	.word	0xcb840000

08002860 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe ff90 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 800287c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe ffb1 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 8002888:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8098 	beq.w	80029c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d02a      	beq.n	80028fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7f5b      	ldrb	r3, [r3, #29]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d126      	bne.n	80028fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d122      	bne.n	80028fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ba:	e014      	b.n	80028e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <ADC_ConversionStop+0x174>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d90d      	bls.n	80028e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	f043 0210 	orr.w	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e074      	b.n	80029ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d1e3      	bne.n	80028bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d014      	beq.n	800292c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ff48 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe ff05 	bl	8001726 <LL_ADC_IsDisableOngoing>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ff24 	bl	8001774 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d014      	beq.n	800295c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe ff57 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe feed 	bl	8001726 <LL_ADC_IsDisableOngoing>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe ff33 	bl	80017c2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d005      	beq.n	800296e <ADC_ConversionStop+0x10e>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d105      	bne.n	8002974 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002968:	230c      	movs	r3, #12
 800296a:	617b      	str	r3, [r7, #20]
        break;
 800296c:	e005      	b.n	800297a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800296e:	2308      	movs	r3, #8
 8002970:	617b      	str	r3, [r7, #20]
        break;
 8002972:	e002      	b.n	800297a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002974:	2304      	movs	r3, #4
 8002976:	617b      	str	r3, [r7, #20]
        break;
 8002978:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800297a:	f7fe fca1 	bl	80012c0 <HAL_GetTick>
 800297e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002980:	e01b      	b.n	80029ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002982:	f7fe fc9d 	bl	80012c0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d914      	bls.n	80029ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e007      	b.n	80029ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1dc      	bne.n	8002982 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	a33fffff 	.word	0xa33fffff

080029d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fe89 	bl	8001700 <LL_ADC_IsEnabled>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d176      	bne.n	8002ae2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <ADC_Enable+0x114>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e062      	b.n	8002ae4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fe44 	bl	80016b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a30:	d004      	beq.n	8002a3c <ADC_Enable+0x64>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <ADC_Enable+0x118>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <ADC_Enable+0x68>
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <ADC_Enable+0x11c>)
 8002a3e:	e000      	b.n	8002a42 <ADC_Enable+0x6a>
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <ADC_Enable+0x120>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fc90 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 8002a48:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d013      	beq.n	8002a7a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <ADC_Enable+0x124>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <ADC_Enable+0x128>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a6c:	e002      	b.n	8002a74 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fc21 	bl	80012c0 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a80:	e028      	b.n	8002ad4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fe3a 	bl	8001700 <LL_ADC_IsEnabled>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fe0a 	bl	80016b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a9c:	f7fe fc10 	bl	80012c0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d914      	bls.n	8002ad4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d00d      	beq.n	8002ad4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d1cf      	bne.n	8002a82 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	8000003f 	.word	0x8000003f
 8002af0:	50000100 	.word	0x50000100
 8002af4:	50000300 	.word	0x50000300
 8002af8:	50000700 	.word	0x50000700
 8002afc:	20000014 	.word	0x20000014
 8002b00:	053e2d63 	.word	0x053e2d63

08002b04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fe08 	bl	8001726 <LL_ADC_IsDisableOngoing>
 8002b16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fdef 	bl	8001700 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d047      	beq.n	8002bb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d144      	bne.n	8002bb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030d 	and.w	r3, r3, #13
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fdc9 	bl	80016d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fbb7 	bl	80012c0 <HAL_GetTick>
 8002b52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b54:	e029      	b.n	8002baa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e023      	b.n	8002bba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b72:	f7fe fba5 	bl	80012c0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d914      	bls.n	8002baa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e007      	b.n	8002bba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1dc      	bne.n	8002b72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <LL_ADC_IsEnabled>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_IsEnabled+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_IsEnabled+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_REG_IsConversionOngoing>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d101      	bne.n	8002c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b0a1      	sub	sp, #132	; 0x84
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0e7      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c36:	2300      	movs	r3, #0
 8002c38:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c46:	d102      	bne.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c48:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	e009      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d102      	bne.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002c58:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	e001      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0be      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ffb0 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 8002c88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffaa 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80a0 	bne.w	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 809c 	bne.w	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002cba:	e000      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002cbe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04b      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cda:	035b      	lsls	r3, r3, #13
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a45      	ldr	r2, [pc, #276]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10f      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002cf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cfc:	f7ff ff61 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d00:	4604      	mov	r4, r0
 8002d02:	4841      	ldr	r0, [pc, #260]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d04:	f7ff ff5d 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4323      	orrs	r3, r4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e012      	b.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002d18:	483c      	ldr	r0, [pc, #240]	; (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d1a:	f7ff ff52 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	483b      	ldr	r0, [pc, #236]	; (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d22:	f7ff ff4e 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	431c      	orrs	r4, r3
 8002d2a:	483c      	ldr	r0, [pc, #240]	; (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d2c:	f7ff ff49 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4323      	orrs	r3, r4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d056      	beq.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	6892      	ldr	r2, [r2, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5e:	e047      	b.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d004      	beq.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10f      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002d80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d84:	f7ff ff1d 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	481f      	ldr	r0, [pc, #124]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d8c:	f7ff ff19 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4323      	orrs	r3, r4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002da0:	481a      	ldr	r0, [pc, #104]	; (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002da2:	f7ff ff0e 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002da6:	4604      	mov	r4, r0
 8002da8:	4819      	ldr	r0, [pc, #100]	; (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002daa:	f7ff ff0a 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	431c      	orrs	r4, r3
 8002db2:	481a      	ldr	r0, [pc, #104]	; (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002db4:	f7ff ff05 	bl	8002bc2 <LL_ADC_IsEnabled>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dd2:	f023 030f 	bic.w	r3, r3, #15
 8002dd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002dd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dda:	e009      	b.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002dee:	e000      	b.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3784      	adds	r7, #132	; 0x84
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	50000400 	.word	0x50000400
 8002e10:	50000500 	.word	0x50000500
 8002e14:	50000300 	.word	0x50000300
 8002e18:	50000700 	.word	0x50000700
 8002e1c:	50000600 	.word	0x50000600

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff47 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff5e 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff90 	bl	8002ed8 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5f 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffb2 	bl	8002f40 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_FLASH_GetError+0x14>)
 8002fee:	685b      	ldr	r3, [r3, #4]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000020 	.word	0x20000020

08003000 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003008:	f7fe f95a 	bl	80012c0 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800300e:	e009      	b.n	8003024 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8003010:	f7fe f956 	bl	80012c0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d201      	bcs.n	8003024 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e038      	b.n	8003096 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d0ee      	beq.n	8003010 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800303a:	4013      	ands	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01e      	beq.n	8003082 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <FLASH_WaitForLastOperation+0xa4>)
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <FLASH_WaitForLastOperation+0xa4>)
 800304e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <FLASH_WaitForLastOperation+0x6a>
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	618b      	str	r3, [r1, #24]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <FLASH_WaitForLastOperation+0x7e>
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800307c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e009      	b.n	8003096 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <FLASH_WaitForLastOperation+0xa0>)
 8003090:	2201      	movs	r2, #1
 8003092:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	20000020 	.word	0x20000020

080030a8 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_FLASHEx_OBProgram+0x11c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_FLASHEx_OBProgram+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e07d      	b.n	80031bc <HAL_FLASHEx_OBProgram+0x114>
 80030c0:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <HAL_FLASHEx_OBProgram+0x11c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_FLASHEx_OBProgram+0x11c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6858      	ldr	r0, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f000 f8df 	bl	80032a8 <FLASH_OB_WRPConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f919 	bl	800333c <FLASH_OB_RDPConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00c      	beq.n	800313a <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 f92e 	bl	800338c <FLASH_OB_UserConfig>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	429a      	cmp	r2, r3
 8003150:	d00d      	beq.n	800316e <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69d8      	ldr	r0, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a19      	ldr	r1, [r3, #32]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	461a      	mov	r2, r3
 8003160:	f000 fa34 	bl	80035cc <FLASH_OB_PCROPConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f000 fb1b 	bl	80037c0 <FLASH_OB_SecMemConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fb43 	bl	8003830 <FLASH_OB_BootLockConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_FLASHEx_OBProgram+0x11c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]

  return status;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000020 	.word	0x20000020

080031c8 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2206      	movs	r2, #6
 80031d4:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_FLASHEx_OBGetConfig+0x2e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d007      	beq.n	80031f6 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d10f      	bne.n	8003216 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6858      	ldr	r0, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f103 0108 	add.w	r1, r3, #8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	330c      	adds	r3, #12
 8003210:	461a      	mov	r2, r3
 8003212:	f000 fb61 	bl	80038d8 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003216:	f000 fbb1 	bl	800397c <FLASH_OB_GetRDP>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003220:	f000 fbc4 	bl	80039ac <FLASH_OB_GetUser>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d003      	beq.n	800323a <HAL_FLASHEx_OBGetConfig+0x72>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d110      	bne.n	800325c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f043 0208 	orr.w	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f103 001c 	add.w	r0, r3, #28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f103 0120 	add.w	r1, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3324      	adds	r3, #36	; 0x24
 8003256:	461a      	mov	r2, r3
 8003258:	f000 fbbc 	bl	80039d4 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 8003268:	f000 fb28 	bl	80038bc <FLASH_OB_GetBootLock>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d003      	beq.n	8003282 <HAL_FLASHEx_OBGetConfig+0xba>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	2b02      	cmp	r3, #2
 8003280:	d10d      	bne.n	800329e <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3330      	adds	r3, #48	; 0x30
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 faf1 	bl	8003880 <FLASH_OB_GetSecMem>
  }
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b8:	f7ff fea2 	bl	8003000 <FLASH_WaitForLastOperation>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d132      	bne.n	800332c <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	041a      	lsls	r2, r3, #16
 80032d0:	4919      	ldr	r1, [pc, #100]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032d8:	e01c      	b.n	8003314 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	041a      	lsls	r2, r3, #16
 80032e4:	4914      	ldr	r1, [pc, #80]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	630b      	str	r3, [r1, #48]	; 0x30
 80032ec:	e012      	b.n	8003314 <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d106      	bne.n	8003302 <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	041a      	lsls	r2, r3, #16
 80032f8:	490f      	ldr	r1, [pc, #60]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003300:	e008      	b.n	8003314 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d105      	bne.n	8003314 <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	041a      	lsls	r2, r3, #16
 800330c:	490a      	ldr	r1, [pc, #40]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <FLASH_OB_WRPConfig+0x90>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003324:	f7ff fe6c 	bl	8003000 <FLASH_WaitForLastOperation>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40022000 	.word	0x40022000

0800333c <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003348:	f7ff fe5a 	bl	8003000 <FLASH_WaitForLastOperation>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d113      	bne.n	800337e <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <FLASH_OB_RDPConfig+0x4c>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <FLASH_OB_RDPConfig+0x4c>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <FLASH_OB_RDPConfig+0x4c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <FLASH_OB_RDPConfig+0x4c>)
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003376:	f7ff fe43 	bl	8003000 <FLASH_WaitForLastOperation>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40022000 	.word	0x40022000

0800338c <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800339e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a2:	f7ff fe2d 	bl	8003000 <FLASH_WaitForLastOperation>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8105 	bne.w	80035bc <FLASH_OB_UserConfig+0x230>
      optr_reg_val |= (UserConfig & FLASH_OPTR_PB4_PUPEN);
      optr_reg_mask |= FLASH_OPTR_PB4_PUPEN;
    }
#endif /* FLASH_OPTR_PB4_PUPEN */

    if ((UserType & OB_USER_BOR_LEV) != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ce:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033ec:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800340a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003482:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034a0:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034dc:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fa:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003518:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003536:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003554:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003572:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003590:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <FLASH_OB_UserConfig+0x23c>)
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	490a      	ldr	r1, [pc, #40]	; (80035c8 <FLASH_OB_UserConfig+0x23c>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <FLASH_OB_UserConfig+0x23c>)
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <FLASH_OB_UserConfig+0x23c>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ae:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035b4:	f7ff fd24 	bl	8003000 <FLASH_WaitForLastOperation>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000

080035cc <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035dc:	f7ff fd10 	bl	8003000 <FLASH_WaitForLastOperation>
 80035e0:	4603      	mov	r3, r0
 80035e2:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 80da 	bne.w	80037a0 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <FLASH_OB_PCROPConfig+0x1e0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d114      	bne.n	8003622 <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 80035f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035fc:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80035fe:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <FLASH_OB_PCROPConfig+0x1e4>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003606:	4293      	cmp	r3, r2
 8003608:	d008      	beq.n	800361c <FLASH_OB_PCROPConfig+0x50>
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <FLASH_OB_PCROPConfig+0x1e4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	085a      	lsrs	r2, r3, #1
 8003612:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <FLASH_OB_PCROPConfig+0x1e8>)
 8003614:	4013      	ands	r3, r2
 8003616:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800361a:	e000      	b.n	800361e <FLASH_OB_PCROPConfig+0x52>
 800361c:	4b66      	ldr	r3, [pc, #408]	; (80037b8 <FLASH_OB_PCROPConfig+0x1ec>)
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e013      	b.n	800364a <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <FLASH_OB_PCROPConfig+0x1e4>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362a:	4293      	cmp	r3, r2
 800362c:	d008      	beq.n	8003640 <FLASH_OB_PCROPConfig+0x74>
 800362e:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <FLASH_OB_PCROPConfig+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	085a      	lsrs	r2, r3, #1
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <FLASH_OB_PCROPConfig+0x1e8>)
 8003638:	4013      	ands	r3, r2
 800363a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800363e:	e000      	b.n	8003642 <FLASH_OB_PCROPConfig+0x76>
 8003640:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <FLASH_OB_PCROPConfig+0x1ec>)
 8003642:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8003644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003648:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d147      	bne.n	80036e6 <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11e      	bne.n	800369e <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800366a:	4b54      	ldr	r3, [pc, #336]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003676:	4951      	ldr	r1, [pc, #324]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003690:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003694:	4949      	ldr	r1, [pc, #292]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	628b      	str	r3, [r1, #40]	; 0x28
 800369c:	e06a      	b.n	8003774 <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d165      	bne.n	8003774 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80036b2:	4b42      	ldr	r3, [pc, #264]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036be:	493f      	ldr	r1, [pc, #252]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80036d0:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036dc:	4937      	ldr	r1, [pc, #220]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	648b      	str	r3, [r1, #72]	; 0x48
 80036e4:	e046      	b.n	8003774 <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d11e      	bne.n	800372e <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003706:	492d      	ldr	r1, [pc, #180]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003724:	4925      	ldr	r1, [pc, #148]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	628b      	str	r3, [r1, #40]	; 0x28
 800372c:	e022      	b.n	8003774 <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11d      	bne.n	8003774 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	08db      	lsrs	r3, r3, #3
 8003740:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800374a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800374e:	491b      	ldr	r1, [pc, #108]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003768:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800376c:	4913      	ldr	r1, [pc, #76]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <FLASH_OB_PCROPConfig+0x1f0>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003792:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003798:	f7ff fc32 	bl	8003000 <FLASH_WaitForLastOperation>
 800379c:	4603      	mov	r3, r0
 800379e:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	1fff75e0 	.word	0x1fff75e0
 80037b4:	01fffe00 	.word	0x01fffe00
 80037b8:	08040000 	.word	0x08040000
 80037bc:	40022000 	.word	0x40022000

080037c0 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ce:	f7ff fc17 	bl	8003000 <FLASH_WaitForLastOperation>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d122      	bne.n	8003822 <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d108      	bne.n	80037f4 <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037ea:	4910      	ldr	r1, [pc, #64]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	670b      	str	r3, [r1, #112]	; 0x70
 80037f2:	e00a      	b.n	800380a <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d107      	bne.n	800380a <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <FLASH_OB_SecMemConfig+0x6c>)
 8003810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003814:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800381a:	f7ff fbf1 	bl	8003000 <FLASH_WaitForLastOperation>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40022000 	.word	0x40022000

08003830 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800383c:	f7ff fbe0 	bl	8003000 <FLASH_WaitForLastOperation>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <FLASH_OB_BootLockConfig+0x4c>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <FLASH_OB_BootLockConfig+0x4c>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4313      	orrs	r3, r2
 8003858:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <FLASH_OB_BootLockConfig+0x4c>)
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	4a07      	ldr	r2, [pc, #28]	; (800387c <FLASH_OB_BootLockConfig+0x4c>)
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800386a:	f7ff fbc9 	bl	8003000 <FLASH_WaitForLastOperation>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40022000 	.word	0x40022000

08003880 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <FLASH_OB_GetSecMem+0x38>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	b2da      	uxtb	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 800389a:	e007      	b.n	80038ac <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d104      	bne.n	80038ac <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <FLASH_OB_GetSecMem+0x38>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	601a      	str	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40022000 	.word	0x40022000

080038bc <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <FLASH_OB_GetBootLock+0x18>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000

080038d8 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8003904:	e031      	b.n	800396a <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10d      	bne.n	8003928 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	e020      	b.n	800396a <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d10d      	bne.n	800394a <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	e00f      	b.n	800396a <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d10c      	bne.n	800396a <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <FLASH_OB_GetWRP+0xa0>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000

0800397c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <FLASH_OB_GetRDP+0x2c>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2baa      	cmp	r3, #170	; 0xaa
 800398e:	d004      	beq.n	800399a <FLASH_OB_GetRDP+0x1e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2bcc      	cmp	r3, #204	; 0xcc
 8003994:	d001      	beq.n	800399a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8003996:	23bb      	movs	r3, #187	; 0xbb
 8003998:	e000      	b.n	800399c <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 800399a:	687b      	ldr	r3, [r7, #4]
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40022000 	.word	0x40022000

080039ac <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <FLASH_OB_GetUser+0x24>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039be:	607b      	str	r3, [r7, #4]

  return user_config;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000

080039d4 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80039e0:	4b5b      	ldr	r3, [pc, #364]	; (8003b50 <FLASH_OB_GetPCROP+0x17c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d114      	bne.n	8003a16 <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 80039ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f0:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80039f2:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <FLASH_OB_GetPCROP+0x180>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d008      	beq.n	8003a10 <FLASH_OB_GetPCROP+0x3c>
 80039fe:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <FLASH_OB_GetPCROP+0x180>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	085a      	lsrs	r2, r3, #1
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <FLASH_OB_GetPCROP+0x184>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003a0e:	e000      	b.n	8003a12 <FLASH_OB_GetPCROP+0x3e>
 8003a10:	4b52      	ldr	r3, [pc, #328]	; (8003b5c <FLASH_OB_GetPCROP+0x188>)
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e013      	b.n	8003a3e <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8003a16:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <FLASH_OB_GetPCROP+0x180>)
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d008      	beq.n	8003a34 <FLASH_OB_GetPCROP+0x60>
 8003a22:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <FLASH_OB_GetPCROP+0x180>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	085a      	lsrs	r2, r3, #1
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <FLASH_OB_GetPCROP+0x184>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003a32:	e000      	b.n	8003a36 <FLASH_OB_GetPCROP+0x62>
 8003a34:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <FLASH_OB_GetPCROP+0x188>)
 8003a36:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8003a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a3c:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8003a3e:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d139      	bne.n	8003abe <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d116      	bne.n	8003a84 <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a5e:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8003a6c:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a74:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e055      	b.n	8003b30 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d14f      	bne.n	8003b30 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a98:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003aae:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e038      	b.n	8003b30 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d116      	bne.n	8003af8 <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ad2:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	00da      	lsls	r2, r3, #3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	441a      	add	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ae8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	00da      	lsls	r2, r3, #3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e01b      	b.n	8003b30 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d115      	bne.n	8003b30 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8003b04:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b0c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	00da      	lsls	r2, r3, #3
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	441a      	add	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b22:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	00da      	lsls	r2, r3, #3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <FLASH_OB_GetPCROP+0x18c>)
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	1fff75e0 	.word	0x1fff75e0
 8003b58:	01fffe00 	.word	0x01fffe00
 8003b5c:	08040000 	.word	0x08040000
 8003b60:	40022000 	.word	0x40022000

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b72:	e15a      	b.n	8003e2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 814c 	beq.w	8003e24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d005      	beq.n	8003ba4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d130      	bne.n	8003c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bda:	2201      	movs	r2, #1
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0201 	and.w	r2, r3, #1
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d017      	beq.n	8003c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d123      	bne.n	8003c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	08da      	lsrs	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3208      	adds	r2, #8
 8003c90:	6939      	ldr	r1, [r7, #16]
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a6 	beq.w	8003e24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd8:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	4a5a      	ldr	r2, [pc, #360]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ce4:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_GPIO_Init+0x2e4>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf0:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d1a:	d01f      	beq.n	8003d5c <HAL_GPIO_Init+0x1f8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_GPIO_Init+0x2ec>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d019      	beq.n	8003d58 <HAL_GPIO_Init+0x1f4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_GPIO_Init+0x2f0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_GPIO_Init+0x1f0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <HAL_GPIO_Init+0x2f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00d      	beq.n	8003d50 <HAL_GPIO_Init+0x1ec>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_GPIO_Init+0x2f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x1e8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_GPIO_Init+0x1e4>
 8003d44:	2305      	movs	r3, #5
 8003d46:	e00a      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	e008      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e006      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d50:	2303      	movs	r3, #3
 8003d52:	e004      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e002      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d6e:	4937      	ldr	r1, [pc, #220]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da0:	4a30      	ldr	r2, [pc, #192]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003da6:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e1e:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f ae9d 	bne.w	8003b74 <HAL_GPIO_Init+0x10>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	48000400 	.word	0x48000400
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48000c00 	.word	0x48000c00
 8003e5c:	48001000 	.word	0x48001000
 8003e60:	48001400 	.word	0x48001400
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
 8003e74:	4613      	mov	r3, r2
 8003e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e78:	787b      	ldrb	r3, [r7, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e7e:	887a      	ldrh	r2, [r7, #2]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e84:	e002      	b.n	8003e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e08d      	b.n	8003fc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fc ffe4 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2224      	movs	r2, #36	; 0x24
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	e006      	b.n	8003f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d108      	bne.n	8003f3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	e007      	b.n	8003f4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69d9      	ldr	r1, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d138      	bne.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e032      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2224      	movs	r2, #36	; 0x24
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004020:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d139      	bne.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004084:	2302      	movs	r3, #2
 8004086:	e033      	b.n	80040f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0bb      	b.n	800428a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b05      	cmp	r3, #5
 800411c:	d101      	bne.n	8004122 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0b3      	b.n	800428a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d101      	bne.n	8004132 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0ab      	b.n	800428a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	4b58      	ldr	r3, [pc, #352]	; (8004294 <HAL_OPAMP_Init+0x198>)
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	4a57      	ldr	r2, [pc, #348]	; (8004294 <HAL_OPAMP_Init+0x198>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6613      	str	r3, [r2, #96]	; 0x60
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <HAL_OPAMP_Init+0x198>)
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc ff0a 	bl	8000f78 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d003      	beq.n	8004174 <HAL_OPAMP_Init+0x78>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d133      	bne.n	80041dc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 0110 	bic.w	r1, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_OPAMP_Init+0x19c>)
 8004192:	4013      	ands	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6851      	ldr	r1, [r2, #4]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6892      	ldr	r2, [r2, #8]
 800419c:	4311      	orrs	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6912      	ldr	r2, [r2, #16]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	7d09      	ldrb	r1, [r1, #20]
 80041a8:	2901      	cmp	r1, #1
 80041aa:	d102      	bne.n	80041b2 <HAL_OPAMP_Init+0xb6>
 80041ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041b0:	e000      	b.n	80041b4 <HAL_OPAMP_Init+0xb8>
 80041b2:	2100      	movs	r1, #0
 80041b4:	4311      	orrs	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041c6:	04d2      	lsls	r2, r2, #19
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ce:	0612      	lsls	r2, r2, #24
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e035      	b.n	8004248 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 0110 	bic.w	r1, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_OPAMP_Init+0x19c>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6851      	ldr	r1, [r2, #4]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6892      	ldr	r2, [r2, #8]
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6912      	ldr	r2, [r2, #16]
 8004210:	430a      	orrs	r2, r1
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	7d09      	ldrb	r1, [r1, #20]
 8004216:	2901      	cmp	r1, #1
 8004218:	d102      	bne.n	8004220 <HAL_OPAMP_Init+0x124>
 800421a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800421e:	e000      	b.n	8004222 <HAL_OPAMP_Init+0x126>
 8004220:	2100      	movs	r1, #0
 8004222:	4311      	orrs	r1, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004234:	04d2      	lsls	r2, r2, #19
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800423c:	0612      	lsls	r2, r2, #24
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db10      	blt.n	8004274 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	e0003e11 	.word	0xe0003e11

0800429c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	e01d      	b.n	80042f0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d102      	bne.n	80042c6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e014      	b.n	80042f0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10c      	bne.n	80042ec <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80042ea:	e001      	b.n	80042f0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d141      	bne.n	8004392 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800430e:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d131      	bne.n	8004380 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004322:	4a46      	ldr	r2, [pc, #280]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800432c:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004334:	4a41      	ldr	r2, [pc, #260]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2232      	movs	r2, #50	; 0x32
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a3f      	ldr	r2, [pc, #252]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9b      	lsrs	r3, r3, #18
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004352:	e002      	b.n	800435a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435a:	4b38      	ldr	r3, [pc, #224]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d102      	bne.n	800436e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f2      	bne.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800436e:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d158      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e057      	b.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004380:	4b2e      	ldr	r3, [pc, #184]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004386:	4a2d      	ldr	r2, [pc, #180]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004390:	e04d      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004398:	d141      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800439a:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d131      	bne.n	800440c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ae:	4a23      	ldr	r2, [pc, #140]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b8:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c0:	4a1e      	ldr	r2, [pc, #120]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2232      	movs	r2, #50	; 0x32
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	e002      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d102      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d112      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e011      	b.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800441c:	e007      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004426:	4a05      	ldr	r2, [pc, #20]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40007000 	.word	0x40007000
 8004440:	20000014 	.word	0x20000014
 8004444:	431bde83 	.word	0x431bde83

08004448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e2fe      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d075      	beq.n	8004552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004466:	4b97      	ldr	r3, [pc, #604]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004470:	4b94      	ldr	r3, [pc, #592]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d102      	bne.n	8004486 <HAL_RCC_OscConfig+0x3e>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d002      	beq.n	800448c <HAL_RCC_OscConfig+0x44>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d10b      	bne.n	80044a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05b      	beq.n	8004550 <HAL_RCC_OscConfig+0x108>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d157      	bne.n	8004550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e2d9      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d106      	bne.n	80044bc <HAL_RCC_OscConfig+0x74>
 80044ae:	4b85      	ldr	r3, [pc, #532]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a84      	ldr	r2, [pc, #528]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e01d      	b.n	80044f8 <HAL_RCC_OscConfig+0xb0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x98>
 80044c6:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7e      	ldr	r2, [pc, #504]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b7c      	ldr	r3, [pc, #496]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7b      	ldr	r2, [pc, #492]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0xb0>
 80044e0:	4b78      	ldr	r3, [pc, #480]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a77      	ldr	r2, [pc, #476]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b75      	ldr	r3, [pc, #468]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a74      	ldr	r2, [pc, #464]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fc fede 	bl	80012c0 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fc feda 	bl	80012c0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e29e      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800451a:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0xc0>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc feca 	bl	80012c0 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fc fec6 	bl	80012c0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e28a      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004542:	4b60      	ldr	r3, [pc, #384]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0xe8>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d075      	beq.n	800464a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b59      	ldr	r3, [pc, #356]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b56      	ldr	r3, [pc, #344]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d102      	bne.n	800457e <HAL_RCC_OscConfig+0x136>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d002      	beq.n	8004584 <HAL_RCC_OscConfig+0x13c>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d11f      	bne.n	80045c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x154>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e25d      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b49      	ldr	r3, [pc, #292]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	4946      	ldr	r1, [pc, #280]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045b0:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <HAL_RCC_OscConfig+0x280>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fe37 	bl	8001228 <HAL_InitTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d043      	beq.n	8004648 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e249      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc fe72 	bl	80012c0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fc fe6e 	bl	80012c0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e232      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f2:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	492d      	ldr	r1, [pc, #180]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
 8004612:	e01a      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800461a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fc fe4e 	bl	80012c0 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fc fe4a 	bl	80012c0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e20e      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x1e0>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d041      	beq.n	80046da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01c      	beq.n	8004698 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fc fe27 	bl	80012c0 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004676:	f7fc fe23 	bl	80012c0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1e7      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ef      	beq.n	8004676 <HAL_RCC_OscConfig+0x22e>
 8004696:	e020      	b.n	80046da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc fe0a 	bl	80012c0 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ae:	e00d      	b.n	80046cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fc fe06 	bl	80012c0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d906      	bls.n	80046cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1ca      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046cc:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ea      	bne.n	80046b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x2b4>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x2b6>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00d      	beq.n	800471e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	6593      	str	r3, [r2, #88]	; 0x58
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800471a:	2301      	movs	r3, #1
 800471c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471e:	4b79      	ldr	r3, [pc, #484]	; (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472a:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x4bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a75      	ldr	r2, [pc, #468]	; (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004736:	f7fc fdc3 	bl	80012c0 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fc fdbf 	bl	80012c0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e183      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004750:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d108      	bne.n	8004776 <HAL_RCC_OscConfig+0x32e>
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004774:	e024      	b.n	80047c0 <HAL_RCC_OscConfig+0x378>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d110      	bne.n	80047a0 <HAL_RCC_OscConfig+0x358>
 800477e:	4b60      	ldr	r3, [pc, #384]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	4a5e      	ldr	r2, [pc, #376]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800478e:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	4a5a      	ldr	r2, [pc, #360]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479e:	e00f      	b.n	80047c0 <HAL_RCC_OscConfig+0x378>
 80047a0:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a56      	ldr	r2, [pc, #344]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b0:	4b53      	ldr	r3, [pc, #332]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fc fd7a 	bl	80012c0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fc fd76 	bl	80012c0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e138      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ed      	beq.n	80047d0 <HAL_RCC_OscConfig+0x388>
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fc fd63 	bl	80012c0 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fc fd5f 	bl	80012c0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e121      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004814:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ed      	bne.n	80047fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03c      	beq.n	80048ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01c      	beq.n	8004882 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004848:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fc fd32 	bl	80012c0 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004860:	f7fc fd2e 	bl	80012c0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0f2      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ef      	beq.n	8004860 <HAL_RCC_OscConfig+0x418>
 8004880:	e01b      	b.n	80048ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fc fd15 	bl	80012c0 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489a:	f7fc fd11 	bl	80012c0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0d5      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ef      	bne.n	800489a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80c9 	beq.w	8004a56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	f000 8083 	beq.w	80049d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d15e      	bne.n	8004998 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fc fceb 	bl	80012c0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ec:	e00c      	b.n	8004908 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fc fce7 	bl	80012c0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d905      	bls.n	8004908 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0ab      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ec      	bne.n	80048ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004914:	4b52      	ldr	r3, [pc, #328]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	4b52      	ldr	r3, [pc, #328]	; (8004a64 <HAL_RCC_OscConfig+0x61c>)
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6a11      	ldr	r1, [r2, #32]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004924:	3a01      	subs	r2, #1
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800492e:	0212      	lsls	r2, r2, #8
 8004930:	4311      	orrs	r1, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004936:	0852      	lsrs	r2, r2, #1
 8004938:	3a01      	subs	r2, #1
 800493a:	0552      	lsls	r2, r2, #21
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004942:	0852      	lsrs	r2, r2, #1
 8004944:	3a01      	subs	r2, #1
 8004946:	0652      	lsls	r2, r2, #25
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800494e:	06d2      	lsls	r2, r2, #27
 8004950:	430a      	orrs	r2, r1
 8004952:	4943      	ldr	r1, [pc, #268]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004954:	4313      	orrs	r3, r2
 8004956:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004958:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a40      	ldr	r2, [pc, #256]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004964:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fc fca6 	bl	80012c0 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fc fca2 	bl	80012c0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e066      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x530>
 8004996:	e05e      	b.n	8004a56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fc fc8c 	bl	80012c0 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fc fc88 	bl	80012c0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04c      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049ca:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	4924      	ldr	r1, [pc, #144]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <HAL_RCC_OscConfig+0x620>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
 80049d6:	e03e      	b.n	8004a56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e039      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0203 	and.w	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d12c      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	3b01      	subs	r3, #1
 8004a04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d123      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d11b      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d113      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	019f800c 	.word	0x019f800c
 8004a68:	feeefffc 	.word	0xfeeefffc

08004a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e11e      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b91      	ldr	r3, [pc, #580]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d910      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b8e      	ldr	r3, [pc, #568]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	498c      	ldr	r1, [pc, #560]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b8a      	ldr	r3, [pc, #552]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e106      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d073      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d129      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac8:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0f4      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ad8:	f000 f99e 	bl	8004e18 <RCC_GetSysClockFreqFromPLLSource>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d93f      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ae6:	4b7a      	ldr	r3, [pc, #488]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d033      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d12f      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0e:	4a70      	ldr	r2, [pc, #448]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e024      	b.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0c6      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	4b66      	ldr	r3, [pc, #408]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0be      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b44:	f000 f8ce 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4a61      	ldr	r2, [pc, #388]	; (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d909      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5a:	4a5d      	ldr	r2, [pc, #372]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4957      	ldr	r1, [pc, #348]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc fba2 	bl	80012c0 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc fb9e 	bl	80012c0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e095      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004be0:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4936      	ldr	r1, [pc, #216]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d105      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d21d      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 020f 	bic.w	r2, r3, #15
 8004c24:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc fb48 	bl	80012c0 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc fb44 	bl	80012c0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e03b      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1ed      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4917      	ldr	r1, [pc, #92]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490f      	ldr	r1, [pc, #60]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 f825 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490c      	ldr	r1, [pc, #48]	; (8004cd8 <HAL_RCC_ClockConfig+0x26c>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x270>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fab4 	bl	8001228 <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	04c4b400 	.word	0x04c4b400
 8004cd8:	08006430 	.word	0x08006430
 8004cdc:	20000014 	.word	0x20000014
 8004ce0:	20000018 	.word	0x20000018

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d102      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e047      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d08:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e03e      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d0e:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d136      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d38:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d42:	68d2      	ldr	r2, [r2, #12]
 8004d44:	0a12      	lsrs	r2, r2, #8
 8004d46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	617b      	str	r3, [r7, #20]
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	0a12      	lsrs	r2, r2, #8
 8004d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
      break;
 8004d6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0e5b      	lsrs	r3, r3, #25
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e001      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d8c:	693b      	ldr	r3, [r7, #16]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000014 	.word	0x20000014

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dc4:	f7ff fff0 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	08006440 	.word	0x08006440

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004df0:	f7ff ffda 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0adb      	lsrs	r3, r3, #11
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4904      	ldr	r1, [pc, #16]	; (8004e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40021000 	.word	0x40021000
 8004e14:	08006440 	.word	0x08006440

08004e18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d10c      	bne.n	8004e56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e46:	68d2      	ldr	r2, [r2, #12]
 8004e48:	0a12      	lsrs	r2, r2, #8
 8004e4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	617b      	str	r3, [r7, #20]
    break;
 8004e54:	e00c      	b.n	8004e70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	0a12      	lsrs	r2, r2, #8
 8004e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
    break;
 8004e6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0e5b      	lsrs	r3, r3, #25
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e8a:	687b      	ldr	r3, [r7, #4]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	007a1200 	.word	0x007a1200
 8004ea0:	00f42400 	.word	0x00f42400

08004ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eac:	2300      	movs	r3, #0
 8004eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8098 	beq.w	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a3f      	ldr	r2, [pc, #252]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eee:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a39      	ldr	r2, [pc, #228]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efa:	f7fc f9e1 	bl	80012c0 <HAL_GetTick>
 8004efe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f00:	e009      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc f9dd 	bl	80012c0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d902      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	74fb      	strb	r3, [r7, #19]
        break;
 8004f14:	e005      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ef      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d159      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01e      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d019      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f44:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fc f99d 	bl	80012c0 <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fc f999 	bl	80012c0 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d902      	bls.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004fa0:	e006      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ec      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	4903      	ldr	r1, [pc, #12]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	74bb      	strb	r3, [r7, #18]
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe0:	7c7b      	ldrb	r3, [r7, #17]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe6:	4ba7      	ldr	r3, [pc, #668]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	4aa6      	ldr	r2, [pc, #664]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ffe:	4ba1      	ldr	r3, [pc, #644]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f023 0203 	bic.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	499d      	ldr	r1, [pc, #628]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005020:	4b98      	ldr	r3, [pc, #608]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 020c 	bic.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4995      	ldr	r1, [pc, #596]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005042:	4b90      	ldr	r3, [pc, #576]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	498c      	ldr	r1, [pc, #560]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005064:	4b87      	ldr	r3, [pc, #540]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	4984      	ldr	r1, [pc, #528]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005086:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	497b      	ldr	r1, [pc, #492]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a8:	4b76      	ldr	r3, [pc, #472]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	4973      	ldr	r1, [pc, #460]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ca:	4b6e      	ldr	r3, [pc, #440]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	496a      	ldr	r1, [pc, #424]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ec:	4b65      	ldr	r3, [pc, #404]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4962      	ldr	r1, [pc, #392]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800510e:	4b5d      	ldr	r3, [pc, #372]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4959      	ldr	r1, [pc, #356]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005130:	4b54      	ldr	r3, [pc, #336]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005136:	f023 0203 	bic.w	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	4951      	ldr	r1, [pc, #324]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005152:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4948      	ldr	r1, [pc, #288]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005174:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	4940      	ldr	r1, [pc, #256]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005192:	d105      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005194:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a3a      	ldr	r2, [pc, #232]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051ac:	4b35      	ldr	r3, [pc, #212]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	4932      	ldr	r1, [pc, #200]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ca:	d105      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d015      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4924      	ldr	r1, [pc, #144]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005202:	d105      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005204:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800520e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	4916      	ldr	r1, [pc, #88]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800523a:	d105      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4a10      	ldr	r2, [pc, #64]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005246:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4908      	ldr	r1, [pc, #32]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005272:	d109      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a02      	ldr	r2, [pc, #8]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4926      	ldr	r1, [pc, #152]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b2:	d105      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b4:	4b21      	ldr	r3, [pc, #132]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a20      	ldr	r2, [pc, #128]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d015      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052da:	4918      	ldr	r1, [pc, #96]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052ec:	4b13      	ldr	r3, [pc, #76]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d015      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005322:	d105      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a04      	ldr	r2, [pc, #16]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005330:	7cbb      	ldrb	r3, [r7, #18]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000

08005340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e042      	b.n	80053d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fe53 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2224      	movs	r2, #36	; 0x24
 800536e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fbb2 	bl	8005af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8b3 	bl	80054fc <UART_SetConfig>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e01b      	b.n	80053d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fc31 	bl	8005c38 <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d17b      	bne.n	80054f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Transmit+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e074      	b.n	80054f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2221      	movs	r2, #33	; 0x21
 8005416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800541a:	f7fb ff51 	bl	80012c0 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d108      	bne.n	800544c <HAL_UART_Transmit+0x6c>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e003      	b.n	8005454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005454:	e030      	b.n	80054b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fc93 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e03d      	b.n	80054f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	3302      	adds	r3, #2
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e007      	b.n	80054a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1c8      	bne.n	8005456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fc5c 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e006      	b.n	80054f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005500:	b08c      	sub	sp, #48	; 0x30
 8005502:	af00      	add	r7, sp, #0
 8005504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4313      	orrs	r3, r2
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4baa      	ldr	r3, [pc, #680]	; (80057d4 <UART_SetConfig+0x2d8>)
 800552c:	4013      	ands	r3, r2
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005534:	430b      	orrs	r3, r1
 8005536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a9f      	ldr	r2, [pc, #636]	; (80057d8 <UART_SetConfig+0x2dc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	4313      	orrs	r3, r2
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005572:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557c:	430b      	orrs	r3, r1
 800557e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f023 010f 	bic.w	r1, r3, #15
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a90      	ldr	r2, [pc, #576]	; (80057dc <UART_SetConfig+0x2e0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d125      	bne.n	80055ec <UART_SetConfig+0xf0>
 80055a0:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <UART_SetConfig+0x2e4>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d81a      	bhi.n	80055e4 <UART_SetConfig+0xe8>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0xb8>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055dd 	.word	0x080055dd
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ca:	e116      	b.n	80057fa <UART_SetConfig+0x2fe>
 80055cc:	2302      	movs	r3, #2
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e112      	b.n	80057fa <UART_SetConfig+0x2fe>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e10e      	b.n	80057fa <UART_SetConfig+0x2fe>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e2:	e10a      	b.n	80057fa <UART_SetConfig+0x2fe>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ea:	e106      	b.n	80057fa <UART_SetConfig+0x2fe>
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7c      	ldr	r2, [pc, #496]	; (80057e4 <UART_SetConfig+0x2e8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d138      	bne.n	8005668 <UART_SetConfig+0x16c>
 80055f6:	4b7a      	ldr	r3, [pc, #488]	; (80057e0 <UART_SetConfig+0x2e4>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d82d      	bhi.n	8005660 <UART_SetConfig+0x164>
 8005604:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0x110>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005641 	.word	0x08005641
 8005610:	08005661 	.word	0x08005661
 8005614:	08005661 	.word	0x08005661
 8005618:	08005661 	.word	0x08005661
 800561c:	08005651 	.word	0x08005651
 8005620:	08005661 	.word	0x08005661
 8005624:	08005661 	.word	0x08005661
 8005628:	08005661 	.word	0x08005661
 800562c:	08005649 	.word	0x08005649
 8005630:	08005661 	.word	0x08005661
 8005634:	08005661 	.word	0x08005661
 8005638:	08005661 	.word	0x08005661
 800563c:	08005659 	.word	0x08005659
 8005640:	2300      	movs	r3, #0
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e0d8      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564e:	e0d4      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005656:	e0d0      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565e:	e0cc      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005666:	e0c8      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a5e      	ldr	r2, [pc, #376]	; (80057e8 <UART_SetConfig+0x2ec>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d125      	bne.n	80056be <UART_SetConfig+0x1c2>
 8005672:	4b5b      	ldr	r3, [pc, #364]	; (80057e0 <UART_SetConfig+0x2e4>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800567c:	2b30      	cmp	r3, #48	; 0x30
 800567e:	d016      	beq.n	80056ae <UART_SetConfig+0x1b2>
 8005680:	2b30      	cmp	r3, #48	; 0x30
 8005682:	d818      	bhi.n	80056b6 <UART_SetConfig+0x1ba>
 8005684:	2b20      	cmp	r3, #32
 8005686:	d00a      	beq.n	800569e <UART_SetConfig+0x1a2>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d814      	bhi.n	80056b6 <UART_SetConfig+0x1ba>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <UART_SetConfig+0x19a>
 8005690:	2b10      	cmp	r3, #16
 8005692:	d008      	beq.n	80056a6 <UART_SetConfig+0x1aa>
 8005694:	e00f      	b.n	80056b6 <UART_SetConfig+0x1ba>
 8005696:	2300      	movs	r3, #0
 8005698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569c:	e0ad      	b.n	80057fa <UART_SetConfig+0x2fe>
 800569e:	2302      	movs	r3, #2
 80056a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a4:	e0a9      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056a6:	2304      	movs	r3, #4
 80056a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ac:	e0a5      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056ae:	2308      	movs	r3, #8
 80056b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b4:	e0a1      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056b6:	2310      	movs	r3, #16
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056bc:	e09d      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <UART_SetConfig+0x2f0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d125      	bne.n	8005714 <UART_SetConfig+0x218>
 80056c8:	4b45      	ldr	r3, [pc, #276]	; (80057e0 <UART_SetConfig+0x2e4>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056d2:	2bc0      	cmp	r3, #192	; 0xc0
 80056d4:	d016      	beq.n	8005704 <UART_SetConfig+0x208>
 80056d6:	2bc0      	cmp	r3, #192	; 0xc0
 80056d8:	d818      	bhi.n	800570c <UART_SetConfig+0x210>
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d00a      	beq.n	80056f4 <UART_SetConfig+0x1f8>
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d814      	bhi.n	800570c <UART_SetConfig+0x210>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <UART_SetConfig+0x1f0>
 80056e6:	2b40      	cmp	r3, #64	; 0x40
 80056e8:	d008      	beq.n	80056fc <UART_SetConfig+0x200>
 80056ea:	e00f      	b.n	800570c <UART_SetConfig+0x210>
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f2:	e082      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fa:	e07e      	b.n	80057fa <UART_SetConfig+0x2fe>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005702:	e07a      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570a:	e076      	b.n	80057fa <UART_SetConfig+0x2fe>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005712:	e072      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a35      	ldr	r2, [pc, #212]	; (80057f0 <UART_SetConfig+0x2f4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d12a      	bne.n	8005774 <UART_SetConfig+0x278>
 800571e:	4b30      	ldr	r3, [pc, #192]	; (80057e0 <UART_SetConfig+0x2e4>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572c:	d01a      	beq.n	8005764 <UART_SetConfig+0x268>
 800572e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005732:	d81b      	bhi.n	800576c <UART_SetConfig+0x270>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d00c      	beq.n	8005754 <UART_SetConfig+0x258>
 800573a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573e:	d815      	bhi.n	800576c <UART_SetConfig+0x270>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <UART_SetConfig+0x250>
 8005744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005748:	d008      	beq.n	800575c <UART_SetConfig+0x260>
 800574a:	e00f      	b.n	800576c <UART_SetConfig+0x270>
 800574c:	2300      	movs	r3, #0
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005752:	e052      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575a:	e04e      	b.n	80057fa <UART_SetConfig+0x2fe>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005762:	e04a      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	e046      	b.n	80057fa <UART_SetConfig+0x2fe>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e042      	b.n	80057fa <UART_SetConfig+0x2fe>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <UART_SetConfig+0x2dc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d13a      	bne.n	80057f4 <UART_SetConfig+0x2f8>
 800577e:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <UART_SetConfig+0x2e4>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800578c:	d01a      	beq.n	80057c4 <UART_SetConfig+0x2c8>
 800578e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005792:	d81b      	bhi.n	80057cc <UART_SetConfig+0x2d0>
 8005794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005798:	d00c      	beq.n	80057b4 <UART_SetConfig+0x2b8>
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d815      	bhi.n	80057cc <UART_SetConfig+0x2d0>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <UART_SetConfig+0x2b0>
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d008      	beq.n	80057bc <UART_SetConfig+0x2c0>
 80057aa:	e00f      	b.n	80057cc <UART_SetConfig+0x2d0>
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b2:	e022      	b.n	80057fa <UART_SetConfig+0x2fe>
 80057b4:	2302      	movs	r3, #2
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ba:	e01e      	b.n	80057fa <UART_SetConfig+0x2fe>
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c2:	e01a      	b.n	80057fa <UART_SetConfig+0x2fe>
 80057c4:	2308      	movs	r3, #8
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ca:	e016      	b.n	80057fa <UART_SetConfig+0x2fe>
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e012      	b.n	80057fa <UART_SetConfig+0x2fe>
 80057d4:	cfff69f3 	.word	0xcfff69f3
 80057d8:	40008000 	.word	0x40008000
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40004400 	.word	0x40004400
 80057e8:	40004800 	.word	0x40004800
 80057ec:	40004c00 	.word	0x40004c00
 80057f0:	40005000 	.word	0x40005000
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4aae      	ldr	r2, [pc, #696]	; (8005ab8 <UART_SetConfig+0x5bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	f040 8097 	bne.w	8005934 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800580a:	2b08      	cmp	r3, #8
 800580c:	d823      	bhi.n	8005856 <UART_SetConfig+0x35a>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <UART_SetConfig+0x318>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005839 	.word	0x08005839
 8005818:	08005857 	.word	0x08005857
 800581c:	08005841 	.word	0x08005841
 8005820:	08005857 	.word	0x08005857
 8005824:	08005847 	.word	0x08005847
 8005828:	08005857 	.word	0x08005857
 800582c:	08005857 	.word	0x08005857
 8005830:	08005857 	.word	0x08005857
 8005834:	0800584f 	.word	0x0800584f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7ff fac2 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800583e:	e010      	b.n	8005862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005840:	4b9e      	ldr	r3, [pc, #632]	; (8005abc <UART_SetConfig+0x5c0>)
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005844:	e00d      	b.n	8005862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005846:	f7ff fa4d 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800584c:	e009      	b.n	8005862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005854:	e005      	b.n	8005862 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8130 	beq.w	8005aca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	4a94      	ldr	r2, [pc, #592]	; (8005ac0 <UART_SetConfig+0x5c4>)
 8005870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005874:	461a      	mov	r2, r3
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	fbb3 f3f2 	udiv	r3, r3, r2
 800587c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	429a      	cmp	r2, r3
 800588c:	d305      	bcc.n	800589a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d903      	bls.n	80058a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058a0:	e113      	b.n	8005aca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2200      	movs	r2, #0
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	60fa      	str	r2, [r7, #12]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	4a84      	ldr	r2, [pc, #528]	; (8005ac0 <UART_SetConfig+0x5c4>)
 80058b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2200      	movs	r2, #0
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058c4:	f7fa fcb0 	bl	8000228 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	020b      	lsls	r3, r1, #8
 80058da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058de:	0202      	lsls	r2, r0, #8
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	6849      	ldr	r1, [r1, #4]
 80058e4:	0849      	lsrs	r1, r1, #1
 80058e6:	2000      	movs	r0, #0
 80058e8:	460c      	mov	r4, r1
 80058ea:	4605      	mov	r5, r0
 80058ec:	eb12 0804 	adds.w	r8, r2, r4
 80058f0:	eb43 0905 	adc.w	r9, r3, r5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	469a      	mov	sl, r3
 80058fc:	4693      	mov	fp, r2
 80058fe:	4652      	mov	r2, sl
 8005900:	465b      	mov	r3, fp
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fc8f 	bl	8000228 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4613      	mov	r3, r2
 8005910:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005918:	d308      	bcc.n	800592c <UART_SetConfig+0x430>
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005920:	d204      	bcs.n	800592c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	e0ce      	b.n	8005aca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005932:	e0ca      	b.n	8005aca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593c:	d166      	bne.n	8005a0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800593e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005942:	2b08      	cmp	r3, #8
 8005944:	d827      	bhi.n	8005996 <UART_SetConfig+0x49a>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x450>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	08005981 	.word	0x08005981
 8005958:	08005997 	.word	0x08005997
 800595c:	08005987 	.word	0x08005987
 8005960:	08005997 	.word	0x08005997
 8005964:	08005997 	.word	0x08005997
 8005968:	08005997 	.word	0x08005997
 800596c:	0800598f 	.word	0x0800598f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7ff fa26 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8005974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005976:	e014      	b.n	80059a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7ff fa38 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 800597c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800597e:	e010      	b.n	80059a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005980:	4b4e      	ldr	r3, [pc, #312]	; (8005abc <UART_SetConfig+0x5c0>)
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005984:	e00d      	b.n	80059a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005986:	f7ff f9ad 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800598c:	e009      	b.n	80059a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005994:	e005      	b.n	80059a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8090 	beq.w	8005aca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	4a44      	ldr	r2, [pc, #272]	; (8005ac0 <UART_SetConfig+0x5c4>)
 80059b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059bc:	005a      	lsls	r2, r3, #1
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	441a      	add	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d916      	bls.n	8005a04 <UART_SetConfig+0x508>
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d212      	bcs.n	8005a04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f023 030f 	bic.w	r3, r3, #15
 80059e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	8bfb      	ldrh	r3, [r7, #30]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	8bfa      	ldrh	r2, [r7, #30]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e062      	b.n	8005aca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a0a:	e05e      	b.n	8005aca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d828      	bhi.n	8005a66 <UART_SetConfig+0x56a>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0x520>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a49 	.word	0x08005a49
 8005a24:	08005a51 	.word	0x08005a51
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a67 	.word	0x08005a67
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7ff f9be 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a46:	e014      	b.n	8005a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a48:	f7ff f9d0 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a4e:	e010      	b.n	8005a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <UART_SetConfig+0x5c0>)
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7ff f945 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a70:	bf00      	nop
    }

    if (pclk != 0U)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d028      	beq.n	8005aca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <UART_SetConfig+0x5c4>)
 8005a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a82:	461a      	mov	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	441a      	add	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	d910      	bls.n	8005ac4 <UART_SetConfig+0x5c8>
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d20c      	bcs.n	8005ac4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x5ce>
 8005ab6:	bf00      	nop
 8005ab8:	40008000 	.word	0x40008000
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	08006448 	.word	0x08006448
      }
      else
      {
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ae6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3730      	adds	r7, #48	; 0x30
 8005aee:	46bd      	mov	sp, r7
 8005af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf2:	d10a      	bne.n	8005c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b098      	sub	sp, #96	; 0x60
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c48:	f7fb fb3a 	bl	80012c0 <HAL_GetTick>
 8005c4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d12f      	bne.n	8005cbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c64:	2200      	movs	r2, #0
 8005c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f88e 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d022      	beq.n	8005cbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c94:	647b      	str	r3, [r7, #68]	; 0x44
 8005c96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e063      	b.n	8005d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d149      	bne.n	8005d5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f857 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d03c      	beq.n	8005d5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
 8005d04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e6      	bne.n	8005ce4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d36:	61fa      	str	r2, [r7, #28]
 8005d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	69b9      	ldr	r1, [r7, #24]
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	617b      	str	r3, [r7, #20]
   return(result);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e012      	b.n	8005d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3758      	adds	r7, #88	; 0x58
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	e04f      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d04b      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fa8b 	bl	80012c0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e04e      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d037      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d034      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d031      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d110      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2208      	movs	r2, #8
 8005dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f838 	bl	8005e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e029      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e18:	d111      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f81e 	bl	8005e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e00f      	b.n	8005e5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d0a0      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b095      	sub	sp, #84	; 0x54
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e3      	bne.n	8005ea0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d118      	bne.n	8005f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f023 0310 	bic.w	r3, r3, #16
 8005ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e6      	bne.n	8005ee0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f26:	bf00      	nop
 8005f28:	3754      	adds	r7, #84	; 0x54
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e027      	b.n	8005f98 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0201 	bic.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e02d      	b.n	8006018 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f84f 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006034:	2302      	movs	r3, #2
 8006036:	e02d      	b.n	8006094 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	; 0x24
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f811 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060bc:	e031      	b.n	8006122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060be:	2308      	movs	r3, #8
 80060c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060c2:	2308      	movs	r3, #8
 80060c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	0e5b      	lsrs	r3, r3, #25
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	0f5b      	lsrs	r3, r3, #29
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	7b3a      	ldrb	r2, [r7, #12]
 80060ea:	4911      	ldr	r1, [pc, #68]	; (8006130 <UARTEx_SetNbDataToProcess+0x94>)
 80060ec:	5c8a      	ldrb	r2, [r1, r2]
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060f2:	7b3a      	ldrb	r2, [r7, #12]
 80060f4:	490f      	ldr	r1, [pc, #60]	; (8006134 <UARTEx_SetNbDataToProcess+0x98>)
 80060f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	7b7a      	ldrb	r2, [r7, #13]
 8006108:	4909      	ldr	r1, [pc, #36]	; (8006130 <UARTEx_SetNbDataToProcess+0x94>)
 800610a:	5c8a      	ldrb	r2, [r1, r2]
 800610c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006110:	7b7a      	ldrb	r2, [r7, #13]
 8006112:	4908      	ldr	r1, [pc, #32]	; (8006134 <UARTEx_SetNbDataToProcess+0x98>)
 8006114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006116:	fb93 f3f2 	sdiv	r3, r3, r2
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	08006460 	.word	0x08006460
 8006134:	08006468 	.word	0x08006468

08006138 <_ZdlPvj>:
 8006138:	f000 b800 	b.w	800613c <_ZdlPv>

0800613c <_ZdlPv>:
 800613c:	f000 b808 	b.w	8006150 <free>

08006140 <malloc>:
 8006140:	4b02      	ldr	r3, [pc, #8]	; (800614c <malloc+0xc>)
 8006142:	4601      	mov	r1, r0
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f000 b82b 	b.w	80061a0 <_malloc_r>
 800614a:	bf00      	nop
 800614c:	2000008c 	.word	0x2000008c

08006150 <free>:
 8006150:	4b02      	ldr	r3, [pc, #8]	; (800615c <free+0xc>)
 8006152:	4601      	mov	r1, r0
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	f000 b8f3 	b.w	8006340 <_free_r>
 800615a:	bf00      	nop
 800615c:	2000008c 	.word	0x2000008c

08006160 <sbrk_aligned>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	4e0e      	ldr	r6, [pc, #56]	; (800619c <sbrk_aligned+0x3c>)
 8006164:	460c      	mov	r4, r1
 8006166:	6831      	ldr	r1, [r6, #0]
 8006168:	4605      	mov	r5, r0
 800616a:	b911      	cbnz	r1, 8006172 <sbrk_aligned+0x12>
 800616c:	f000 f8ac 	bl	80062c8 <_sbrk_r>
 8006170:	6030      	str	r0, [r6, #0]
 8006172:	4621      	mov	r1, r4
 8006174:	4628      	mov	r0, r5
 8006176:	f000 f8a7 	bl	80062c8 <_sbrk_r>
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	d00a      	beq.n	8006194 <sbrk_aligned+0x34>
 800617e:	1cc4      	adds	r4, r0, #3
 8006180:	f024 0403 	bic.w	r4, r4, #3
 8006184:	42a0      	cmp	r0, r4
 8006186:	d007      	beq.n	8006198 <sbrk_aligned+0x38>
 8006188:	1a21      	subs	r1, r4, r0
 800618a:	4628      	mov	r0, r5
 800618c:	f000 f89c 	bl	80062c8 <_sbrk_r>
 8006190:	3001      	adds	r0, #1
 8006192:	d101      	bne.n	8006198 <sbrk_aligned+0x38>
 8006194:	f04f 34ff 	mov.w	r4, #4294967295
 8006198:	4620      	mov	r0, r4
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	2000024c 	.word	0x2000024c

080061a0 <_malloc_r>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	1ccd      	adds	r5, r1, #3
 80061a6:	f025 0503 	bic.w	r5, r5, #3
 80061aa:	3508      	adds	r5, #8
 80061ac:	2d0c      	cmp	r5, #12
 80061ae:	bf38      	it	cc
 80061b0:	250c      	movcc	r5, #12
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	4607      	mov	r7, r0
 80061b6:	db01      	blt.n	80061bc <_malloc_r+0x1c>
 80061b8:	42a9      	cmp	r1, r5
 80061ba:	d905      	bls.n	80061c8 <_malloc_r+0x28>
 80061bc:	230c      	movs	r3, #12
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	2600      	movs	r6, #0
 80061c2:	4630      	mov	r0, r6
 80061c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800629c <_malloc_r+0xfc>
 80061cc:	f000 f868 	bl	80062a0 <__malloc_lock>
 80061d0:	f8d8 3000 	ldr.w	r3, [r8]
 80061d4:	461c      	mov	r4, r3
 80061d6:	bb5c      	cbnz	r4, 8006230 <_malloc_r+0x90>
 80061d8:	4629      	mov	r1, r5
 80061da:	4638      	mov	r0, r7
 80061dc:	f7ff ffc0 	bl	8006160 <sbrk_aligned>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	4604      	mov	r4, r0
 80061e4:	d155      	bne.n	8006292 <_malloc_r+0xf2>
 80061e6:	f8d8 4000 	ldr.w	r4, [r8]
 80061ea:	4626      	mov	r6, r4
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	d145      	bne.n	800627c <_malloc_r+0xdc>
 80061f0:	2c00      	cmp	r4, #0
 80061f2:	d048      	beq.n	8006286 <_malloc_r+0xe6>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	4631      	mov	r1, r6
 80061f8:	4638      	mov	r0, r7
 80061fa:	eb04 0903 	add.w	r9, r4, r3
 80061fe:	f000 f863 	bl	80062c8 <_sbrk_r>
 8006202:	4581      	cmp	r9, r0
 8006204:	d13f      	bne.n	8006286 <_malloc_r+0xe6>
 8006206:	6821      	ldr	r1, [r4, #0]
 8006208:	1a6d      	subs	r5, r5, r1
 800620a:	4629      	mov	r1, r5
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ffa7 	bl	8006160 <sbrk_aligned>
 8006212:	3001      	adds	r0, #1
 8006214:	d037      	beq.n	8006286 <_malloc_r+0xe6>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	442b      	add	r3, r5
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	f8d8 3000 	ldr.w	r3, [r8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d038      	beq.n	8006296 <_malloc_r+0xf6>
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	42a2      	cmp	r2, r4
 8006228:	d12b      	bne.n	8006282 <_malloc_r+0xe2>
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	e00f      	b.n	8006250 <_malloc_r+0xb0>
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	1b52      	subs	r2, r2, r5
 8006234:	d41f      	bmi.n	8006276 <_malloc_r+0xd6>
 8006236:	2a0b      	cmp	r2, #11
 8006238:	d917      	bls.n	800626a <_malloc_r+0xca>
 800623a:	1961      	adds	r1, r4, r5
 800623c:	42a3      	cmp	r3, r4
 800623e:	6025      	str	r5, [r4, #0]
 8006240:	bf18      	it	ne
 8006242:	6059      	strne	r1, [r3, #4]
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	bf08      	it	eq
 8006248:	f8c8 1000 	streq.w	r1, [r8]
 800624c:	5162      	str	r2, [r4, r5]
 800624e:	604b      	str	r3, [r1, #4]
 8006250:	4638      	mov	r0, r7
 8006252:	f104 060b 	add.w	r6, r4, #11
 8006256:	f000 f829 	bl	80062ac <__malloc_unlock>
 800625a:	f026 0607 	bic.w	r6, r6, #7
 800625e:	1d23      	adds	r3, r4, #4
 8006260:	1af2      	subs	r2, r6, r3
 8006262:	d0ae      	beq.n	80061c2 <_malloc_r+0x22>
 8006264:	1b9b      	subs	r3, r3, r6
 8006266:	50a3      	str	r3, [r4, r2]
 8006268:	e7ab      	b.n	80061c2 <_malloc_r+0x22>
 800626a:	42a3      	cmp	r3, r4
 800626c:	6862      	ldr	r2, [r4, #4]
 800626e:	d1dd      	bne.n	800622c <_malloc_r+0x8c>
 8006270:	f8c8 2000 	str.w	r2, [r8]
 8006274:	e7ec      	b.n	8006250 <_malloc_r+0xb0>
 8006276:	4623      	mov	r3, r4
 8006278:	6864      	ldr	r4, [r4, #4]
 800627a:	e7ac      	b.n	80061d6 <_malloc_r+0x36>
 800627c:	4634      	mov	r4, r6
 800627e:	6876      	ldr	r6, [r6, #4]
 8006280:	e7b4      	b.n	80061ec <_malloc_r+0x4c>
 8006282:	4613      	mov	r3, r2
 8006284:	e7cc      	b.n	8006220 <_malloc_r+0x80>
 8006286:	230c      	movs	r3, #12
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4638      	mov	r0, r7
 800628c:	f000 f80e 	bl	80062ac <__malloc_unlock>
 8006290:	e797      	b.n	80061c2 <_malloc_r+0x22>
 8006292:	6025      	str	r5, [r4, #0]
 8006294:	e7dc      	b.n	8006250 <_malloc_r+0xb0>
 8006296:	605b      	str	r3, [r3, #4]
 8006298:	deff      	udf	#255	; 0xff
 800629a:	bf00      	nop
 800629c:	20000248 	.word	0x20000248

080062a0 <__malloc_lock>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__malloc_lock+0x8>)
 80062a2:	f000 b84b 	b.w	800633c <__retarget_lock_acquire_recursive>
 80062a6:	bf00      	nop
 80062a8:	2000038c 	.word	0x2000038c

080062ac <__malloc_unlock>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__malloc_unlock+0x8>)
 80062ae:	f000 b846 	b.w	800633e <__retarget_lock_release_recursive>
 80062b2:	bf00      	nop
 80062b4:	2000038c 	.word	0x2000038c

080062b8 <memset>:
 80062b8:	4402      	add	r2, r0
 80062ba:	4603      	mov	r3, r0
 80062bc:	4293      	cmp	r3, r2
 80062be:	d100      	bne.n	80062c2 <memset+0xa>
 80062c0:	4770      	bx	lr
 80062c2:	f803 1b01 	strb.w	r1, [r3], #1
 80062c6:	e7f9      	b.n	80062bc <memset+0x4>

080062c8 <_sbrk_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d06      	ldr	r5, [pc, #24]	; (80062e4 <_sbrk_r+0x1c>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	f7fa ff1e 	bl	8001114 <_sbrk>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_sbrk_r+0x1a>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_sbrk_r+0x1a>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000388 	.word	0x20000388

080062e8 <__errno>:
 80062e8:	4b01      	ldr	r3, [pc, #4]	; (80062f0 <__errno+0x8>)
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	2000008c 	.word	0x2000008c

080062f4 <__libc_init_array>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4d0d      	ldr	r5, [pc, #52]	; (800632c <__libc_init_array+0x38>)
 80062f8:	4c0d      	ldr	r4, [pc, #52]	; (8006330 <__libc_init_array+0x3c>)
 80062fa:	1b64      	subs	r4, r4, r5
 80062fc:	10a4      	asrs	r4, r4, #2
 80062fe:	2600      	movs	r6, #0
 8006300:	42a6      	cmp	r6, r4
 8006302:	d109      	bne.n	8006318 <__libc_init_array+0x24>
 8006304:	4d0b      	ldr	r5, [pc, #44]	; (8006334 <__libc_init_array+0x40>)
 8006306:	4c0c      	ldr	r4, [pc, #48]	; (8006338 <__libc_init_array+0x44>)
 8006308:	f000 f866 	bl	80063d8 <_init>
 800630c:	1b64      	subs	r4, r4, r5
 800630e:	10a4      	asrs	r4, r4, #2
 8006310:	2600      	movs	r6, #0
 8006312:	42a6      	cmp	r6, r4
 8006314:	d105      	bne.n	8006322 <__libc_init_array+0x2e>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	f855 3b04 	ldr.w	r3, [r5], #4
 800631c:	4798      	blx	r3
 800631e:	3601      	adds	r6, #1
 8006320:	e7ee      	b.n	8006300 <__libc_init_array+0xc>
 8006322:	f855 3b04 	ldr.w	r3, [r5], #4
 8006326:	4798      	blx	r3
 8006328:	3601      	adds	r6, #1
 800632a:	e7f2      	b.n	8006312 <__libc_init_array+0x1e>
 800632c:	08006478 	.word	0x08006478
 8006330:	08006478 	.word	0x08006478
 8006334:	08006478 	.word	0x08006478
 8006338:	08006480 	.word	0x08006480

0800633c <__retarget_lock_acquire_recursive>:
 800633c:	4770      	bx	lr

0800633e <__retarget_lock_release_recursive>:
 800633e:	4770      	bx	lr

08006340 <_free_r>:
 8006340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006342:	2900      	cmp	r1, #0
 8006344:	d044      	beq.n	80063d0 <_free_r+0x90>
 8006346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634a:	9001      	str	r0, [sp, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f1a1 0404 	sub.w	r4, r1, #4
 8006352:	bfb8      	it	lt
 8006354:	18e4      	addlt	r4, r4, r3
 8006356:	f7ff ffa3 	bl	80062a0 <__malloc_lock>
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <_free_r+0x94>)
 800635c:	9801      	ldr	r0, [sp, #4]
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	b933      	cbnz	r3, 8006370 <_free_r+0x30>
 8006362:	6063      	str	r3, [r4, #4]
 8006364:	6014      	str	r4, [r2, #0]
 8006366:	b003      	add	sp, #12
 8006368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800636c:	f7ff bf9e 	b.w	80062ac <__malloc_unlock>
 8006370:	42a3      	cmp	r3, r4
 8006372:	d908      	bls.n	8006386 <_free_r+0x46>
 8006374:	6825      	ldr	r5, [r4, #0]
 8006376:	1961      	adds	r1, r4, r5
 8006378:	428b      	cmp	r3, r1
 800637a:	bf01      	itttt	eq
 800637c:	6819      	ldreq	r1, [r3, #0]
 800637e:	685b      	ldreq	r3, [r3, #4]
 8006380:	1949      	addeq	r1, r1, r5
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	e7ed      	b.n	8006362 <_free_r+0x22>
 8006386:	461a      	mov	r2, r3
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	b10b      	cbz	r3, 8006390 <_free_r+0x50>
 800638c:	42a3      	cmp	r3, r4
 800638e:	d9fa      	bls.n	8006386 <_free_r+0x46>
 8006390:	6811      	ldr	r1, [r2, #0]
 8006392:	1855      	adds	r5, r2, r1
 8006394:	42a5      	cmp	r5, r4
 8006396:	d10b      	bne.n	80063b0 <_free_r+0x70>
 8006398:	6824      	ldr	r4, [r4, #0]
 800639a:	4421      	add	r1, r4
 800639c:	1854      	adds	r4, r2, r1
 800639e:	42a3      	cmp	r3, r4
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	d1e0      	bne.n	8006366 <_free_r+0x26>
 80063a4:	681c      	ldr	r4, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	6053      	str	r3, [r2, #4]
 80063aa:	440c      	add	r4, r1
 80063ac:	6014      	str	r4, [r2, #0]
 80063ae:	e7da      	b.n	8006366 <_free_r+0x26>
 80063b0:	d902      	bls.n	80063b8 <_free_r+0x78>
 80063b2:	230c      	movs	r3, #12
 80063b4:	6003      	str	r3, [r0, #0]
 80063b6:	e7d6      	b.n	8006366 <_free_r+0x26>
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	1961      	adds	r1, r4, r5
 80063bc:	428b      	cmp	r3, r1
 80063be:	bf04      	itt	eq
 80063c0:	6819      	ldreq	r1, [r3, #0]
 80063c2:	685b      	ldreq	r3, [r3, #4]
 80063c4:	6063      	str	r3, [r4, #4]
 80063c6:	bf04      	itt	eq
 80063c8:	1949      	addeq	r1, r1, r5
 80063ca:	6021      	streq	r1, [r4, #0]
 80063cc:	6054      	str	r4, [r2, #4]
 80063ce:	e7ca      	b.n	8006366 <_free_r+0x26>
 80063d0:	b003      	add	sp, #12
 80063d2:	bd30      	pop	{r4, r5, pc}
 80063d4:	20000248 	.word	0x20000248

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
