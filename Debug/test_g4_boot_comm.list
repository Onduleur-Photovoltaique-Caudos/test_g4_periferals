
test_g4_boot_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000090  080058a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080058a0  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b55  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efd  00000000  00000000  00035c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00038b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e43  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a39a  00000000  00000000  0003abfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001767d  00000000  00000000  00064f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001067fe  00000000  00000000  0007c612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005170  00000000  00000000  00182e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00187f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800575c 	.word	0x0800575c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800575c 	.word	0x0800575c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_ZN7IntegerC1Ev>:
#include <string.h>

static char hexDigits[] = "0123456789abcdef";


Integer::Integer() {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <_ZN7IntegerC1Ev+0x1c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	080057b0 	.word	0x080057b0

08000544 <_ZN7IntegerD1Ev>:

Integer::~Integer() {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <_ZN7IntegerD1Ev+0x1c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	080057b0 	.word	0x080057b0

08000564 <_ZN7IntegerD0Ev>:
Integer::~Integer() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
}
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ffe9 	bl	8000544 <_ZN7IntegerD1Ev>
 8000572:	2104      	movs	r1, #4
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f004 ffa1 	bl	80054bc <_ZdlPvj>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZN7Integer5toAXnEjPcib>:

bool Integer::toAXn(unsigned int n, char * retBuf, int retLen, bool prefix){
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	70fb      	strb	r3, [r7, #3]
	char * startError = retBuf;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
	int remainingForHex = retLen;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	623b      	str	r3, [r7, #32]
	if (prefix) {
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00e      	beq.n	80005be <_ZN7Integer5toAXnEjPcib+0x3a>
		if (retLen <= 3) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	dd3c      	ble.n	8000620 <_ZN7Integer5toAXnEjPcib+0x9c>
			goto error_exit;
		} else {
			strcpy (retBuf, "0x");
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <_ZN7Integer5toAXnEjPcib+0xe0>)
 80005aa:	8811      	ldrh	r1, [r2, #0]
 80005ac:	7892      	ldrb	r2, [r2, #2]
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	709a      	strb	r2, [r3, #2]
			retBuf += 2;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	3302      	adds	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
			retLen -= 2;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b02      	subs	r3, #2
 80005bc:	607b      	str	r3, [r7, #4]
		}
	}
	startError = retBuf;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
	remainingForHex = retLen;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	623b      	str	r3, [r7, #32]
	unsigned char b;
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 80005c6:	2307      	movs	r3, #7
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	e01c      	b.n	8000606 <_ZN7Integer5toAXnEjPcib+0x82>
		b = (n & (0xF << (i*4))) >> (i*4);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	401a      	ands	r2, r3
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fa22 f303 	lsr.w	r3, r2, r3
 80005e4:	75fb      	strb	r3, [r7, #23]
		if (retLen == 0){ // no space for digit
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01b      	beq.n	8000624 <_ZN7Integer5toAXnEjPcib+0xa0>
			goto error_exit;
		}
		(*retBuf++) = hexDigits[b];
 80005ec:	7dfa      	ldrb	r2, [r7, #23]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1c59      	adds	r1, r3, #1
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	491c      	ldr	r1, [pc, #112]	; (8000668 <_ZN7Integer5toAXnEjPcib+0xe4>)
 80005f6:	5c8a      	ldrb	r2, [r1, r2]
 80005f8:	701a      	strb	r2, [r3, #0]
		retLen--;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b01      	subs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dadf      	bge.n	80005cc <_ZN7Integer5toAXnEjPcib+0x48>
	}
	if (retLen == 0){ // no space final 0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <_ZN7Integer5toAXnEjPcib+0xa4>
		goto error_exit;
	}
	(*retBuf++) = '\0';
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	60ba      	str	r2, [r7, #8]
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	return true;
 800061c:	2301      	movs	r3, #1
 800061e:	e01a      	b.n	8000656 <_ZN7Integer5toAXnEjPcib+0xd2>
			goto error_exit;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
			goto error_exit;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
		goto error_exit;
 8000628:	bf00      	nop

	error_exit:
	for (int i = 0; i < remainingForHex-1; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	e007      	b.n	8000640 <_ZN7Integer5toAXnEjPcib+0xbc>
		(*startError++) = '#';
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	627a      	str	r2, [r7, #36]	; 0x24
 8000636:	2223      	movs	r2, #35	; 0x23
 8000638:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < remainingForHex-1; i++) {
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	3301      	adds	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	3b01      	subs	r3, #1
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf2      	blt.n	8000630 <_ZN7Integer5toAXnEjPcib+0xac>
	}
	(*startError++) = '\0';
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	627a      	str	r2, [r7, #36]	; 0x24
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	return false;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	08005774 	.word	0x08005774
 8000668:	20000000 	.word	0x20000000

0800066c <_Z12delay_us_DWTm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us_DWT(unsigned long  uSec)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles = (SystemCoreClock / 1000000L)*uSec;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <_Z12delay_us_DWTm+0x48>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <_Z12delay_us_DWTm+0x4c>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	0c9b      	lsrs	r3, r3, #18
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	60fb      	str	r3, [r7, #12]
	volatile uint32_t start = DWT->CYCCNT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <_Z12delay_us_DWTm+0x50>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	60bb      	str	r3, [r7, #8]
	do {
	} while (DWT->CYCCNT - start < cycles);
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <_Z12delay_us_DWTm+0x50>)
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	bf34      	ite	cc
 800069c:	2301      	movcc	r3, #1
 800069e:	2300      	movcs	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f3      	bne.n	800068e <_Z12delay_us_DWTm+0x22>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000014 	.word	0x20000014
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <_Z9doPinFastP12GPIO_TypeDeft>:
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
	HAL_Delay(1000);
}
void doPinFast(GPIO_TypeDef* port, uint16_t pin){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f002 fe8c 	bl	80033f0 <HAL_GPIO_WritePin>
	delay_us_DWT(10);
 80006d8:	200a      	movs	r0, #10
 80006da:	f7ff ffc7 	bl	800066c <_Z12delay_us_DWTm>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f002 fe83 	bl	80033f0 <HAL_GPIO_WritePin>
	delay_us_DWT(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ffbe 	bl	800066c <_Z12delay_us_DWTm>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a0      	sub	sp, #128	; 0x80
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006fe:	4b5a      	ldr	r3, [pc, #360]	; (8000868 <main+0x170>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4a59      	ldr	r2, [pc, #356]	; (8000868 <main+0x170>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000708:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800070a:	4b58      	ldr	r3, [pc, #352]	; (800086c <main+0x174>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  // Enable cycle counter
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000710:	4b56      	ldr	r3, [pc, #344]	; (800086c <main+0x174>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a55      	ldr	r2, [pc, #340]	; (800086c <main+0x174>)
 8000716:	f023 0301 	bic.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800071c:	4b53      	ldr	r3, [pc, #332]	; (800086c <main+0x174>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a52      	ldr	r2, [pc, #328]	; (800086c <main+0x174>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fcab 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f8ac 	bl	8000888 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 fa32 	bl	8000b98 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000734:	f000 f97a 	bl	8000a2c <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8000738:	f000 f9ce 	bl	8000ad8 <_ZL19MX_USART2_UART_Initv>
  MX_ADC3_Init();
 800073c:	f000 f8ee 	bl	800091c <_ZL12MX_ADC3_Initv>
  MX_OPAMP3_Init();
 8000740:	f000 f9c2 	bl	8000ac8 <_ZL14MX_OPAMP3_Initv>
  /* USER CODE BEGIN 2 */

#if 1
  FLASH_OBProgramInitTypeDef obInit = {0};
 8000744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000748:	2234      	movs	r2, #52	; 0x34
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f004 ff75 	bl	800563c <memset>
  HAL_StatusTypeDef status;
  obInit.OptionType = OPTIONBYTE_USER;
 8000752:	2304      	movs	r3, #4
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  obInit.USERType = OB_USER_nSWBOOT0;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  obInit.USERConfig = 0;// FLASH_OPTR_nSWBOOT0;
 800075c:	2300      	movs	r3, #0
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  //HAL_FLASH_OB_Unlock();
  status = HAL_FLASHEx_OBProgram(&obInit);
 8000760:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000764:	4618      	mov	r0, r3
 8000766:	f001 ff63 	bl	8002630 <HAL_FLASHEx_OBProgram>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t status2 = HAL_FLASH_GetError();
 8000770:	f001 fefe 	bl	8002570 <HAL_FLASH_GetError>
 8000774:	67b8      	str	r0, [r7, #120]	; 0x78
  //FLASH_OB_UserConfig(OB_USER_nSWBOOT0, FLASH_OPTR_nSWBOOT0);
  //FLASH_OB_UserConfig(OB_USER_nBOOT0, FLASH_OPTR_nBOOT0);
#endif

  FLASH_OBProgramInitTypeDef obInitRead = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 ff5c 	bl	800563c <memset>
  HAL_FLASHEx_OBGetConfig(&obInitRead);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f001 ffe1 	bl	8002750 <HAL_FLASHEx_OBGetConfig>



  int statusTransmit;
  char str[] = "start\n\r";
 800078e:	4a38      	ldr	r2, [pc, #224]	; (8000870 <main+0x178>)
 8000790:	463b      	mov	r3, r7
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	e883 0003 	stmia.w	r3, {r0, r1}
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),1000);
 800079a:	463b      	mov	r3, r7
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd3b 	bl	8000218 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4639      	mov	r1, r7
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	4831      	ldr	r0, [pc, #196]	; (8000874 <main+0x17c>)
 80007ae:	f003 ffd9 	bl	8004764 <HAL_UART_Transmit>
 80007b2:	4603      	mov	r3, r0
 80007b4:	677b      	str	r3, [r7, #116]	; 0x74

#define intro_message "flash BYTES value:"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)intro_message, strlen(intro_message),1000);
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	2212      	movs	r2, #18
 80007bc:	492e      	ldr	r1, [pc, #184]	; (8000878 <main+0x180>)
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <main+0x17c>)
 80007c0:	f003 ffd0 	bl	8004764 <HAL_UART_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	677b      	str	r3, [r7, #116]	; 0x74

  char * buffer;
  buffer = (char*)malloc(11);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f004 fe7b 	bl	80054c4 <malloc>
 80007ce:	4603      	mov	r3, r0
 80007d0:	673b      	str	r3, [r7, #112]	; 0x70
  Int.toAXn(obInitRead.USERConfig, buffer, 11, true);
 80007d2:	6a38      	ldr	r0, [r7, #32]
 80007d4:	2301      	movs	r3, #1
 80007d6:	220b      	movs	r2, #11
 80007d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80007da:	f7ff fed3 	bl	8000584 <_ZN7Integer5toAXnEjPcib>
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),1000);
 80007de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80007e0:	f7ff fd1a 	bl	8000218 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <main+0x17c>)
 80007f0:	f003 ffb8 	bl	8004764 <HAL_UART_Transmit>
 80007f4:	4603      	mov	r3, r0
 80007f6:	677b      	str	r3, [r7, #116]	; 0x74

#define eol_message "\n\r"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)eol_message, strlen(eol_message),1000);
 80007f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fc:	2202      	movs	r2, #2
 80007fe:	491f      	ldr	r1, [pc, #124]	; (800087c <main+0x184>)
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x17c>)
 8000802:	f003 ffaf 	bl	8004764 <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	677b      	str	r3, [r7, #116]	; 0x74

#define start_message "start value:"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)start_message, strlen(start_message),1000);
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	220c      	movs	r2, #12
 8000810:	491b      	ldr	r1, [pc, #108]	; (8000880 <main+0x188>)
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <main+0x17c>)
 8000814:	f003 ffa6 	bl	8004764 <HAL_UART_Transmit>
 8000818:	4603      	mov	r3, r0
 800081a:	677b      	str	r3, [r7, #116]	; 0x74

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_SET); // start at pin 2
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <main+0x18c>)
 8000824:	f002 fde4 	bl	80033f0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f000 fc9b 	bl	8001164 <HAL_Delay>
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_RESET); // start at pin 2
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <main+0x18c>)
 8000836:	f002 fddb 	bl	80033f0 <HAL_GPIO_WritePin>
		doPinFast(T_PC0_GPIO_Port, T_PC0_Pin);
 800083a:	2101      	movs	r1, #1
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0x18c>)
 800083e:	f7ff ff3f 	bl	80006c0 <_Z9doPinFastP12GPIO_TypeDeft>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // start at pin 2
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fdd1 	bl	80033f0 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800084e:	20c8      	movs	r0, #200	; 0xc8
 8000850:	f000 fc88 	bl	8001164 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // start at pin 2
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f002 fdc8 	bl	80033f0 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000860:	20c8      	movs	r0, #200	; 0xc8
 8000862:	f000 fc7f 	bl	8001164 <HAL_Delay>
		HAL_GPIO_WritePin(T_PC13_GPIO_Port, T_PC13_Pin, GPIO_PIN_SET); // start at pin 2
 8000866:	e7d9      	b.n	800081c <main+0x124>
 8000868:	e000edf0 	.word	0xe000edf0
 800086c:	e0001000 	.word	0xe0001000
 8000870:	080057a0 	.word	0x080057a0
 8000874:	20000170 	.word	0x20000170
 8000878:	08005778 	.word	0x08005778
 800087c:	0800578c 	.word	0x0800578c
 8000880:	08005790 	.word	0x08005790
 8000884:	48000800 	.word	0x48000800

08000888 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2238      	movs	r2, #56	; 0x38
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fed0 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ae:	f002 fee9 	bl	8003684 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 ff7f 	bl	80037cc <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80008de:	f000 f9d7 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fa78 	bl	8003df0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000910:	f000 f9be 	bl	8000c90 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fe81 	bl	800563c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800093c:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <_ZL12MX_ADC3_Initv+0x108>)
 800093e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000946:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000962:	2204      	movs	r2, #4
 8000964:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000968:	2200      	movs	r2, #0
 800096a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800096e:	2200      	movs	r2, #0
 8000970:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000974:	2201      	movs	r2, #1
 8000976:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a2:	481f      	ldr	r0, [pc, #124]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 80009a4:	f000 fdd6 	bl	8001554 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <_ZL12MX_ADC3_Initv+0xa0>
  {
    Error_Handler();
 80009b8:	f000 f96a 	bl	8000c90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4816      	ldr	r0, [pc, #88]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 80009c8:	f001 fbe6 	bl	8002198 <HAL_ADCEx_MultiModeConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf14      	ite	ne
 80009d2:	2301      	movne	r3, #1
 80009d4:	2300      	moveq	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <_ZL12MX_ADC3_Initv+0xc4>
  {
    Error_Handler();
 80009dc:	f000 f958 	bl	8000c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_ZL12MX_ADC3_Initv+0x10c>)
 80009e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e4:	2306      	movs	r3, #6
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ec:	237f      	movs	r3, #127	; 0x7f
 80009ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f0:	2304      	movs	r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <_ZL12MX_ADC3_Initv+0x104>)
 80009fe:	f000 ff65 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <_ZL12MX_ADC3_Initv+0xfa>
  {
    Error_Handler();
 8000a12:	f000 f93d 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	50000400 	.word	0x50000400
 8000a28:	b6982000 	.word	0xb6982000

08000a2c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <_ZL12MX_I2C1_Initv+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a38:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <_ZL12MX_I2C1_Initv+0x98>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a68:	f002 fcda 	bl	8003420 <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000a7c:	f000 f908 	bl	8000c90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000a84:	f002 fd67 	bl	8003556 <HAL_I2CEx_ConfigAnalogFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000a98:	f000 f8fa 	bl	8000c90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <_ZL12MX_I2C1_Initv+0x90>)
 8000aa0:	f002 fda4 	bl	80035ec <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f8ec 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000011c 	.word	0x2000011c
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	00303d5b 	.word	0x00303d5b

08000ac8 <_ZL14MX_OPAMP3_Initv>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 1 */
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ade:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b20:	481b      	ldr	r0, [pc, #108]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b22:	f003 fdcf 	bl	80046c4 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000b36:	f000 f8ab 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b3e:	f004 fbf3 	bl	8005328 <HAL_UARTEx_SetTxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000b52:	f000 f89d 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b5a:	f004 fc23 	bl	80053a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000b6e:	f000 f88f 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b74:	f004 fb9f 	bl	80052b6 <HAL_UARTEx_DisableFifoMode>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000b88:	f000 f882 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000170 	.word	0x20000170
 8000b94:	40004400 	.word	0x40004400

08000b98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <_ZL12MX_GPIO_Initv+0xec>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, T_PC13_Pin|T_PC0_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f242 0101 	movw	r1, #8193	; 0x2001
 8000bfc:	4822      	ldr	r0, [pc, #136]	; (8000c88 <_ZL12MX_GPIO_Initv+0xf0>)
 8000bfe:	f002 fbf7 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f002 fbf1 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_PC13_Pin T_PC0_Pin */
  GPIO_InitStruct.Pin = T_PC13_Pin|T_PC0_Pin;
 8000c0e:	f242 0301 	movw	r3, #8193	; 0x2001
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <_ZL12MX_GPIO_Initv+0xf0>)
 8000c28:	f002 fa60 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f002 fa53 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c46:	2320      	movs	r3, #32
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f002 fa44 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c64:	2304      	movs	r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <_ZL12MX_GPIO_Initv+0xf4>)
 8000c78:	f002 fa38 	bl	80030ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d107      	bne.n	8000cbc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d102      	bne.n	8000cbc <_Z41__static_initialization_and_destruction_0ii+0x20>
static Integer Int;
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000cb8:	f7ff fc34 	bl	8000524 <_ZN7IntegerC1Ev>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d107      	bne.n	8000cd2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000cce:	f7ff fc39 	bl	8000544 <_ZN7IntegerD1Ev>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000ac 	.word	0x200000ac

08000ce0 <_GLOBAL__sub_I_hadc3>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ffd7 	bl	8000c9c <_Z41__static_initialization_and_destruction_0ii>
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_GLOBAL__sub_D_hadc3>:
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ffcf 	bl	8000c9c <_Z41__static_initialization_and_destruction_0ii>
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b098      	sub	sp, #96	; 0x60
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2254      	movs	r2, #84	; 0x54
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fc6f 	bl	800563c <memset>
  if(hadc->Instance==ADC3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_ADC_MspInit+0x60>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d11b      	bne.n	8000da0 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fa55 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000d84:	f7ff ff84 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_ADC_MspInit+0x64>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_ADC_MspInit+0x64>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_ADC_MspInit+0x64>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3760      	adds	r7, #96	; 0x60
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	50000400 	.word	0x50000400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0a0      	sub	sp, #128	; 0x80
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	2254      	movs	r2, #84	; 0x54
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fc33 	bl	800563c <memset>
  if(hi2c->Instance==I2C1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <HAL_I2C_MspInit+0xe0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d153      	bne.n	8000e88 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fa1b 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000df8:	f7ff ff4a 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f002 f94e 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	2312      	movs	r3, #18
 8000e56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e60:	2304      	movs	r3, #4
 8000e62:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_I2C_MspInit+0xe8>)
 8000e6c:	f002 f93e 	bl	80030ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_I2C_MspInit+0xe4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3780      	adds	r7, #128	; 0x80
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09e      	sub	sp, #120	; 0x78
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2254      	movs	r2, #84	; 0x54
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fbbd 	bl	800563c <memset>
  if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0xa8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d136      	bne.n	8000f3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 f9a5 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff fed4 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_UART_MspInit+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 f8d9 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3778      	adds	r7, #120	; 0x78
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40004400 	.word	0x40004400
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f8c6 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f004 fb4c 	bl	800566c <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000204 	.word	0x20000204
 8001008:	20000358 	.word	0x20000358

0800100c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f004 fb0b 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fb49 	bl	80006f8 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001074:	08005810 	.word	0x08005810
  ldr r2, =_sbss
 8001078:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800107c:	20000354 	.word	0x20000354

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f001 fa3d 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fe2c 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]

}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_InitTick+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d022      	beq.n	800110e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_InitTick+0x6c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_InitTick+0x68>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fa3a 	bl	8002556 <HAL_SYSTICK_Config>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10f      	bne.n	8001108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d809      	bhi.n	8001102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	2200      	movs	r2, #0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	f001 fa14 	bl	8002522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_InitTick+0x70>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e007      	b.n	8001112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e004      	b.n	8001112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000001c 	.word	0x2000001c
 8001120:	20000014 	.word	0x20000014
 8001124:	20000018 	.word	0x20000018

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x1c>)
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000208 	.word	0x20000208
 8001148:	2000001c 	.word	0x2000001c

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000208 	.word	0x20000208

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d004      	beq.n	8001188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_Delay+0x40>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001188:	bf00      	nop
 800118a:	f7ff ffdf 	bl	800114c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8f7      	bhi.n	800118a <HAL_Delay+0x26>
  {
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000001c 	.word	0x2000001c

080011a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3360      	adds	r3, #96	; 0x60
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LL_ADC_SetOffset+0x44>)
 8001232:	4013      	ands	r3, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	4313      	orrs	r3, r2
 8001240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	03fff000 	.word	0x03fff000

08001258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3360      	adds	r3, #96	; 0x60
 8001266:	461a      	mov	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3360      	adds	r3, #96	; 0x60
 8001294:	461a      	mov	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3360      	adds	r3, #96	; 0x60
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3360      	adds	r3, #96	; 0x60
 8001300:	461a      	mov	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	615a      	str	r2, [r3, #20]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3330      	adds	r3, #48	; 0x30
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	4413      	add	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	211f      	movs	r1, #31
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0e9b      	lsrs	r3, r3, #26
 8001384:	f003 011f 	and.w	r1, r3, #31
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	431a      	orrs	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001398:	bf00      	nop
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3314      	adds	r3, #20
 80013b4:	461a      	mov	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	0e5b      	lsrs	r3, r3, #25
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	0d1b      	lsrs	r3, r3, #20
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2107      	movs	r1, #7
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0d1b      	lsrs	r3, r3, #20
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0318 	and.w	r3, r3, #24
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001420:	40d9      	lsrs	r1, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	400b      	ands	r3, r1
 8001426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142a:	431a      	orrs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	0007ffff 	.word	0x0007ffff

08001444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6093      	str	r3, [r2, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <LL_ADC_IsEnabled+0x18>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <LL_ADC_IsEnabled+0x1a>
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b04      	cmp	r3, #4
 8001518:	d101      	bne.n	800151e <LL_ADC_REG_IsConversionOngoing+0x18>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b08      	cmp	r3, #8
 800153e:	d101      	bne.n	8001544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1a9      	b.n	80018c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fbe3 	bl	8000d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff67 	bl	8001468 <LL_ADC_IsDeepPowerDownEnabled>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff4d 	bl	8001444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff82 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d115      	bne.n	80015e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff66 	bl	8001490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c4:	4b9c      	ldr	r3, [pc, #624]	; (8001838 <HAL_ADC_Init+0x2e4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	4a9c      	ldr	r2, [pc, #624]	; (800183c <HAL_ADC_Init+0x2e8>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff64 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff75 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 800161c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8142 	bne.w	80018b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 813e 	bne.w	80018b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff49 	bl	80014e0 <LL_ADC_IsEnabled>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d141      	bne.n	80016d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165c:	d004      	beq.n	8001668 <HAL_ADC_Init+0x114>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a77      	ldr	r2, [pc, #476]	; (8001840 <HAL_ADC_Init+0x2ec>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d10f      	bne.n	8001688 <HAL_ADC_Init+0x134>
 8001668:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800166c:	f7ff ff38 	bl	80014e0 <LL_ADC_IsEnabled>
 8001670:	4604      	mov	r4, r0
 8001672:	4873      	ldr	r0, [pc, #460]	; (8001840 <HAL_ADC_Init+0x2ec>)
 8001674:	f7ff ff34 	bl	80014e0 <LL_ADC_IsEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	4323      	orrs	r3, r4
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	e012      	b.n	80016ae <HAL_ADC_Init+0x15a>
 8001688:	486e      	ldr	r0, [pc, #440]	; (8001844 <HAL_ADC_Init+0x2f0>)
 800168a:	f7ff ff29 	bl	80014e0 <LL_ADC_IsEnabled>
 800168e:	4604      	mov	r4, r0
 8001690:	486d      	ldr	r0, [pc, #436]	; (8001848 <HAL_ADC_Init+0x2f4>)
 8001692:	f7ff ff25 	bl	80014e0 <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	431c      	orrs	r4, r3
 800169a:	486c      	ldr	r0, [pc, #432]	; (800184c <HAL_ADC_Init+0x2f8>)
 800169c:	f7ff ff20 	bl	80014e0 <LL_ADC_IsEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4323      	orrs	r3, r4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d012      	beq.n	80016d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ba:	d004      	beq.n	80016c6 <HAL_ADC_Init+0x172>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5f      	ldr	r2, [pc, #380]	; (8001840 <HAL_ADC_Init+0x2ec>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_Init+0x176>
 80016c6:	4a62      	ldr	r2, [pc, #392]	; (8001850 <HAL_ADC_Init+0x2fc>)
 80016c8:	e000      	b.n	80016cc <HAL_ADC_Init+0x178>
 80016ca:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_ADC_Init+0x300>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fd68 	bl	80011a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7f5b      	ldrb	r3, [r3, #29]
 80016dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80016e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80016ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001702:	2b01      	cmp	r3, #1
 8001704:	d106      	bne.n	8001714 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	3b01      	subs	r3, #1
 800170c:	045b      	lsls	r3, r3, #17
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d009      	beq.n	8001730 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_ADC_Init+0x304>)
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	430b      	orrs	r3, r1
 8001742:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fee4 	bl	800152c <LL_ADC_INJ_IsConversionOngoing>
 8001764:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d17f      	bne.n	800186c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d17c      	bne.n	800186c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001776:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800177e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	430b      	orrs	r3, r1
 800179a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d017      	beq.n	80017d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6911      	ldr	r1, [r2, #16]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80017d2:	e013      	b.n	80017fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001802:	2b01      	cmp	r3, #1
 8001804:	d12a      	bne.n	800185c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001828:	430a      	orrs	r2, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	e019      	b.n	800186c <HAL_ADC_Init+0x318>
 8001838:	20000014 	.word	0x20000014
 800183c:	053e2d63 	.word	0x053e2d63
 8001840:	50000100 	.word	0x50000100
 8001844:	50000400 	.word	0x50000400
 8001848:	50000500 	.word	0x50000500
 800184c:	50000600 	.word	0x50000600
 8001850:	50000300 	.word	0x50000300
 8001854:	50000700 	.word	0x50000700
 8001858:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10c      	bne.n	800188e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f023 010f 	bic.w	r1, r3, #15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
 800188c:	e007      	b.n	800189e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 020f 	bic.w	r2, r2, #15
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ae:	e007      	b.n	80018c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop

080018cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b6      	sub	sp, #216	; 0xd8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x24>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f000 bc13 	b.w	8002116 <HAL_ADC_ConfigChannel+0x84a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe02 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 83f3 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff fd18 	bl	800134c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fdf0 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 8001926:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fdfc 	bl	800152c <LL_ADC_INJ_IsConversionOngoing>
 8001934:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001938:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 81d9 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 81d4 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001954:	d10f      	bne.n	8001976 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff fd1f 	bl	80013a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fcd9 	bl	8001326 <LL_ADC_SetSamplingTimeCommonConfig>
 8001974:	e00e      	b.n	8001994 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	461a      	mov	r2, r3
 8001984:	f7ff fd0e 	bl	80013a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fcc9 	bl	8001326 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d022      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019c6:	f7ff fc23 	bl	8001210 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f7ff fc6f 	bl	80012ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x126>
 80019ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x128>
 80019f2:	2300      	movs	r3, #0
 80019f4:	461a      	mov	r2, r3
 80019f6:	f7ff fc7b 	bl	80012f0 <LL_ADC_SetOffsetSaturation>
 80019fa:	e17b      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fc28 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x15c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fc1d 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	f003 021f 	and.w	r2, r3, #31
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x19a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc12 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x1b2>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	e018      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1e4>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbe1 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fbc5 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x222>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fbba 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x260>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fbaf 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x278>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x2aa>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fb7e 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb62 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x2e8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb57 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e01e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x326>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb4c 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x33e>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e016      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x36c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e004      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fb1d 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fb01 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x3aa>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2103      	movs	r1, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff faf6 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	e017      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x3da>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff faeb 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x3f2>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	e011      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e003      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fac8 	bl	8001284 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fbf1 	bl	80014e0 <LL_ADC_IsEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 813d 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f7ff fb72 	bl	80013fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4aa2      	ldr	r2, [pc, #648]	; (8001fa8 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 812e 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x480>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e019      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x4b4>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e003      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	bf94      	ite	ls
 8001d7a:	2301      	movls	r3, #1
 8001d7c:	2300      	movhi	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d079      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4d4>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	069b      	lsls	r3, r3, #26
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9e:	e015      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x500>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x520>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	e017      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x550>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	ea42 0103 	orr.w	r1, r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x576>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	051b      	lsls	r3, r3, #20
 8001e40:	e018      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x5a8>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e74:	430b      	orrs	r3, r1
 8001e76:	e07e      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x5c8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	069b      	lsls	r3, r3, #26
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e92:	e015      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x5f4>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x614>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	e017      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x644>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	61fb      	str	r3, [r7, #28]
  return result;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	ea42 0103 	orr.w	r1, r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x670>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	e01b      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x6a8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	613b      	str	r3, [r7, #16]
  return result;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	051b      	lsls	r3, r3, #20
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7ff fa12 	bl	80013a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_ADC_ConfigChannel+0x6e0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80be 	beq.w	800210a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x6d6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x6ec>
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fa4:	e009      	b.n	8001fba <HAL_ADC_ConfigChannel+0x6ee>
 8001fa6:	bf00      	nop
 8001fa8:	407f0000 	.word	0x407f0000
 8001fac:	80080000 	.word	0x80080000
 8001fb0:	50000100 	.word	0x50000100
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f91a 	bl	80011f4 <LL_ADC_GetCommonPathInternalCh>
 8001fc0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_ADC_ConfigChannel+0x858>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x70c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_ADC_ConfigChannel+0x85c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d134      	bne.n	800204e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fec:	d005      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x72e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_ADC_ConfigChannel+0x860>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f040 8085 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002002:	d004      	beq.n	800200e <HAL_ADC_ConfigChannel+0x742>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a49      	ldr	r2, [pc, #292]	; (8002130 <HAL_ADC_ConfigChannel+0x864>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x746>
 800200e:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_ADC_ConfigChannel+0x868>)
 8002010:	e000      	b.n	8002014 <HAL_ADC_ConfigChannel+0x748>
 8002012:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002018:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7ff f8d5 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_ADC_ConfigChannel+0x86c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	4a44      	ldr	r2, [pc, #272]	; (800213c <HAL_ADC_ConfigChannel+0x870>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3b01      	subs	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800204c:	e05a      	b.n	8002104 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_ADC_ConfigChannel+0x874>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d125      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11f      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_ADC_ConfigChannel+0x864>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d104      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x7ac>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <HAL_ADC_ConfigChannel+0x878>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d047      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002080:	d004      	beq.n	800208c <HAL_ADC_ConfigChannel+0x7c0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_ADC_ConfigChannel+0x864>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x7c4>
 800208c:	4a29      	ldr	r2, [pc, #164]	; (8002134 <HAL_ADC_ConfigChannel+0x868>)
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x7c6>
 8002090:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_ADC_ConfigChannel+0x854>)
 8002092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7ff f896 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a2:	e031      	b.n	8002108 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_ADC_ConfigChannel+0x87c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12d      	bne.n	800210a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d127      	bne.n	800210a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_ADC_ConfigChannel+0x864>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x80c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_ADC_ConfigChannel+0x864>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x810>
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_ADC_ConfigChannel+0x868>)
 80020da:	e000      	b.n	80020de <HAL_ADC_ConfigChannel+0x812>
 80020dc:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_ADC_ConfigChannel+0x854>)
 80020de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e6:	4619      	mov	r1, r3
 80020e8:	4610      	mov	r0, r2
 80020ea:	f7ff f870 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
 80020ee:	e00c      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002102:	e002      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002112:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002116:	4618      	mov	r0, r3
 8002118:	37d8      	adds	r7, #216	; 0xd8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	50000700 	.word	0x50000700
 8002124:	c3210000 	.word	0xc3210000
 8002128:	90c00010 	.word	0x90c00010
 800212c:	50000600 	.word	0x50000600
 8002130:	50000100 	.word	0x50000100
 8002134:	50000300 	.word	0x50000300
 8002138:	20000014 	.word	0x20000014
 800213c:	053e2d63 	.word	0x053e2d63
 8002140:	c7520000 	.word	0xc7520000
 8002144:	50000500 	.word	0x50000500
 8002148:	cb840000 	.word	0xcb840000

0800214c <LL_ADC_IsEnabled>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <LL_ADC_IsEnabled+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_IsEnabled+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_ADC_REG_IsConversionOngoing>:
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d101      	bne.n	800218a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b0a1      	sub	sp, #132	; 0x84
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0e7      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021be:	2300      	movs	r3, #0
 80021c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021c2:	2300      	movs	r3, #0
 80021c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ce:	d102      	bne.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	e009      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80021e0:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	e001      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0be      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ffb1 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 8002210:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffab 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80a0 	bne.w	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 809c 	bne.w	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002240:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002242:	e000      	b.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002244:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002246:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d04b      	beq.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002262:	035b      	lsls	r3, r3, #13
 8002264:	430b      	orrs	r3, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002274:	d004      	beq.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a45      	ldr	r2, [pc, #276]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d10f      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002280:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002284:	f7ff ff62 	bl	800214c <LL_ADC_IsEnabled>
 8002288:	4604      	mov	r4, r0
 800228a:	4841      	ldr	r0, [pc, #260]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800228c:	f7ff ff5e 	bl	800214c <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e012      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80022a0:	483c      	ldr	r0, [pc, #240]	; (8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80022a2:	f7ff ff53 	bl	800214c <LL_ADC_IsEnabled>
 80022a6:	4604      	mov	r4, r0
 80022a8:	483b      	ldr	r0, [pc, #236]	; (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80022aa:	f7ff ff4f 	bl	800214c <LL_ADC_IsEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	431c      	orrs	r4, r3
 80022b2:	483c      	ldr	r0, [pc, #240]	; (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80022b4:	f7ff ff4a 	bl	800214c <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4323      	orrs	r3, r4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d056      	beq.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022d2:	f023 030f 	bic.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	6811      	ldr	r1, [r2, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	6892      	ldr	r2, [r2, #8]
 80022de:	430a      	orrs	r2, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022e6:	e047      	b.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022fc:	d004      	beq.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10f      	bne.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002308:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800230c:	f7ff ff1e 	bl	800214c <LL_ADC_IsEnabled>
 8002310:	4604      	mov	r4, r0
 8002312:	481f      	ldr	r0, [pc, #124]	; (8002390 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002314:	f7ff ff1a 	bl	800214c <LL_ADC_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	4323      	orrs	r3, r4
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e012      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002328:	481a      	ldr	r0, [pc, #104]	; (8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800232a:	f7ff ff0f 	bl	800214c <LL_ADC_IsEnabled>
 800232e:	4604      	mov	r4, r0
 8002330:	4819      	ldr	r0, [pc, #100]	; (8002398 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002332:	f7ff ff0b 	bl	800214c <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	431c      	orrs	r4, r3
 800233a:	481a      	ldr	r0, [pc, #104]	; (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800233c:	f7ff ff06 	bl	800214c <LL_ADC_IsEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	4323      	orrs	r3, r4
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d012      	beq.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800235a:	f023 030f 	bic.w	r3, r3, #15
 800235e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002360:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002362:	e009      	b.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002376:	e000      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002382:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002386:	4618      	mov	r0, r3
 8002388:	3784      	adds	r7, #132	; 0x84
 800238a:	46bd      	mov	sp, r7
 800238c:	bd90      	pop	{r4, r7, pc}
 800238e:	bf00      	nop
 8002390:	50000100 	.word	0x50000100
 8002394:	50000400 	.word	0x50000400
 8002398:	50000500 	.word	0x50000500
 800239c:	50000300 	.word	0x50000300
 80023a0:	50000700 	.word	0x50000700
 80023a4:	50000600 	.word	0x50000600

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff47 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff5e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff90 	bl	8002460 <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5f 	bl	800240c <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffb2 	bl	80024c8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_FLASH_GetError+0x14>)
 8002576:	685b      	ldr	r3, [r3, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000020 	.word	0x20000020

08002588 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002590:	f7fe fddc 	bl	800114c <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002596:	e009      	b.n	80025ac <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002598:	f7fe fdd8 	bl	800114c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d201      	bcs.n	80025ac <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e038      	b.n	800261e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d0ee      	beq.n	8002598 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80025c2:	4013      	ands	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01e      	beq.n	800260a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <FLASH_WaitForLastOperation+0xa4>)
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <FLASH_WaitForLastOperation+0xa4>)
 80025d6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <FLASH_WaitForLastOperation+0x6a>
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	618b      	str	r3, [r1, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <FLASH_WaitForLastOperation+0x7e>
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002604:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e009      	b.n	800261e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <FLASH_WaitForLastOperation+0xa0>)
 8002618:	2201      	movs	r2, #1
 800261a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	20000020 	.word	0x20000020

08002630 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_FLASHEx_OBProgram+0x11c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_FLASHEx_OBProgram+0x18>
 8002644:	2302      	movs	r3, #2
 8002646:	e07d      	b.n	8002744 <HAL_FLASHEx_OBProgram+0x114>
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_FLASHEx_OBProgram+0x11c>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_FLASHEx_OBProgram+0x11c>)
 8002650:	2200      	movs	r2, #0
 8002652:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6858      	ldr	r0, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	461a      	mov	r2, r3
 800266e:	f000 f8df 	bl	8002830 <FLASH_OB_WRPConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f919 	bl	80028c4 <FLASH_OB_RDPConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00c      	beq.n	80026c2 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 f92e 	bl	8002914 <FLASH_OB_UserConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d013      	beq.n	80026f6 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d00d      	beq.n	80026f6 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69d8      	ldr	r0, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a19      	ldr	r1, [r3, #32]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	461a      	mov	r2, r3
 80026e8:	f000 fa34 	bl	8002b54 <FLASH_OB_PCROPConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fb1b 	bl	8002d48 <FLASH_OB_SecMemConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fb43 	bl	8002db8 <FLASH_OB_BootLockConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_FLASHEx_OBProgram+0x11c>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]

  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000020 	.word	0x20000020

08002750 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2206      	movs	r2, #6
 800275c:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d007      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d10f      	bne.n	800279e <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6858      	ldr	r0, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0108 	add.w	r1, r3, #8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	330c      	adds	r3, #12
 8002798:	461a      	mov	r2, r3
 800279a:	f000 fb61 	bl	8002e60 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800279e:	f000 fbb1 	bl	8002f04 <FLASH_OB_GetRDP>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80027a8:	f000 fbc4 	bl	8002f34 <FLASH_OB_GetUser>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d003      	beq.n	80027c2 <HAL_FLASHEx_OBGetConfig+0x72>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d110      	bne.n	80027e4 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 0208 	orr.w	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 001c 	add.w	r0, r3, #28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0120 	add.w	r1, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3324      	adds	r3, #36	; 0x24
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 fbbc 	bl	8002f5c <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 80027f0:	f000 fb28 	bl	8002e44 <FLASH_OB_GetBootLock>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d003      	beq.n	800280a <HAL_FLASHEx_OBGetConfig+0xba>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2b02      	cmp	r3, #2
 8002808:	d10d      	bne.n	8002826 <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3330      	adds	r3, #48	; 0x30
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f000 faf1 	bl	8002e08 <FLASH_OB_GetSecMem>
  }
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800283c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002840:	f7ff fea2 	bl	8002588 <FLASH_WaitForLastOperation>
 8002844:	4603      	mov	r3, r0
 8002846:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d132      	bne.n	80028b4 <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	041a      	lsls	r2, r3, #16
 8002858:	4919      	ldr	r1, [pc, #100]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002860:	e01c      	b.n	800289c <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	4914      	ldr	r1, [pc, #80]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	630b      	str	r3, [r1, #48]	; 0x30
 8002874:	e012      	b.n	800289c <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d106      	bne.n	800288a <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	041a      	lsls	r2, r3, #16
 8002880:	490f      	ldr	r1, [pc, #60]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4313      	orrs	r3, r2
 8002886:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002888:	e008      	b.n	800289c <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d105      	bne.n	800289c <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	041a      	lsls	r2, r3, #16
 8002894:	490a      	ldr	r1, [pc, #40]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4313      	orrs	r3, r2
 800289a:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <FLASH_OB_WRPConfig+0x90>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a6:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ac:	f7ff fe6c 	bl	8002588 <FLASH_WaitForLastOperation>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000

080028c4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d0:	f7ff fe5a 	bl	8002588 <FLASH_WaitForLastOperation>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <FLASH_OB_RDPConfig+0x4c>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028e6:	490a      	ldr	r1, [pc, #40]	; (8002910 <FLASH_OB_RDPConfig+0x4c>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <FLASH_OB_RDPConfig+0x4c>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <FLASH_OB_RDPConfig+0x4c>)
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028fe:	f7ff fe43 	bl	8002588 <FLASH_WaitForLastOperation>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40022000 	.word	0x40022000

08002914 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800292a:	f7ff fe2d 	bl	8002588 <FLASH_WaitForLastOperation>
 800292e:	4603      	mov	r3, r0
 8002930:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 8105 	bne.w	8002b44 <FLASH_OB_UserConfig+0x230>
      optr_reg_val |= (UserConfig & FLASH_OPTR_PB4_PUPEN);
      optr_reg_mask |= FLASH_OPTR_PB4_PUPEN;
    }
#endif /* FLASH_OPTR_PB4_PUPEN */

    if ((UserType & OB_USER_BOR_LEV) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002956:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002992:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a28:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a46:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a64:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002abe:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002adc:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002afa:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b18:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <FLASH_OB_UserConfig+0x23c>)
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	490a      	ldr	r1, [pc, #40]	; (8002b50 <FLASH_OB_UserConfig+0x23c>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <FLASH_OB_UserConfig+0x23c>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <FLASH_OB_UserConfig+0x23c>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b3c:	f7ff fd24 	bl	8002588 <FLASH_WaitForLastOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000

08002b54 <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b64:	f7ff fd10 	bl	8002588 <FLASH_WaitForLastOperation>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80da 	bne.w	8002d28 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002b74:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <FLASH_OB_PCROPConfig+0x1e0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d114      	bne.n	8002baa <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8002b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b84:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002b86:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <FLASH_OB_PCROPConfig+0x1e4>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d008      	beq.n	8002ba4 <FLASH_OB_PCROPConfig+0x50>
 8002b92:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <FLASH_OB_PCROPConfig+0x1e4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	029b      	lsls	r3, r3, #10
 8002b98:	085a      	lsrs	r2, r3, #1
 8002b9a:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <FLASH_OB_PCROPConfig+0x1e8>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ba2:	e000      	b.n	8002ba6 <FLASH_OB_PCROPConfig+0x52>
 8002ba4:	4b66      	ldr	r3, [pc, #408]	; (8002d40 <FLASH_OB_PCROPConfig+0x1ec>)
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e013      	b.n	8002bd2 <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <FLASH_OB_PCROPConfig+0x1e4>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d008      	beq.n	8002bc8 <FLASH_OB_PCROPConfig+0x74>
 8002bb6:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <FLASH_OB_PCROPConfig+0x1e4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	085a      	lsrs	r2, r3, #1
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <FLASH_OB_PCROPConfig+0x1e8>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002bc6:	e000      	b.n	8002bca <FLASH_OB_PCROPConfig+0x76>
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <FLASH_OB_PCROPConfig+0x1ec>)
 8002bca:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8002bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002bd0:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d147      	bne.n	8002c6e <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d11e      	bne.n	8002c26 <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bfe:	4951      	ldr	r1, [pc, #324]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c1c:	4949      	ldr	r1, [pc, #292]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	628b      	str	r3, [r1, #40]	; 0x28
 8002c24:	e06a      	b.n	8002cfc <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d165      	bne.n	8002cfc <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002c3a:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c46:	493f      	ldr	r1, [pc, #252]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002c58:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c64:	4937      	ldr	r1, [pc, #220]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	648b      	str	r3, [r1, #72]	; 0x48
 8002c6c:	e046      	b.n	8002cfc <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d11e      	bne.n	8002cb6 <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c8e:	492d      	ldr	r1, [pc, #180]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cac:	4925      	ldr	r1, [pc, #148]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	628b      	str	r3, [r1, #40]	; 0x28
 8002cb4:	e022      	b.n	8002cfc <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11d      	bne.n	8002cfc <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	08db      	lsrs	r3, r3, #3
 8002cc8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cd6:	491b      	ldr	r1, [pc, #108]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cf4:	4913      	ldr	r1, [pc, #76]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d0a:	490e      	ldr	r1, [pc, #56]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <FLASH_OB_PCROPConfig+0x1f0>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d20:	f7ff fc32 	bl	8002588 <FLASH_WaitForLastOperation>
 8002d24:	4603      	mov	r3, r0
 8002d26:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	1fff75e0 	.word	0x1fff75e0
 8002d3c:	01fffe00 	.word	0x01fffe00
 8002d40:	08040000 	.word	0x08040000
 8002d44:	40022000 	.word	0x40022000

08002d48 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d56:	f7ff fc17 	bl	8002588 <FLASH_WaitForLastOperation>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d122      	bne.n	8002daa <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d72:	4910      	ldr	r1, [pc, #64]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	670b      	str	r3, [r1, #112]	; 0x70
 8002d7a:	e00a      	b.n	8002d92 <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d8a:	490a      	ldr	r1, [pc, #40]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <FLASH_OB_SecMemConfig+0x6c>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da2:	f7ff fbf1 	bl	8002588 <FLASH_WaitForLastOperation>
 8002da6:	4603      	mov	r3, r0
 8002da8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40022000 	.word	0x40022000

08002db8 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc4:	f7ff fbe0 	bl	8002588 <FLASH_WaitForLastOperation>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d113      	bne.n	8002dfa <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <FLASH_OB_BootLockConfig+0x4c>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <FLASH_OB_BootLockConfig+0x4c>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <FLASH_OB_BootLockConfig+0x4c>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <FLASH_OB_BootLockConfig+0x4c>)
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002df2:	f7ff fbc9 	bl	8002588 <FLASH_WaitForLastOperation>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40022000 	.word	0x40022000

08002e08 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <FLASH_OB_GetSecMem+0x38>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 8002e22:	e007      	b.n	8002e34 <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d104      	bne.n	8002e34 <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <FLASH_OB_GetSecMem+0x38>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40022000 	.word	0x40022000

08002e44 <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <FLASH_OB_GetBootLock+0x18>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000

08002e60 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8002e8c:	e031      	b.n	8002ef2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10d      	bne.n	8002eb0 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	e020      	b.n	8002ef2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d10d      	bne.n	8002ed2 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	e00f      	b.n	8002ef2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d10c      	bne.n	8002ef2 <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <FLASH_OB_GetWRP+0xa0>)
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000

08002f04 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <FLASH_OB_GetRDP+0x2c>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2baa      	cmp	r3, #170	; 0xaa
 8002f16:	d004      	beq.n	8002f22 <FLASH_OB_GetRDP+0x1e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2bcc      	cmp	r3, #204	; 0xcc
 8002f1c:	d001      	beq.n	8002f22 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002f1e:	23bb      	movs	r3, #187	; 0xbb
 8002f20:	e000      	b.n	8002f24 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 8002f22:	687b      	ldr	r3, [r7, #4]
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40022000 	.word	0x40022000

08002f34 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <FLASH_OB_GetUser+0x24>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f46:	607b      	str	r3, [r7, #4]

  return user_config;
 8002f48:	687b      	ldr	r3, [r7, #4]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000

08002f5c <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002f68:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <FLASH_OB_GetPCROP+0x17c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8002f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f78:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <FLASH_OB_GetPCROP+0x180>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d008      	beq.n	8002f98 <FLASH_OB_GetPCROP+0x3c>
 8002f86:	4b55      	ldr	r3, [pc, #340]	; (80030dc <FLASH_OB_GetPCROP+0x180>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	085a      	lsrs	r2, r3, #1
 8002f8e:	4b54      	ldr	r3, [pc, #336]	; (80030e0 <FLASH_OB_GetPCROP+0x184>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002f96:	e000      	b.n	8002f9a <FLASH_OB_GetPCROP+0x3e>
 8002f98:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <FLASH_OB_GetPCROP+0x188>)
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e013      	b.n	8002fc6 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <FLASH_OB_GetPCROP+0x180>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d008      	beq.n	8002fbc <FLASH_OB_GetPCROP+0x60>
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <FLASH_OB_GetPCROP+0x180>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	085a      	lsrs	r2, r3, #1
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <FLASH_OB_GetPCROP+0x184>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002fba:	e000      	b.n	8002fbe <FLASH_OB_GetPCROP+0x62>
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <FLASH_OB_GetPCROP+0x188>)
 8002fbe:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8002fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fc4:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002fc6:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d139      	bne.n	8003046 <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d116      	bne.n	800300c <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8002fde:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002fe6:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ffc:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e055      	b.n	80030b8 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d14f      	bne.n	80030b8 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003020:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800302e:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 8003030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003032:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003036:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e038      	b.n	80030b8 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d116      	bne.n	8003080 <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800305a:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	00da      	lsls	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	441a      	add	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003070:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	00da      	lsls	r2, r3, #3
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e01b      	b.n	80030b8 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d115      	bne.n	80030b8 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003094:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	00da      	lsls	r2, r3, #3
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	441a      	add	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030aa:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <FLASH_OB_GetPCROP+0x18c>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	1fff75e0 	.word	0x1fff75e0
 80030e0:	01fffe00 	.word	0x01fffe00
 80030e4:	08040000 	.word	0x08040000
 80030e8:	40022000 	.word	0x40022000

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030fa:	e15a      	b.n	80033b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 814c 	beq.w	80033ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d005      	beq.n	800312c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003128:	2b02      	cmp	r3, #2
 800312a:	d130      	bne.n	800318e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003162:	2201      	movs	r2, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0201 	and.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b03      	cmp	r3, #3
 8003198:	d017      	beq.n	80031ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d123      	bne.n	800321e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a6 	beq.w	80033ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003260:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <HAL_GPIO_Init+0x2e4>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	4a5a      	ldr	r2, [pc, #360]	; (80033d0 <HAL_GPIO_Init+0x2e4>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6613      	str	r3, [r2, #96]	; 0x60
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_GPIO_Init+0x2e4>)
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003278:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a2:	d01f      	beq.n	80032e4 <HAL_GPIO_Init+0x1f8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d019      	beq.n	80032e0 <HAL_GPIO_Init+0x1f4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a4b      	ldr	r2, [pc, #300]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_GPIO_Init+0x1f0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <HAL_GPIO_Init+0x2f4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1ec>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a49      	ldr	r2, [pc, #292]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1e8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a48      	ldr	r2, [pc, #288]	; (80033e8 <HAL_GPIO_Init+0x2fc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1e4>
 80032cc:	2305      	movs	r3, #5
 80032ce:	e00a      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032d0:	2306      	movs	r3, #6
 80032d2:	e008      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e006      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032d8:	2303      	movs	r3, #3
 80032da:	e004      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032dc:	2302      	movs	r3, #2
 80032de:	e002      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032e4:	2300      	movs	r3, #0
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	f002 0203 	and.w	r2, r2, #3
 80032ec:	0092      	lsls	r2, r2, #2
 80032ee:	4093      	lsls	r3, r2
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f6:	4937      	ldr	r1, [pc, #220]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_GPIO_Init+0x300>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003328:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_GPIO_Init+0x300>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_GPIO_Init+0x300>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_GPIO_Init+0x300>)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_GPIO_Init+0x300>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_GPIO_Init+0x300>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_GPIO_Init+0x300>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_GPIO_Init+0x300>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f47f ae9d 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010000 	.word	0x40010000
 80033d8:	48000400 	.word	0x48000400
 80033dc:	48000800 	.word	0x48000800
 80033e0:	48000c00 	.word	0x48000c00
 80033e4:	48001000 	.word	0x48001000
 80033e8:	48001400 	.word	0x48001400
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800340c:	e002      	b.n	8003414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08d      	b.n	800354e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fcb2 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e006      	b.n	80034a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d108      	bne.n	80034c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	e007      	b.n	80034d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	d138      	bne.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003576:	2302      	movs	r3, #2
 8003578:	e032      	b.n	80035e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d139      	bne.n	8003676 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800360c:	2302      	movs	r3, #2
 800360e:	e033      	b.n	8003678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800363e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d141      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003692:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d131      	bne.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a0:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a6:	4a46      	ldr	r2, [pc, #280]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b8:	4a41      	ldr	r2, [pc, #260]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036c0:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2232      	movs	r2, #50	; 0x32
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	4a3f      	ldr	r2, [pc, #252]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9b      	lsrs	r3, r3, #18
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d6:	e002      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ea:	d102      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f2      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d158      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e057      	b.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370a:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003714:	e04d      	b.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371c:	d141      	bne.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d131      	bne.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003744:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2232      	movs	r2, #50	; 0x32
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	0c9b      	lsrs	r3, r3, #18
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003762:	e002      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3b01      	subs	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d102      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f2      	bne.n	8003764 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d112      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e011      	b.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037a0:	e007      	b.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40007000 	.word	0x40007000
 80037c4:	20000014 	.word	0x20000014
 80037c8:	431bde83 	.word	0x431bde83

080037cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e2fe      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d075      	beq.n	80038d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ea:	4b97      	ldr	r3, [pc, #604]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f4:	4b94      	ldr	r3, [pc, #592]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d102      	bne.n	800380a <HAL_RCC_OscConfig+0x3e>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d002      	beq.n	8003810 <HAL_RCC_OscConfig+0x44>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d10b      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d157      	bne.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e2d9      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x74>
 8003832:	4b85      	ldr	r3, [pc, #532]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a84      	ldr	r2, [pc, #528]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7e      	ldr	r2, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b7c      	ldr	r3, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7b      	ldr	r2, [pc, #492]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003864:	4b78      	ldr	r3, [pc, #480]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a77      	ldr	r2, [pc, #476]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a74      	ldr	r2, [pc, #464]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fc62 	bl	800114c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fd fc5e 	bl	800114c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e29e      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389e:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xc0>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fc4e 	bl	800114c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fd fc4a 	bl	800114c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e28a      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c6:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_OscConfig+0x136>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d002      	beq.n	8003908 <HAL_RCC_OscConfig+0x13c>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d11f      	bne.n	8003948 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003908:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_OscConfig+0x154>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e25d      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	4946      	ldr	r1, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <HAL_RCC_OscConfig+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fbbb 	bl	80010b4 <HAL_InitTick>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d043      	beq.n	80039cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e249      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fd fbf6 	bl	800114c <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003964:	f7fd fbf2 	bl	800114c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e232      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	492d      	ldr	r1, [pc, #180]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
 8003996:	e01a      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 800399e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd fbd2 	bl	800114c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ac:	f7fd fbce 	bl	800114c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e20e      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x1e0>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d041      	beq.n	8003a5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fd fbab 	bl	800114c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fd fba7 	bl	800114c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1e7      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ef      	beq.n	80039fa <HAL_RCC_OscConfig+0x22e>
 8003a1a:	e020      	b.n	8003a5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x27c>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fb8e 	bl	800114c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a32:	e00d      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fd fb8a 	bl	800114c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d906      	bls.n	8003a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1ca      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a50:	4b8c      	ldr	r3, [pc, #560]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ea      	bne.n	8003a34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a70:	4b84      	ldr	r3, [pc, #528]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2b4>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x2b6>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b7f      	ldr	r3, [pc, #508]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	4a7e      	ldr	r2, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6593      	str	r3, [r2, #88]	; 0x58
 8003a92:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa2:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aae:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	; (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fd fb47 	bl	800114c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd fb43 	bl	800114c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e183      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <HAL_RCC_OscConfig+0x4bc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d108      	bne.n	8003afa <HAL_RCC_OscConfig+0x32e>
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af8:	e024      	b.n	8003b44 <HAL_RCC_OscConfig+0x378>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d110      	bne.n	8003b24 <HAL_RCC_OscConfig+0x358>
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	4a5e      	ldr	r2, [pc, #376]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b12:	4b5c      	ldr	r3, [pc, #368]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	4a5a      	ldr	r2, [pc, #360]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x378>
 8003b24:	4b57      	ldr	r3, [pc, #348]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	4a56      	ldr	r2, [pc, #344]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fafe 	bl	800114c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fafa 	bl	800114c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e138      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6a:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ed      	beq.n	8003b54 <HAL_RCC_OscConfig+0x388>
 8003b78:	e015      	b.n	8003ba6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fae7 	bl	800114c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fd fae3 	bl	800114c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e121      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ed      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d03c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd fab6 	bl	800114c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be4:	f7fd fab2 	bl	800114c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0f2      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ef      	beq.n	8003be4 <HAL_RCC_OscConfig+0x418>
 8003c04:	e01b      	b.n	8003c3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c06:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd fa99 	bl	800114c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1e:	f7fd fa95 	bl	800114c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0d5      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80c9 	beq.w	8003dda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	f000 8083 	beq.w	8003d5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d15e      	bne.n	8003d1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fa6f 	bl	800114c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	e00c      	b.n	8003c8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd fa6b 	bl	800114c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d905      	bls.n	8003c8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0ab      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8c:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ec      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c98:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	4b52      	ldr	r3, [pc, #328]	; (8003de8 <HAL_RCC_OscConfig+0x61c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6a11      	ldr	r1, [r2, #32]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003cb2:	0212      	lsls	r2, r2, #8
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0552      	lsls	r2, r2, #21
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cc6:	0852      	lsrs	r2, r2, #1
 8003cc8:	3a01      	subs	r2, #1
 8003cca:	0652      	lsls	r2, r2, #25
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cd2:	06d2      	lsls	r2, r2, #27
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	4943      	ldr	r1, [pc, #268]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a40      	ldr	r2, [pc, #256]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a3d      	ldr	r2, [pc, #244]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fa2a 	bl	800114c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd fa26 	bl	800114c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e066      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x530>
 8003d1a:	e05e      	b.n	8003dda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a30      	ldr	r2, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fa10 	bl	800114c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fa0c 	bl	800114c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e04c      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4924      	ldr	r1, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_RCC_OscConfig+0x620>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
 8003d5a:	e03e      	b.n	8003dda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e039      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_OscConfig+0x618>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d12c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	3b01      	subs	r3, #1
 8003d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d123      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d113      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	019f800c 	.word	0x019f800c
 8003dec:	feeefffc 	.word	0xfeeefffc

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e11e      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b91      	ldr	r3, [pc, #580]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b8e      	ldr	r3, [pc, #568]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	498c      	ldr	r1, [pc, #560]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b8a      	ldr	r3, [pc, #552]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e106      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d073      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d129      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4c:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0f4      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e5c:	f000 f99e 	bl	800419c <RCC_GetSysClockFreqFromPLLSource>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_ClockConfig+0x268>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d93f      	bls.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e6a:	4b7a      	ldr	r3, [pc, #488]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d033      	beq.n	8003eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12f      	bne.n	8003eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e92:	4a70      	ldr	r2, [pc, #448]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e024      	b.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0c6      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0be      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ec8:	f000 f8ce 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a61      	ldr	r2, [pc, #388]	; (8004058 <HAL_RCC_ClockConfig+0x268>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d909      	bls.n	8003eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4957      	ldr	r1, [pc, #348]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd f926 	bl	800114c <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fd f922 	bl	800114c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e095      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d023      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a42      	ldr	r2, [pc, #264]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f64:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b39      	ldr	r3, [pc, #228]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4936      	ldr	r1, [pc, #216]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4a32      	ldr	r2, [pc, #200]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d21d      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 020f 	bic.w	r2, r3, #15
 8003fa8:	4929      	ldr	r1, [pc, #164]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd f8cc 	bl	800114c <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fd f8c8 	bl	800114c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e03b      	b.n	8004046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1ed      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4917      	ldr	r1, [pc, #92]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490f      	ldr	r1, [pc, #60]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800401a:	f000 f825 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490c      	ldr	r1, [pc, #48]	; (800405c <HAL_RCC_ClockConfig+0x26c>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x270>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd f838 	bl	80010b4 <HAL_InitTick>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40022000 	.word	0x40022000
 8004054:	40021000 	.word	0x40021000
 8004058:	04c4b400 	.word	0x04c4b400
 800405c:	080057b8 	.word	0x080057b8
 8004060:	20000014 	.word	0x20000014
 8004064:	20000018 	.word	0x20000018

08004068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800406e:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d102      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	e047      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b08      	cmp	r3, #8
 800408a:	d102      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e03e      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d136      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	3301      	adds	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040bc:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	0a12      	lsrs	r2, r2, #8
 80040ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	617b      	str	r3, [r7, #20]
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0a12      	lsrs	r2, r2, #8
 80040e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
      break;
 80040ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0e5b      	lsrs	r3, r3, #25
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e001      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004110:	693b      	ldr	r3, [r7, #16]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000014 	.word	0x20000014

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	; (800416c <HAL_RCC_GetPCLK1Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	080057c8 	.word	0x080057c8

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004174:	f7ff ffda 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	080057c8 	.word	0x080057c8

0800419c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
    break;
 80041d8:	e00c      	b.n	80041f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a0e      	ldr	r2, [pc, #56]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    break;
 80041f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40021000 	.word	0x40021000
 8004220:	007a1200 	.word	0x007a1200
 8004224:	00f42400 	.word	0x00f42400

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8098 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b40      	ldr	r3, [pc, #256]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a3f      	ldr	r2, [pc, #252]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b3a      	ldr	r3, [pc, #232]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a39      	ldr	r2, [pc, #228]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fc ff65 	bl	800114c <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fc ff61 	bl	800114c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
        break;
 8004298:	e005      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429a:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d159      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01e      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d019      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fc ff21 	bl	800114c <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430c:	e00b      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fc ff1d 	bl	800114c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d902      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	74fb      	strb	r3, [r7, #19]
            break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ec      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
 8004356:	e005      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004364:	7c7b      	ldrb	r3, [r7, #17]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4ba7      	ldr	r3, [pc, #668]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	4aa6      	ldr	r2, [pc, #664]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004382:	4ba1      	ldr	r3, [pc, #644]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 0203 	bic.w	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	499d      	ldr	r1, [pc, #628]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a4:	4b98      	ldr	r3, [pc, #608]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 020c 	bic.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4995      	ldr	r1, [pc, #596]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c6:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	498c      	ldr	r1, [pc, #560]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e8:	4b87      	ldr	r3, [pc, #540]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4984      	ldr	r1, [pc, #528]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	497b      	ldr	r1, [pc, #492]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442c:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	4973      	ldr	r1, [pc, #460]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444e:	4b6e      	ldr	r3, [pc, #440]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	496a      	ldr	r1, [pc, #424]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004470:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4962      	ldr	r1, [pc, #392]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004492:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4959      	ldr	r1, [pc, #356]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044b4:	4b54      	ldr	r3, [pc, #336]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4951      	ldr	r1, [pc, #324]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d6:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4948      	ldr	r1, [pc, #288]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4940      	ldr	r1, [pc, #256]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a3a      	ldr	r2, [pc, #232]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004530:	4b35      	ldr	r3, [pc, #212]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	4932      	ldr	r1, [pc, #200]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454e:	d105      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4924      	ldr	r1, [pc, #144]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004586:	d105      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004588:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004592:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045be:	d105      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f6:	d109      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a02      	ldr	r2, [pc, #8]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004602:	60d3      	str	r3, [r2, #12]
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4926      	ldr	r1, [pc, #152]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004636:	d105      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	4918      	ldr	r1, [pc, #96]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e042      	b.n	800475c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7fc fbd7 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2224      	movs	r2, #36	; 0x24
 80046f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fbb2 	bl	8004e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8b3 	bl	8004880 <UART_SetConfig>
 800471a:	4603      	mov	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e01b      	b.n	800475c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fc31 	bl	8004fbc <UART_CheckIdleState>
 800475a:	4603      	mov	r3, r0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	2b20      	cmp	r3, #32
 800477c:	d17b      	bne.n	8004876 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_UART_Transmit+0x26>
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e074      	b.n	8004878 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479e:	f7fc fcd5 	bl	800114c <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d108      	bne.n	80047d0 <HAL_UART_Transmit+0x6c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e003      	b.n	80047d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d8:	e030      	b.n	800483c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fc93 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e03d      	b.n	8004878 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	3302      	adds	r3, #2
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e007      	b.n	800482a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3301      	adds	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1c8      	bne.n	80047da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fc5c 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e006      	b.n	8004878 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b08c      	sub	sp, #48	; 0x30
 8004886:	af00      	add	r7, sp, #0
 8004888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	431a      	orrs	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4baa      	ldr	r3, [pc, #680]	; (8004b58 <UART_SetConfig+0x2d8>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a9f      	ldr	r2, [pc, #636]	; (8004b5c <UART_SetConfig+0x2dc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f023 010f 	bic.w	r1, r3, #15
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a90      	ldr	r2, [pc, #576]	; (8004b60 <UART_SetConfig+0x2e0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d125      	bne.n	8004970 <UART_SetConfig+0xf0>
 8004924:	4b8f      	ldr	r3, [pc, #572]	; (8004b64 <UART_SetConfig+0x2e4>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d81a      	bhi.n	8004968 <UART_SetConfig+0xe8>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0xb8>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004949 	.word	0x08004949
 800493c:	08004959 	.word	0x08004959
 8004940:	08004951 	.word	0x08004951
 8004944:	08004961 	.word	0x08004961
 8004948:	2301      	movs	r3, #1
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e116      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e112      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495e:	e10e      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004966:	e10a      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e106      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7c      	ldr	r2, [pc, #496]	; (8004b68 <UART_SetConfig+0x2e8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d138      	bne.n	80049ec <UART_SetConfig+0x16c>
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <UART_SetConfig+0x2e4>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d82d      	bhi.n	80049e4 <UART_SetConfig+0x164>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0x110>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049e5 	.word	0x080049e5
 8004998:	080049e5 	.word	0x080049e5
 800499c:	080049e5 	.word	0x080049e5
 80049a0:	080049d5 	.word	0x080049d5
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049e5 	.word	0x080049e5
 80049ac:	080049e5 	.word	0x080049e5
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	080049e5 	.word	0x080049e5
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e0d8      	b.n	8004b7e <UART_SetConfig+0x2fe>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e0d4      	b.n	8004b7e <UART_SetConfig+0x2fe>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049da:	e0d0      	b.n	8004b7e <UART_SetConfig+0x2fe>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e0cc      	b.n	8004b7e <UART_SetConfig+0x2fe>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e0c8      	b.n	8004b7e <UART_SetConfig+0x2fe>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a5e      	ldr	r2, [pc, #376]	; (8004b6c <UART_SetConfig+0x2ec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d125      	bne.n	8004a42 <UART_SetConfig+0x1c2>
 80049f6:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <UART_SetConfig+0x2e4>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d016      	beq.n	8004a32 <UART_SetConfig+0x1b2>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d818      	bhi.n	8004a3a <UART_SetConfig+0x1ba>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d00a      	beq.n	8004a22 <UART_SetConfig+0x1a2>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d814      	bhi.n	8004a3a <UART_SetConfig+0x1ba>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <UART_SetConfig+0x19a>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d008      	beq.n	8004a2a <UART_SetConfig+0x1aa>
 8004a18:	e00f      	b.n	8004a3a <UART_SetConfig+0x1ba>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a20:	e0ad      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a22:	2302      	movs	r3, #2
 8004a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a28:	e0a9      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a30:	e0a5      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a32:	2308      	movs	r3, #8
 8004a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a38:	e0a1      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a40:	e09d      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <UART_SetConfig+0x2f0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d125      	bne.n	8004a98 <UART_SetConfig+0x218>
 8004a4c:	4b45      	ldr	r3, [pc, #276]	; (8004b64 <UART_SetConfig+0x2e4>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a56:	2bc0      	cmp	r3, #192	; 0xc0
 8004a58:	d016      	beq.n	8004a88 <UART_SetConfig+0x208>
 8004a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a5c:	d818      	bhi.n	8004a90 <UART_SetConfig+0x210>
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d00a      	beq.n	8004a78 <UART_SetConfig+0x1f8>
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d814      	bhi.n	8004a90 <UART_SetConfig+0x210>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <UART_SetConfig+0x1f0>
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d008      	beq.n	8004a80 <UART_SetConfig+0x200>
 8004a6e:	e00f      	b.n	8004a90 <UART_SetConfig+0x210>
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e082      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e07e      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a86:	e07a      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	e076      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a96:	e072      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <UART_SetConfig+0x2f4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d12a      	bne.n	8004af8 <UART_SetConfig+0x278>
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <UART_SetConfig+0x2e4>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab0:	d01a      	beq.n	8004ae8 <UART_SetConfig+0x268>
 8004ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab6:	d81b      	bhi.n	8004af0 <UART_SetConfig+0x270>
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d00c      	beq.n	8004ad8 <UART_SetConfig+0x258>
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac2:	d815      	bhi.n	8004af0 <UART_SetConfig+0x270>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <UART_SetConfig+0x250>
 8004ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004acc:	d008      	beq.n	8004ae0 <UART_SetConfig+0x260>
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x270>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e052      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e04e      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e04a      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e046      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e042      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <UART_SetConfig+0x2dc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d13a      	bne.n	8004b78 <UART_SetConfig+0x2f8>
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <UART_SetConfig+0x2e4>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b10:	d01a      	beq.n	8004b48 <UART_SetConfig+0x2c8>
 8004b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b16:	d81b      	bhi.n	8004b50 <UART_SetConfig+0x2d0>
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x2b8>
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d815      	bhi.n	8004b50 <UART_SetConfig+0x2d0>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x2b0>
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x2c0>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x2d0>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e022      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e01e      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e01a      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e016      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e012      	b.n	8004b7e <UART_SetConfig+0x2fe>
 8004b58:	cfff69f3 	.word	0xcfff69f3
 8004b5c:	40008000 	.word	0x40008000
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40004400 	.word	0x40004400
 8004b6c:	40004800 	.word	0x40004800
 8004b70:	40004c00 	.word	0x40004c00
 8004b74:	40005000 	.word	0x40005000
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4aae      	ldr	r2, [pc, #696]	; (8004e3c <UART_SetConfig+0x5bc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	f040 8097 	bne.w	8004cb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d823      	bhi.n	8004bda <UART_SetConfig+0x35a>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0x318>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bcb 	.word	0x08004bcb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004bdb 	.word	0x08004bdb
 8004bb8:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7ff fac2 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <UART_SetConfig+0x5c0>)
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7ff fa4d 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bd8:	e005      	b.n	8004be6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8130 	beq.w	8004e4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	4a94      	ldr	r2, [pc, #592]	; (8004e44 <UART_SetConfig+0x5c4>)
 8004bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	4413      	add	r3, r2
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d305      	bcc.n	8004c1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d903      	bls.n	8004c26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c24:	e113      	b.n	8004e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	2200      	movs	r2, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	60fa      	str	r2, [r7, #12]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	4a84      	ldr	r2, [pc, #528]	; (8004e44 <UART_SetConfig+0x5c4>)
 8004c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c48:	f7fb faee 	bl	8000228 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	020b      	lsls	r3, r1, #8
 8004c5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c62:	0202      	lsls	r2, r0, #8
 8004c64:	6979      	ldr	r1, [r7, #20]
 8004c66:	6849      	ldr	r1, [r1, #4]
 8004c68:	0849      	lsrs	r1, r1, #1
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	4605      	mov	r5, r0
 8004c70:	eb12 0804 	adds.w	r8, r2, r4
 8004c74:	eb43 0905 	adc.w	r9, r3, r5
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	469a      	mov	sl, r3
 8004c80:	4693      	mov	fp, r2
 8004c82:	4652      	mov	r2, sl
 8004c84:	465b      	mov	r3, fp
 8004c86:	4640      	mov	r0, r8
 8004c88:	4649      	mov	r1, r9
 8004c8a:	f7fb facd 	bl	8000228 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4613      	mov	r3, r2
 8004c94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9c:	d308      	bcc.n	8004cb0 <UART_SetConfig+0x430>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca4:	d204      	bcs.n	8004cb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e0ce      	b.n	8004e4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cb6:	e0ca      	b.n	8004e4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d166      	bne.n	8004d90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d827      	bhi.n	8004d1a <UART_SetConfig+0x49a>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x450>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d1b 	.word	0x08004d1b
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004d1b 	.word	0x08004d1b
 8004ce8:	08004d1b 	.word	0x08004d1b
 8004cec:	08004d1b 	.word	0x08004d1b
 8004cf0:	08004d13 	.word	0x08004d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf4:	f7ff fa26 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfa:	e014      	b.n	8004d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7ff fa38 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d02:	e010      	b.n	8004d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d04:	4b4e      	ldr	r3, [pc, #312]	; (8004e40 <UART_SetConfig+0x5c0>)
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d08:	e00d      	b.n	8004d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7ff f9ad 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d10:	e009      	b.n	8004d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d18:	e005      	b.n	8004d26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8090 	beq.w	8004e4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	4a44      	ldr	r2, [pc, #272]	; (8004e44 <UART_SetConfig+0x5c4>)
 8004d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d40:	005a      	lsls	r2, r3, #1
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	441a      	add	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d916      	bls.n	8004d88 <UART_SetConfig+0x508>
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d212      	bcs.n	8004d88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f023 030f 	bic.w	r3, r3, #15
 8004d6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	8bfb      	ldrh	r3, [r7, #30]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	8bfa      	ldrh	r2, [r7, #30]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e062      	b.n	8004e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d8e:	e05e      	b.n	8004e4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d828      	bhi.n	8004dea <UART_SetConfig+0x56a>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x520>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	08004deb 	.word	0x08004deb
 8004db0:	08004ddb 	.word	0x08004ddb
 8004db4:	08004deb 	.word	0x08004deb
 8004db8:	08004deb 	.word	0x08004deb
 8004dbc:	08004deb 	.word	0x08004deb
 8004dc0:	08004de3 	.word	0x08004de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7ff f9be 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dca:	e014      	b.n	8004df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7ff f9d0 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dd2:	e010      	b.n	8004df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <UART_SetConfig+0x5c0>)
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dd8:	e00d      	b.n	8004df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7ff f945 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004de0:	e009      	b.n	8004df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de8:	e005      	b.n	8004df6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004df4:	bf00      	nop
    }

    if (pclk != 0U)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d028      	beq.n	8004e4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <UART_SetConfig+0x5c4>)
 8004e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	441a      	add	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b0f      	cmp	r3, #15
 8004e24:	d910      	bls.n	8004e48 <UART_SetConfig+0x5c8>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d20c      	bcs.n	8004e48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e009      	b.n	8004e4e <UART_SetConfig+0x5ce>
 8004e3a:	bf00      	nop
 8004e3c:	40008000 	.word	0x40008000
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	080057d0 	.word	0x080057d0
      }
      else
      {
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3730      	adds	r7, #48	; 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01a      	beq.n	8004f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f76:	d10a      	bne.n	8004f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b098      	sub	sp, #96	; 0x60
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fcc:	f7fc f8be 	bl	800114c <HAL_GetTick>
 8004fd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d12f      	bne.n	8005040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f88e 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d022      	beq.n	8005040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500e:	653b      	str	r3, [r7, #80]	; 0x50
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
 800501a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800501e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e6      	bne.n	8004ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e063      	b.n	8005108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b04      	cmp	r3, #4
 800504c:	d149      	bne.n	80050e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005056:	2200      	movs	r2, #0
 8005058:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f857 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d03c      	beq.n	80050e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	623b      	str	r3, [r7, #32]
   return(result);
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800507c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	633b      	str	r3, [r7, #48]	; 0x30
 8005088:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e6      	bne.n	8005068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3308      	adds	r3, #8
 80050b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ba:	61fa      	str	r2, [r7, #28]
 80050bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	69b9      	ldr	r1, [r7, #24]
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	617b      	str	r3, [r7, #20]
   return(result);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e012      	b.n	8005108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3758      	adds	r7, #88	; 0x58
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	e04f      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d04b      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fc f80f 	bl	800114c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <UART_WaitOnFlagUntilTimeout+0x30>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e04e      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d037      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d034      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d031      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d110      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f838 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2208      	movs	r2, #8
 800517e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e029      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519c:	d111      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f81e 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00f      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0a0      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b095      	sub	sp, #84	; 0x54
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
 8005212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d118      	bne.n	8005296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	60bb      	str	r3, [r7, #8]
   return(result);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0310 	bic.w	r3, r3, #16
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	613b      	str	r3, [r7, #16]
   return(result);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052aa:	bf00      	nop
 80052ac:	3754      	adds	r7, #84	; 0x54
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UARTEx_DisableFifoMode+0x16>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e027      	b.n	800531c <HAL_UARTEx_DisableFifoMode+0x66>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e02d      	b.n	800539c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f84f 	bl	8005420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e02d      	b.n	8005418 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2224      	movs	r2, #36	; 0x24
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f811 	bl	8005420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005440:	e031      	b.n	80054a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005442:	2308      	movs	r3, #8
 8005444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005446:	2308      	movs	r3, #8
 8005448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	0e5b      	lsrs	r3, r3, #25
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	0f5b      	lsrs	r3, r3, #29
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	7b3a      	ldrb	r2, [r7, #12]
 800546e:	4911      	ldr	r1, [pc, #68]	; (80054b4 <UARTEx_SetNbDataToProcess+0x94>)
 8005470:	5c8a      	ldrb	r2, [r1, r2]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005476:	7b3a      	ldrb	r2, [r7, #12]
 8005478:	490f      	ldr	r1, [pc, #60]	; (80054b8 <UARTEx_SetNbDataToProcess+0x98>)
 800547a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800547c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	7b7a      	ldrb	r2, [r7, #13]
 800548c:	4909      	ldr	r1, [pc, #36]	; (80054b4 <UARTEx_SetNbDataToProcess+0x94>)
 800548e:	5c8a      	ldrb	r2, [r1, r2]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005494:	7b7a      	ldrb	r2, [r7, #13]
 8005496:	4908      	ldr	r1, [pc, #32]	; (80054b8 <UARTEx_SetNbDataToProcess+0x98>)
 8005498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800549a:	fb93 f3f2 	sdiv	r3, r3, r2
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	080057e8 	.word	0x080057e8
 80054b8:	080057f0 	.word	0x080057f0

080054bc <_ZdlPvj>:
 80054bc:	f000 b800 	b.w	80054c0 <_ZdlPv>

080054c0 <_ZdlPv>:
 80054c0:	f000 b808 	b.w	80054d4 <free>

080054c4 <malloc>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <malloc+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f000 b82b 	b.w	8005524 <_malloc_r>
 80054ce:	bf00      	nop
 80054d0:	2000008c 	.word	0x2000008c

080054d4 <free>:
 80054d4:	4b02      	ldr	r3, [pc, #8]	; (80054e0 <free+0xc>)
 80054d6:	4601      	mov	r1, r0
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	f000 b8f3 	b.w	80056c4 <_free_r>
 80054de:	bf00      	nop
 80054e0:	2000008c 	.word	0x2000008c

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0e      	ldr	r6, [pc, #56]	; (8005520 <sbrk_aligned+0x3c>)
 80054e8:	460c      	mov	r4, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	4605      	mov	r5, r0
 80054ee:	b911      	cbnz	r1, 80054f6 <sbrk_aligned+0x12>
 80054f0:	f000 f8ac 	bl	800564c <_sbrk_r>
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 f8a7 	bl	800564c <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d00a      	beq.n	8005518 <sbrk_aligned+0x34>
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d007      	beq.n	800551c <sbrk_aligned+0x38>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 f89c 	bl	800564c <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d101      	bne.n	800551c <sbrk_aligned+0x38>
 8005518:	f04f 34ff 	mov.w	r4, #4294967295
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	20000210 	.word	0x20000210

08005524 <_malloc_r>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	1ccd      	adds	r5, r1, #3
 800552a:	f025 0503 	bic.w	r5, r5, #3
 800552e:	3508      	adds	r5, #8
 8005530:	2d0c      	cmp	r5, #12
 8005532:	bf38      	it	cc
 8005534:	250c      	movcc	r5, #12
 8005536:	2d00      	cmp	r5, #0
 8005538:	4607      	mov	r7, r0
 800553a:	db01      	blt.n	8005540 <_malloc_r+0x1c>
 800553c:	42a9      	cmp	r1, r5
 800553e:	d905      	bls.n	800554c <_malloc_r+0x28>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	2600      	movs	r6, #0
 8005546:	4630      	mov	r0, r6
 8005548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005620 <_malloc_r+0xfc>
 8005550:	f000 f868 	bl	8005624 <__malloc_lock>
 8005554:	f8d8 3000 	ldr.w	r3, [r8]
 8005558:	461c      	mov	r4, r3
 800555a:	bb5c      	cbnz	r4, 80055b4 <_malloc_r+0x90>
 800555c:	4629      	mov	r1, r5
 800555e:	4638      	mov	r0, r7
 8005560:	f7ff ffc0 	bl	80054e4 <sbrk_aligned>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	4604      	mov	r4, r0
 8005568:	d155      	bne.n	8005616 <_malloc_r+0xf2>
 800556a:	f8d8 4000 	ldr.w	r4, [r8]
 800556e:	4626      	mov	r6, r4
 8005570:	2e00      	cmp	r6, #0
 8005572:	d145      	bne.n	8005600 <_malloc_r+0xdc>
 8005574:	2c00      	cmp	r4, #0
 8005576:	d048      	beq.n	800560a <_malloc_r+0xe6>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	4631      	mov	r1, r6
 800557c:	4638      	mov	r0, r7
 800557e:	eb04 0903 	add.w	r9, r4, r3
 8005582:	f000 f863 	bl	800564c <_sbrk_r>
 8005586:	4581      	cmp	r9, r0
 8005588:	d13f      	bne.n	800560a <_malloc_r+0xe6>
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	1a6d      	subs	r5, r5, r1
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ffa7 	bl	80054e4 <sbrk_aligned>
 8005596:	3001      	adds	r0, #1
 8005598:	d037      	beq.n	800560a <_malloc_r+0xe6>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	442b      	add	r3, r5
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f8d8 3000 	ldr.w	r3, [r8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d038      	beq.n	800561a <_malloc_r+0xf6>
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	42a2      	cmp	r2, r4
 80055ac:	d12b      	bne.n	8005606 <_malloc_r+0xe2>
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e00f      	b.n	80055d4 <_malloc_r+0xb0>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	1b52      	subs	r2, r2, r5
 80055b8:	d41f      	bmi.n	80055fa <_malloc_r+0xd6>
 80055ba:	2a0b      	cmp	r2, #11
 80055bc:	d917      	bls.n	80055ee <_malloc_r+0xca>
 80055be:	1961      	adds	r1, r4, r5
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	6025      	str	r5, [r4, #0]
 80055c4:	bf18      	it	ne
 80055c6:	6059      	strne	r1, [r3, #4]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	bf08      	it	eq
 80055cc:	f8c8 1000 	streq.w	r1, [r8]
 80055d0:	5162      	str	r2, [r4, r5]
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	4638      	mov	r0, r7
 80055d6:	f104 060b 	add.w	r6, r4, #11
 80055da:	f000 f829 	bl	8005630 <__malloc_unlock>
 80055de:	f026 0607 	bic.w	r6, r6, #7
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	1af2      	subs	r2, r6, r3
 80055e6:	d0ae      	beq.n	8005546 <_malloc_r+0x22>
 80055e8:	1b9b      	subs	r3, r3, r6
 80055ea:	50a3      	str	r3, [r4, r2]
 80055ec:	e7ab      	b.n	8005546 <_malloc_r+0x22>
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	6862      	ldr	r2, [r4, #4]
 80055f2:	d1dd      	bne.n	80055b0 <_malloc_r+0x8c>
 80055f4:	f8c8 2000 	str.w	r2, [r8]
 80055f8:	e7ec      	b.n	80055d4 <_malloc_r+0xb0>
 80055fa:	4623      	mov	r3, r4
 80055fc:	6864      	ldr	r4, [r4, #4]
 80055fe:	e7ac      	b.n	800555a <_malloc_r+0x36>
 8005600:	4634      	mov	r4, r6
 8005602:	6876      	ldr	r6, [r6, #4]
 8005604:	e7b4      	b.n	8005570 <_malloc_r+0x4c>
 8005606:	4613      	mov	r3, r2
 8005608:	e7cc      	b.n	80055a4 <_malloc_r+0x80>
 800560a:	230c      	movs	r3, #12
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4638      	mov	r0, r7
 8005610:	f000 f80e 	bl	8005630 <__malloc_unlock>
 8005614:	e797      	b.n	8005546 <_malloc_r+0x22>
 8005616:	6025      	str	r5, [r4, #0]
 8005618:	e7dc      	b.n	80055d4 <_malloc_r+0xb0>
 800561a:	605b      	str	r3, [r3, #4]
 800561c:	deff      	udf	#255	; 0xff
 800561e:	bf00      	nop
 8005620:	2000020c 	.word	0x2000020c

08005624 <__malloc_lock>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__malloc_lock+0x8>)
 8005626:	f000 b84b 	b.w	80056c0 <__retarget_lock_acquire_recursive>
 800562a:	bf00      	nop
 800562c:	20000350 	.word	0x20000350

08005630 <__malloc_unlock>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__malloc_unlock+0x8>)
 8005632:	f000 b846 	b.w	80056c2 <__retarget_lock_release_recursive>
 8005636:	bf00      	nop
 8005638:	20000350 	.word	0x20000350

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <_sbrk_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d06      	ldr	r5, [pc, #24]	; (8005668 <_sbrk_r+0x1c>)
 8005650:	2300      	movs	r3, #0
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7fb fca2 	bl	8000fa0 <_sbrk>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_sbrk_r+0x1a>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_sbrk_r+0x1a>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	2000034c 	.word	0x2000034c

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000008c 	.word	0x2000008c

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f000 f866 	bl	800575c <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	08005800 	.word	0x08005800
 80056b4:	08005800 	.word	0x08005800
 80056b8:	08005800 	.word	0x08005800
 80056bc:	08005808 	.word	0x08005808

080056c0 <__retarget_lock_acquire_recursive>:
 80056c0:	4770      	bx	lr

080056c2 <__retarget_lock_release_recursive>:
 80056c2:	4770      	bx	lr

080056c4 <_free_r>:
 80056c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d044      	beq.n	8005754 <_free_r+0x90>
 80056ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ce:	9001      	str	r0, [sp, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f1a1 0404 	sub.w	r4, r1, #4
 80056d6:	bfb8      	it	lt
 80056d8:	18e4      	addlt	r4, r4, r3
 80056da:	f7ff ffa3 	bl	8005624 <__malloc_lock>
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <_free_r+0x94>)
 80056e0:	9801      	ldr	r0, [sp, #4]
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	b933      	cbnz	r3, 80056f4 <_free_r+0x30>
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	6014      	str	r4, [r2, #0]
 80056ea:	b003      	add	sp, #12
 80056ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056f0:	f7ff bf9e 	b.w	8005630 <__malloc_unlock>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d908      	bls.n	800570a <_free_r+0x46>
 80056f8:	6825      	ldr	r5, [r4, #0]
 80056fa:	1961      	adds	r1, r4, r5
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf01      	itttt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	1949      	addeq	r1, r1, r5
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	e7ed      	b.n	80056e6 <_free_r+0x22>
 800570a:	461a      	mov	r2, r3
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b10b      	cbz	r3, 8005714 <_free_r+0x50>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d9fa      	bls.n	800570a <_free_r+0x46>
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	1855      	adds	r5, r2, r1
 8005718:	42a5      	cmp	r5, r4
 800571a:	d10b      	bne.n	8005734 <_free_r+0x70>
 800571c:	6824      	ldr	r4, [r4, #0]
 800571e:	4421      	add	r1, r4
 8005720:	1854      	adds	r4, r2, r1
 8005722:	42a3      	cmp	r3, r4
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	d1e0      	bne.n	80056ea <_free_r+0x26>
 8005728:	681c      	ldr	r4, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6053      	str	r3, [r2, #4]
 800572e:	440c      	add	r4, r1
 8005730:	6014      	str	r4, [r2, #0]
 8005732:	e7da      	b.n	80056ea <_free_r+0x26>
 8005734:	d902      	bls.n	800573c <_free_r+0x78>
 8005736:	230c      	movs	r3, #12
 8005738:	6003      	str	r3, [r0, #0]
 800573a:	e7d6      	b.n	80056ea <_free_r+0x26>
 800573c:	6825      	ldr	r5, [r4, #0]
 800573e:	1961      	adds	r1, r4, r5
 8005740:	428b      	cmp	r3, r1
 8005742:	bf04      	itt	eq
 8005744:	6819      	ldreq	r1, [r3, #0]
 8005746:	685b      	ldreq	r3, [r3, #4]
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	bf04      	itt	eq
 800574c:	1949      	addeq	r1, r1, r5
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	6054      	str	r4, [r2, #4]
 8005752:	e7ca      	b.n	80056ea <_free_r+0x26>
 8005754:	b003      	add	sp, #12
 8005756:	bd30      	pop	{r4, r5, pc}
 8005758:	2000020c 	.word	0x2000020c

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr
