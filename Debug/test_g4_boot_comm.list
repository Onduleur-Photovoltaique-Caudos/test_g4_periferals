
test_g4_boot_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e64  08003e64  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000090  08003f04  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003f04  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4c1  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b5  00000000  00000000  0002e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00030a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a6  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027999  00000000  00000000  00031e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea2b  00000000  00000000  000597ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eda98  00000000  00000000  0006822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003078  00000000  00000000  00155cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00158d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003dd0 	.word	0x08003dd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	08003dd0 	.word	0x08003dd0

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_ZN7IntegerC1Ev>:
#include <string.h>

static char hexDigits[] = "0123456789abcdef";


Integer::Integer() {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <_ZN7IntegerC1Ev+0x1c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	08003e14 	.word	0x08003e14

08000544 <_ZN7IntegerD1Ev>:

Integer::~Integer() {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <_ZN7IntegerD1Ev+0x1c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	08003e14 	.word	0x08003e14

08000564 <_ZN7IntegerD0Ev>:
Integer::~Integer() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
}
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ffe9 	bl	8000544 <_ZN7IntegerD1Ev>
 8000572:	2104      	movs	r1, #4
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f003 fadb 	bl	8003b30 <_ZdlPvj>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZN7Integer5toAXnEjPcib>:

bool Integer::toAXn(unsigned int n, char * retBuf, int retLen, bool prefix){
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	70fb      	strb	r3, [r7, #3]
	char * startError = retBuf;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
	int remainingForHex = retLen;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	623b      	str	r3, [r7, #32]
	if (prefix) {
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00e      	beq.n	80005be <_ZN7Integer5toAXnEjPcib+0x3a>
		if (retLen <= 3) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	dd3c      	ble.n	8000620 <_ZN7Integer5toAXnEjPcib+0x9c>
			goto error_exit;
		} else {
			strcpy (retBuf, "0x");
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <_ZN7Integer5toAXnEjPcib+0xe0>)
 80005aa:	8811      	ldrh	r1, [r2, #0]
 80005ac:	7892      	ldrb	r2, [r2, #2]
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	709a      	strb	r2, [r3, #2]
			retBuf += 2;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	3302      	adds	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
			retLen -= 2;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b02      	subs	r3, #2
 80005bc:	607b      	str	r3, [r7, #4]
		}
	}
	startError = retBuf;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
	remainingForHex = retLen;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	623b      	str	r3, [r7, #32]
	unsigned char b;
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 80005c6:	2307      	movs	r3, #7
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	e01c      	b.n	8000606 <_ZN7Integer5toAXnEjPcib+0x82>
		b = (n & (0xF << (i*4))) >> (i*4);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	401a      	ands	r2, r3
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fa22 f303 	lsr.w	r3, r2, r3
 80005e4:	75fb      	strb	r3, [r7, #23]
		if (retLen == 0){ // no space for digit
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01b      	beq.n	8000624 <_ZN7Integer5toAXnEjPcib+0xa0>
			goto error_exit;
		}
		(*retBuf++) = hexDigits[b];
 80005ec:	7dfa      	ldrb	r2, [r7, #23]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1c59      	adds	r1, r3, #1
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	491c      	ldr	r1, [pc, #112]	; (8000668 <_ZN7Integer5toAXnEjPcib+0xe4>)
 80005f6:	5c8a      	ldrb	r2, [r1, r2]
 80005f8:	701a      	strb	r2, [r3, #0]
		retLen--;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
	for (int i = sizeof(n)*2 -1; i >= 0; i--) {
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b01      	subs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dadf      	bge.n	80005cc <_ZN7Integer5toAXnEjPcib+0x48>
	}
	if (retLen == 0){ // no space final 0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <_ZN7Integer5toAXnEjPcib+0xa4>
		goto error_exit;
	}
	(*retBuf++) = '\0';
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	60ba      	str	r2, [r7, #8]
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	return true;
 800061c:	2301      	movs	r3, #1
 800061e:	e01a      	b.n	8000656 <_ZN7Integer5toAXnEjPcib+0xd2>
			goto error_exit;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
			goto error_exit;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <_ZN7Integer5toAXnEjPcib+0xa6>
		goto error_exit;
 8000628:	bf00      	nop

	error_exit:
	for (int i = 0; i < remainingForHex-1; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	e007      	b.n	8000640 <_ZN7Integer5toAXnEjPcib+0xbc>
		(*startError++) = '#';
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	627a      	str	r2, [r7, #36]	; 0x24
 8000636:	2223      	movs	r2, #35	; 0x23
 8000638:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < remainingForHex-1; i++) {
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	3301      	adds	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	3b01      	subs	r3, #1
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf2      	blt.n	8000630 <_ZN7Integer5toAXnEjPcib+0xac>
	}
	(*startError++) = '\0';
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	627a      	str	r2, [r7, #36]	; 0x24
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	return false;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	08003de8 	.word	0x08003de8
 8000668:	20000000 	.word	0x20000000

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a0      	sub	sp, #128	; 0x80
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	DWT->CYCCNT = 0;
 8000672:	4b3e      	ldr	r3, [pc, #248]	; (800076c <main+0x100>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  // Enable hi resolution counter
	DWT->CTRL &= ~0x00000001;
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <main+0x100>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a3b      	ldr	r2, [pc, #236]	; (800076c <main+0x100>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= 0x00000001;
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <main+0x100>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a38      	ldr	r2, [pc, #224]	; (800076c <main+0x100>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fa9d 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f874 	bl	8000780 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f91c 	bl	80008d4 <_ZL12MX_GPIO_Initv>
  //MX_I2C1_Init();
  MX_USART2_UART_Init();
 800069c:	f000 f8ba 	bl	8000814 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

#if 1
  FLASH_OBProgramInitTypeDef obInit = {0};
 80006a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a4:	2234      	movs	r2, #52	; 0x34
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fb01 	bl	8003cb0 <memset>
  HAL_StatusTypeDef status;
  obInit.OptionType = OPTIONBYTE_USER;
 80006ae:	2304      	movs	r3, #4
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  obInit.USERType = OB_USER_nSWBOOT0;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
  obInit.USERConfig = FLASH_OPTR_nSWBOOT0;
 80006b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006bc:	657b      	str	r3, [r7, #84]	; 0x54
  //HAL_FLASH_OB_Unlock();
  status = HAL_FLASHEx_OBProgram(&obInit);
 80006be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fc38 	bl	8000f38 <HAL_FLASHEx_OBProgram>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t status2 = HAL_FLASH_GetError();
 80006ce:	f000 fbd3 	bl	8000e78 <HAL_FLASH_GetError>
 80006d2:	67b8      	str	r0, [r7, #120]	; 0x78
  //FLASH_OB_UserConfig(OB_USER_nSWBOOT0, FLASH_OPTR_nSWBOOT0);
  //FLASH_OB_UserConfig(OB_USER_nBOOT0, FLASH_OPTR_nBOOT0);
#endif

  FLASH_OBProgramInitTypeDef obInitRead = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fae7 	bl	8003cb0 <memset>
  HAL_FLASHEx_OBGetConfig(&obInitRead);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fcb6 	bl	8001058 <HAL_FLASHEx_OBGetConfig>



  int statusTransmit;
  char str[] = "start\n\r";
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <main+0x104>)
 80006ee:	463b      	mov	r3, r7
 80006f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f4:	e883 0003 	stmia.w	r3, {r0, r1}
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),1000);
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd8c 	bl	8000218 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	4639      	mov	r1, r7
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <main+0x108>)
 800070c:	f002 fb64 	bl	8002dd8 <HAL_UART_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	677b      	str	r3, [r7, #116]	; 0x74

#define intro_message "flash BYTES value:"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)intro_message, strlen(intro_message),1000);
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	2212      	movs	r2, #18
 800071a:	4917      	ldr	r1, [pc, #92]	; (8000778 <main+0x10c>)
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x108>)
 800071e:	f002 fb5b 	bl	8002dd8 <HAL_UART_Transmit>
 8000722:	4603      	mov	r3, r0
 8000724:	677b      	str	r3, [r7, #116]	; 0x74

  char * buffer;
  buffer = (char*)malloc(11);
 8000726:	200b      	movs	r0, #11
 8000728:	f003 fa06 	bl	8003b38 <malloc>
 800072c:	4603      	mov	r3, r0
 800072e:	673b      	str	r3, [r7, #112]	; 0x70
  Int.toAXn(obInitRead.USERConfig, buffer, 11, true);
 8000730:	6a38      	ldr	r0, [r7, #32]
 8000732:	2301      	movs	r3, #1
 8000734:	220b      	movs	r2, #11
 8000736:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000738:	f7ff ff24 	bl	8000584 <_ZN7Integer5toAXnEjPcib>
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),1000);
 800073c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800073e:	f7ff fd6b 	bl	8000218 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0x108>)
 800074e:	f002 fb43 	bl	8002dd8 <HAL_UART_Transmit>
 8000752:	4603      	mov	r3, r0
 8000754:	677b      	str	r3, [r7, #116]	; 0x74

#define eol_message "\n\r"
  statusTransmit = HAL_UART_Transmit(&huart2,(uint8_t*)eol_message, strlen(eol_message),1000);
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	2202      	movs	r2, #2
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <main+0x110>)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <main+0x108>)
 8000760:	f002 fb3a 	bl	8002dd8 <HAL_UART_Transmit>
 8000764:	4603      	mov	r3, r0
 8000766:	677b      	str	r3, [r7, #116]	; 0x74

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0xfc>
 800076a:	bf00      	nop
 800076c:	e0001000 	.word	0xe0001000
 8000770:	08003e04 	.word	0x08003e04
 8000774:	200000b0 	.word	0x200000b0
 8000778:	08003dec 	.word	0x08003dec
 800077c:	08003e00 	.word	0x08003e00

08000780 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2238      	movs	r2, #56	; 0x38
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fa8e 	bl	8003cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a6:	f001 faa7 	bl	8001cf8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fb3d 	bl	8001e40 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80007d6:	f000 f8ab 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fe36 	bl	8002464 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000808:	f000 f892 	bl	8000930 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3750      	adds	r7, #80	; 0x50
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800085e:	f002 fa6b 	bl	8002d38 <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000872:	f000 f85d 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800087a:	f003 f88f 	bl	800399c <HAL_UARTEx_SetTxFifoThreshold>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800088e:	f000 f84f 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000896:	f003 f8bf 	bl	8003a18 <HAL_UARTEx_SetRxFifoThreshold>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80008aa:	f000 f841 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b0:	f003 f83b 	bl	800392a <HAL_UARTEx_DisableFifoMode>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80008c4:	f000 f834 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000b0 	.word	0x200000b0
 80008d0:	40004400 	.word	0x40004400

080008d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <_ZL12MX_GPIO_Initv+0x58>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <_ZL12MX_GPIO_Initv+0x58>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <_ZL12MX_GPIO_Initv+0x58>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000900:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000912:	2307      	movs	r3, #7
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f001 f869 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d107      	bne.n	800095c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000952:	4293      	cmp	r3, r2
 8000954:	d102      	bne.n	800095c <_Z41__static_initialization_and_destruction_0ii+0x20>
static Integer Int;
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000958:	f7ff fde4 	bl	8000524 <_ZN7IntegerC1Ev>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d107      	bne.n	8000972 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	4293      	cmp	r3, r2
 800096a:	d102      	bne.n	8000972 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800096e:	f7ff fde9 	bl	8000544 <_ZN7IntegerD1Ev>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000ac 	.word	0x200000ac

08000980 <_GLOBAL__sub_I_hi2c1>:
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
 8000984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ffd7 	bl	800093c <_Z41__static_initialization_and_destruction_0ii>
 800098e:	bd80      	pop	{r7, pc}

08000990 <_GLOBAL__sub_D_hi2c1>:
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
 8000994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ffcf 	bl	800093c <_Z41__static_initialization_and_destruction_0ii>
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	; 0x60
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09e      	sub	sp, #120	; 0x78
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2254      	movs	r2, #84	; 0x54
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 f951 	bl	8003cb0 <memset>
  if(huart->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <HAL_UART_MspInit+0xa8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d136      	bne.n	8000a86 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 ff39 	bl	800289c <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ff7e 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0xac>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a64:	230c      	movs	r3, #12
 8000a66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 ffb7 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3778      	adds	r7, #120	; 0x78
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f8c6 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f003 f8e0 	bl	8003ce0 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000144 	.word	0x20000144
 8000b54:	20000298 	.word	0x20000298

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 f89f 	bl	8003cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fd5d 	bl	800066c <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bc0:	08003e74 	.word	0x08003e74
  ldr r2, =_sbss
 8000bc4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bc8:	20000294 	.word	0x20000294

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f91b 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fed6 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f918 	bl	8000e5e <HAL_SYSTICK_Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d809      	bhi.n	8000c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f000 f8f2 	bl	8000e2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x70>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e007      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e004      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000001c 	.word	0x2000001c
 8000c6c:	20000014 	.word	0x20000014
 8000c70:	20000018 	.word	0x20000018

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000148 	.word	0x20000148
 8000c94:	2000001c 	.word	0x2000001c

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000148 	.word	0x20000148

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff47 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff5e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff90 	bl	8000d68 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5f 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffb2 	bl	8000dd0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_FLASH_GetError+0x14>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000020 	.word	0x20000020

08000e90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fefe 	bl	8000c98 <HAL_GetTick>
 8000e9c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e9e:	e009      	b.n	8000eb4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000ea0:	f7ff fefa 	bl	8000c98 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d201      	bcs.n	8000eb4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e038      	b.n	8000f26 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d0ee      	beq.n	8000ea0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d01e      	beq.n	8000f12 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <FLASH_WaitForLastOperation+0xa4>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <FLASH_WaitForLastOperation+0xa4>)
 8000ede:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <FLASH_WaitForLastOperation+0x6a>
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ef4:	490e      	ldr	r1, [pc, #56]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	618b      	str	r3, [r1, #24]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <FLASH_WaitForLastOperation+0x7e>
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f0c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e009      	b.n	8000f26 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <FLASH_WaitForLastOperation+0xa0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000
 8000f34:	20000020 	.word	0x20000020

08000f38 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <HAL_FLASHEx_OBProgram+0x11c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_FLASHEx_OBProgram+0x18>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e07d      	b.n	800104c <HAL_FLASHEx_OBProgram+0x114>
 8000f50:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_FLASHEx_OBProgram+0x11c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_FLASHEx_OBProgram+0x11c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6858      	ldr	r0, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6899      	ldr	r1, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	461a      	mov	r2, r3
 8000f76:	f000 f8df 	bl	8001138 <FLASH_OB_WRPConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f919 	bl	80011cc <FLASH_OB_RDPConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 f92e 	bl	800121c <FLASH_OB_UserConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d013      	beq.n	8000ffe <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d00d      	beq.n	8000ffe <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69d8      	ldr	r0, [r3, #28]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a19      	ldr	r1, [r3, #32]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f000 fa34 	bl	800145c <FLASH_OB_PCROPConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00c      	beq.n	8001024 <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f000 fb1b 	bl	8001650 <FLASH_OB_SecMemConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fb43 	bl	80016c0 <FLASH_OB_BootLockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_FLASHEx_OBProgram+0x11c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]

  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000020 	.word	0x20000020

08001058 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2206      	movs	r2, #6
 8001064:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_FLASHEx_OBGetConfig+0x2e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d007      	beq.n	8001086 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d10f      	bne.n	80010a6 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6858      	ldr	r0, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f103 0108 	add.w	r1, r3, #8
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	330c      	adds	r3, #12
 80010a0:	461a      	mov	r2, r3
 80010a2:	f000 fb61 	bl	8001768 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80010a6:	f000 fbb1 	bl	800180c <FLASH_OB_GetRDP>
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80010b0:	f000 fbc4 	bl	800183c <FLASH_OB_GetUser>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d003      	beq.n	80010ca <HAL_FLASHEx_OBGetConfig+0x72>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d110      	bne.n	80010ec <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f043 0208 	orr.w	r2, r3, #8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f103 001c 	add.w	r0, r3, #28
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f103 0120 	add.w	r1, r3, #32
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3324      	adds	r3, #36	; 0x24
 80010e6:	461a      	mov	r2, r3
 80010e8:	f000 fbbc 	bl	8001864 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 0210 	orr.w	r2, r3, #16
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 80010f8:	f000 fb28 	bl	800174c <FLASH_OB_GetBootLock>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	2b01      	cmp	r3, #1
 8001108:	d003      	beq.n	8001112 <HAL_FLASHEx_OBGetConfig+0xba>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10d      	bne.n	800112e <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f043 0220 	orr.w	r2, r3, #32
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f000 faf1 	bl	8001710 <FLASH_OB_GetSecMem>
  }
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f7ff fea2 	bl	8000e90 <FLASH_WaitForLastOperation>
 800114c:	4603      	mov	r3, r0
 800114e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d132      	bne.n	80011bc <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	4919      	ldr	r1, [pc, #100]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	4313      	orrs	r3, r2
 8001166:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001168:	e01c      	b.n	80011a4 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	041a      	lsls	r2, r3, #16
 8001174:	4914      	ldr	r1, [pc, #80]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	4313      	orrs	r3, r2
 800117a:	630b      	str	r3, [r1, #48]	; 0x30
 800117c:	e012      	b.n	80011a4 <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d106      	bne.n	8001192 <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4313      	orrs	r3, r2
 800118e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001190:	e008      	b.n	80011a4 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d105      	bne.n	80011a4 <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	041a      	lsls	r2, r3, #16
 800119c:	490a      	ldr	r1, [pc, #40]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <FLASH_OB_WRPConfig+0x90>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b4:	f7ff fe6c 	bl	8000e90 <FLASH_WaitForLastOperation>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000

080011cc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f7ff fe5a 	bl	8000e90 <FLASH_WaitForLastOperation>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d113      	bne.n	800120e <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <FLASH_OB_RDPConfig+0x4c>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <FLASH_OB_RDPConfig+0x4c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <FLASH_OB_RDPConfig+0x4c>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <FLASH_OB_RDPConfig+0x4c>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	f7ff fe43 	bl	8000e90 <FLASH_WaitForLastOperation>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40022000 	.word	0x40022000

0800121c <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800122e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001232:	f7ff fe2d 	bl	8000e90 <FLASH_WaitForLastOperation>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8105 	bne.w	800144c <FLASH_OB_UserConfig+0x230>
      optr_reg_val |= (UserConfig & FLASH_OPTR_PB4_PUPEN);
      optr_reg_mask |= FLASH_OPTR_PB4_PUPEN;
    }
#endif /* FLASH_OPTR_PB4_PUPEN */

    if ((UserType & OB_USER_BOR_LEV) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d009      	beq.n	8001260 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4313      	orrs	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800125e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d009      	beq.n	800129c <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800129a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d009      	beq.n	8001314 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001312:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4313      	orrs	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001330:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134e:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800136c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4313      	orrs	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a8:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c6:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4313      	orrs	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013e4:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001402:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001420:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <FLASH_OB_UserConfig+0x23c>)
 8001424:	6a1a      	ldr	r2, [r3, #32]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	490a      	ldr	r1, [pc, #40]	; (8001458 <FLASH_OB_UserConfig+0x23c>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4313      	orrs	r3, r2
 8001432:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <FLASH_OB_UserConfig+0x23c>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <FLASH_OB_UserConfig+0x23c>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001444:	f7ff fd24 	bl	8000e90 <FLASH_WaitForLastOperation>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f7ff fd10 	bl	8000e90 <FLASH_WaitForLastOperation>
 8001470:	4603      	mov	r3, r0
 8001472:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8001474:	7ffb      	ldrb	r3, [r7, #31]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 80da 	bne.w	8001630 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800147c:	4b6f      	ldr	r3, [pc, #444]	; (800163c <FLASH_OB_PCROPConfig+0x1e0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d114      	bne.n	80014b2 <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8001488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800148c:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <FLASH_OB_PCROPConfig+0x1e4>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	4293      	cmp	r3, r2
 8001498:	d008      	beq.n	80014ac <FLASH_OB_PCROPConfig+0x50>
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <FLASH_OB_PCROPConfig+0x1e4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	085a      	lsrs	r2, r3, #1
 80014a2:	4b68      	ldr	r3, [pc, #416]	; (8001644 <FLASH_OB_PCROPConfig+0x1e8>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014aa:	e000      	b.n	80014ae <FLASH_OB_PCROPConfig+0x52>
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <FLASH_OB_PCROPConfig+0x1ec>)
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e013      	b.n	80014da <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <FLASH_OB_PCROPConfig+0x1e4>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d008      	beq.n	80014d0 <FLASH_OB_PCROPConfig+0x74>
 80014be:	4b60      	ldr	r3, [pc, #384]	; (8001640 <FLASH_OB_PCROPConfig+0x1e4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	029b      	lsls	r3, r3, #10
 80014c4:	085a      	lsrs	r2, r3, #1
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <FLASH_OB_PCROPConfig+0x1e8>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014ce:	e000      	b.n	80014d2 <FLASH_OB_PCROPConfig+0x76>
 80014d0:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <FLASH_OB_PCROPConfig+0x1ec>)
 80014d2:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 80014d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014d8:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d147      	bne.n	8001576 <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11e      	bne.n	800152e <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80014fa:	4b54      	ldr	r3, [pc, #336]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001506:	4951      	ldr	r1, [pc, #324]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001524:	4949      	ldr	r1, [pc, #292]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	628b      	str	r3, [r1, #40]	; 0x28
 800152c:	e06a      	b.n	8001604 <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d165      	bne.n	8001604 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800154a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800154e:	493f      	ldr	r1, [pc, #252]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	648b      	str	r3, [r1, #72]	; 0x48
 8001574:	e046      	b.n	8001604 <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d11e      	bne.n	80015be <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001592:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001596:	492d      	ldr	r1, [pc, #180]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015b4:	4925      	ldr	r1, [pc, #148]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	628b      	str	r3, [r1, #40]	; 0x28
 80015bc:	e022      	b.n	8001604 <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d11d      	bne.n	8001604 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015fc:	4913      	ldr	r1, [pc, #76]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 8001614:	4313      	orrs	r3, r2
 8001616:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <FLASH_OB_PCROPConfig+0x1f0>)
 800161e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001622:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001628:	f7ff fc32 	bl	8000e90 <FLASH_WaitForLastOperation>
 800162c:	4603      	mov	r3, r0
 800162e:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8001630:	7ffb      	ldrb	r3, [r7, #31]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010000 	.word	0x40010000
 8001640:	1fff75e0 	.word	0x1fff75e0
 8001644:	01fffe00 	.word	0x01fffe00
 8001648:	08040000 	.word	0x08040000
 800164c:	40022000 	.word	0x40022000

08001650 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165e:	f7ff fc17 	bl	8000e90 <FLASH_WaitForLastOperation>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d122      	bne.n	80016b2 <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d108      	bne.n	8001684 <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800167a:	4910      	ldr	r1, [pc, #64]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	670b      	str	r3, [r1, #112]	; 0x70
 8001682:	e00a      	b.n	800169a <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <FLASH_OB_SecMemConfig+0x6c>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016aa:	f7ff fbf1 	bl	8000e90 <FLASH_WaitForLastOperation>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000

080016c0 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016cc:	f7ff fbe0 	bl	8000e90 <FLASH_WaitForLastOperation>
 80016d0:	4603      	mov	r3, r0
 80016d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d113      	bne.n	8001702 <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <FLASH_OB_BootLockConfig+0x4c>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016e2:	490a      	ldr	r1, [pc, #40]	; (800170c <FLASH_OB_BootLockConfig+0x4c>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <FLASH_OB_BootLockConfig+0x4c>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <FLASH_OB_BootLockConfig+0x4c>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fa:	f7ff fbc9 	bl	8000e90 <FLASH_WaitForLastOperation>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000

08001710 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <FLASH_OB_GetSecMem+0x38>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	b2da      	uxtb	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 800172a:	e007      	b.n	800173c <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d104      	bne.n	800173c <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <FLASH_OB_GetSecMem+0x38>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	b2da      	uxtb	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40022000 	.word	0x40022000

0800174c <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <FLASH_OB_GetBootLock+0x18>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10d      	bne.n	8001796 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8001794:	e031      	b.n	80017fa <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10d      	bne.n	80017b8 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
}
 80017b6:	e020      	b.n	80017fa <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d10d      	bne.n	80017da <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	e00f      	b.n	80017fa <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d10c      	bne.n	80017fa <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 80017e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <FLASH_OB_GetWRP+0xa0>)
 80017ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <FLASH_OB_GetRDP+0x2c>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2baa      	cmp	r3, #170	; 0xaa
 800181e:	d004      	beq.n	800182a <FLASH_OB_GetRDP+0x1e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2bcc      	cmp	r3, #204	; 0xcc
 8001824:	d001      	beq.n	800182a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8001826:	23bb      	movs	r3, #187	; 0xbb
 8001828:	e000      	b.n	800182c <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 800182a:	687b      	ldr	r3, [r7, #4]
  }
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40022000 	.word	0x40022000

0800183c <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <FLASH_OB_GetUser+0x24>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800184e:	607b      	str	r3, [r7, #4]

  return user_config;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000

08001864 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001870:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <FLASH_OB_GetPCROP+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d114      	bne.n	80018a6 <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 800187c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001880:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <FLASH_OB_GetPCROP+0x180>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	4293      	cmp	r3, r2
 800188c:	d008      	beq.n	80018a0 <FLASH_OB_GetPCROP+0x3c>
 800188e:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <FLASH_OB_GetPCROP+0x180>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	085a      	lsrs	r2, r3, #1
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <FLASH_OB_GetPCROP+0x184>)
 8001898:	4013      	ands	r3, r2
 800189a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800189e:	e000      	b.n	80018a2 <FLASH_OB_GetPCROP+0x3e>
 80018a0:	4b52      	ldr	r3, [pc, #328]	; (80019ec <FLASH_OB_GetPCROP+0x188>)
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	e013      	b.n	80018ce <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80018a6:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <FLASH_OB_GetPCROP+0x180>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d008      	beq.n	80018c4 <FLASH_OB_GetPCROP+0x60>
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <FLASH_OB_GetPCROP+0x180>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	085a      	lsrs	r2, r3, #1
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <FLASH_OB_GetPCROP+0x184>)
 80018bc:	4013      	ands	r3, r2
 80018be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80018c2:	e000      	b.n	80018c6 <FLASH_OB_GetPCROP+0x62>
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <FLASH_OB_GetPCROP+0x188>)
 80018c6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 80018c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018cc:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d139      	bne.n	800194e <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d116      	bne.n	8001914 <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018ee:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001904:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e055      	b.n	80019c0 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d14f      	bne.n	80019c0 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001928:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800193e:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e038      	b.n	80019c0 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d116      	bne.n	8001988 <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001962:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	00da      	lsls	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	441a      	add	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001978:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	00da      	lsls	r2, r3, #3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e01b      	b.n	80019c0 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d115      	bne.n	80019c0 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800199c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	00da      	lsls	r2, r3, #3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	441a      	add	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019b2:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	441a      	add	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <FLASH_OB_GetPCROP+0x18c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010000 	.word	0x40010000
 80019e4:	1fff75e0 	.word	0x1fff75e0
 80019e8:	01fffe00 	.word	0x01fffe00
 80019ec:	08040000 	.word	0x08040000
 80019f0:	40022000 	.word	0x40022000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a02:	e15a      	b.n	8001cba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 814c 	beq.w	8001cb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d005      	beq.n	8001a34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d130      	bne.n	8001a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 0201 	and.w	r2, r3, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d017      	beq.n	8001ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d123      	bne.n	8001b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0203 	and.w	r2, r3, #3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80a6 	beq.w	8001cb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <HAL_GPIO_Init+0x2e4>)
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6c:	4a5a      	ldr	r2, [pc, #360]	; (8001cd8 <HAL_GPIO_Init+0x2e4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6613      	str	r3, [r2, #96]	; 0x60
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_GPIO_Init+0x2e4>)
 8001b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b80:	4a56      	ldr	r2, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x2e8>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001baa:	d01f      	beq.n	8001bec <HAL_GPIO_Init+0x1f8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_GPIO_Init+0x2ec>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d019      	beq.n	8001be8 <HAL_GPIO_Init+0x1f4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x2f0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_GPIO_Init+0x1f0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_GPIO_Init+0x2f4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00d      	beq.n	8001be0 <HAL_GPIO_Init+0x1ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_GPIO_Init+0x2f8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x1e8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_GPIO_Init+0x2fc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_GPIO_Init+0x1e4>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e00a      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001bd8:	2306      	movs	r3, #6
 8001bda:	e008      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1fa>
 8001bec:	2300      	movs	r3, #0
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfe:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x2e8>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c30:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c5a:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f ae9d 	bne.w	8001a04 <HAL_GPIO_Init+0x10>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	48001400 	.word	0x48001400
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d141      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d06:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d131      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d14:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2c:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2232      	movs	r2, #50	; 0x32
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	3301      	adds	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4a:	e002      	b.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d102      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f2      	bne.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d72:	d158      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e057      	b.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d88:	e04d      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d90:	d141      	bne.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9e:	d131      	bne.n	8001e04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2232      	movs	r2, #50	; 0x32
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9b      	lsrs	r3, r3, #18
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd6:	e002      	b.n	8001dde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d102      	bne.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f2      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfe:	d112      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e011      	b.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e14:	e007      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40007000 	.word	0x40007000
 8001e38:	20000014 	.word	0x20000014
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e2fe      	b.n	8002450 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5e:	4b97      	ldr	r3, [pc, #604]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e68:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3e>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_OscConfig+0x44>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e2d9      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x74>
 8001ea6:	4b85      	ldr	r3, [pc, #532]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a84      	ldr	r2, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7b      	ldr	r2, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a74      	ldr	r2, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fece 	bl	8000c98 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe feca 	bl	8000c98 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e29e      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f12:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe feba 	bl	8000c98 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe feb6 	bl	8000c98 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e28a      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x136>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_OscConfig+0x13c>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d11f      	bne.n	8001fbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x154>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e25d      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	4946      	ldr	r1, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fe27 	bl	8000c00 <HAL_InitTick>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d043      	beq.n	8002040 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e249      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fe62 	bl	8000c98 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fe5e 	bl	8000c98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e232      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	061b      	lsls	r3, r3, #24
 8002004:	492d      	ldr	r1, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e01a      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe3e 	bl	8000c98 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe fe3a 	bl	8000c98 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e20e      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1e0>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d041      	beq.n	80020d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01c      	beq.n	8002090 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe fe17 	bl	8000c98 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7fe fe13 	bl	8000c98 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1e7      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ef      	beq.n	800206e <HAL_RCC_OscConfig+0x22e>
 800208e:	e020      	b.n	80020d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x27c>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fdfa 	bl	8000c98 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a6:	e00d      	b.n	80020c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe fdf6 	bl	8000c98 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d906      	bls.n	80020c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1ca      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ea      	bne.n	80020a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80a6 	beq.w	800222c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e4:	4b84      	ldr	r3, [pc, #528]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2b4>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b7c      	ldr	r3, [pc, #496]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002116:	4b79      	ldr	r3, [pc, #484]	; (80022fc <HAL_RCC_OscConfig+0x4bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x4bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a75      	ldr	r2, [pc, #468]	; (80022fc <HAL_RCC_OscConfig+0x4bc>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fdb3 	bl	8000c98 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fdaf 	bl	8000c98 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e183      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <HAL_RCC_OscConfig+0x4bc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d108      	bne.n	800216e <HAL_RCC_OscConfig+0x32e>
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216c:	e024      	b.n	80021b8 <HAL_RCC_OscConfig+0x378>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d110      	bne.n	8002198 <HAL_RCC_OscConfig+0x358>
 8002176:	4b60      	ldr	r3, [pc, #384]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002196:	e00f      	b.n	80021b8 <HAL_RCC_OscConfig+0x378>
 8002198:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d016      	beq.n	80021ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe fd6a 	bl	8000c98 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fd66 	bl	8000c98 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e138      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ed      	beq.n	80021c8 <HAL_RCC_OscConfig+0x388>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fd53 	bl	8000c98 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fd4f 	bl	8000c98 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e121      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ed      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d03c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7fe fd22 	bl	8000c98 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002258:	f7fe fd1e 	bl	8000c98 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0f2      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800226c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCC_OscConfig+0x418>
 8002278:	e01b      	b.n	80022b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 800227c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe fd05 	bl	8000c98 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002292:	f7fe fd01 	bl	8000c98 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0d5      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ef      	bne.n	8002292 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80c9 	beq.w	800244e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	f000 8083 	beq.w	80023d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d15e      	bne.n	8002390 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fcdb 	bl	8000c98 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	e00c      	b.n	8002300 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fcd7 	bl	8000c98 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d905      	bls.n	8002300 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0ab      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ec      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_RCC_OscConfig+0x61c>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6a11      	ldr	r1, [r2, #32]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231c:	3a01      	subs	r2, #1
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002326:	0212      	lsls	r2, r2, #8
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800232e:	0852      	lsrs	r2, r2, #1
 8002330:	3a01      	subs	r2, #1
 8002332:	0552      	lsls	r2, r2, #21
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	0652      	lsls	r2, r2, #25
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002346:	06d2      	lsls	r2, r2, #27
 8002348:	430a      	orrs	r2, r1
 800234a:	4943      	ldr	r1, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 800234c:	4313      	orrs	r3, r2
 800234e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a40      	ldr	r2, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800235c:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc96 	bl	8000c98 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fc92 	bl	8000c98 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e066      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x530>
 800238e:	e05e      	b.n	800244e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a30      	ldr	r2, [pc, #192]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 8002396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fc7c 	bl	8000c98 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fc78 	bl	8000c98 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04c      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4924      	ldr	r1, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x620>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
 80023ce:	e03e      	b.n	800244e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e039      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_OscConfig+0x618>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d12c      	bne.n	800244a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	3b01      	subs	r3, #1
 80023fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d123      	bne.n	800244a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d11b      	bne.n	800244a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d113      	bne.n	800244a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d109      	bne.n	800244a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	019f800c 	.word	0x019f800c
 8002460:	feeefffc 	.word	0xfeeefffc

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e11e      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b8e      	ldr	r3, [pc, #568]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	498c      	ldr	r1, [pc, #560]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e106      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d073      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d129      	bne.n	8002514 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c0:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0f4      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024d0:	f000 f99e 	bl	8002810 <RCC_GetSysClockFreqFromPLLSource>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <HAL_RCC_ClockConfig+0x268>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d93f      	bls.n	800255e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d033      	beq.n	800255e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12f      	bne.n	800255e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002506:	4a70      	ldr	r2, [pc, #448]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e024      	b.n	800255e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0c6      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0be      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800253c:	f000 f8ce 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4a61      	ldr	r2, [pc, #388]	; (80026cc <HAL_RCC_ClockConfig+0x268>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d909      	bls.n	800255e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002552:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4957      	ldr	r1, [pc, #348]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002570:	f7fe fb92 	bl	8000c98 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	e00a      	b.n	800258e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7fe fb8e 	bl	8000c98 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e095      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 020c 	and.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1eb      	bne.n	8002578 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025d0:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025d8:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4936      	ldr	r1, [pc, #216]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e008      	b.n	8002606 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002604:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d21d      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 020f 	bic.w	r2, r3, #15
 800261c:	4929      	ldr	r1, [pc, #164]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002624:	f7fe fb38 	bl	8000c98 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fb34 	bl	8000c98 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e03b      	b.n	80026ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d1ed      	bne.n	800262c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4917      	ldr	r1, [pc, #92]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490f      	ldr	r1, [pc, #60]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268e:	f000 f825 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490c      	ldr	r1, [pc, #48]	; (80026d0 <HAL_RCC_ClockConfig+0x26c>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x270>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe faa4 	bl	8000c00 <HAL_InitTick>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	04c4b400 	.word	0x04c4b400
 80026d0:	08003e1c 	.word	0x08003e1c
 80026d4:	20000014 	.word	0x20000014
 80026d8:	20000018 	.word	0x20000018

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	e047      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e03e      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d136      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3301      	adds	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d10c      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273a:	68d2      	ldr	r2, [r2, #12]
 800273c:	0a12      	lsrs	r2, r2, #8
 800273e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
      break;
 8002748:	e00c      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800274a:	4a13      	ldr	r2, [pc, #76]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	0a12      	lsrs	r2, r2, #8
 8002758:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0e5b      	lsrs	r3, r3, #25
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	3301      	adds	r3, #1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e001      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002784:	693b      	ldr	r3, [r7, #16]
}
 8002786:	4618      	mov	r0, r3
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08003e2c 	.word	0x08003e2c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e8:	f7ff ffda 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08003e2c 	.word	0x08003e2c

08002810 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3301      	adds	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d10c      	bne.n	800284e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800283e:	68d2      	ldr	r2, [r2, #12]
 8002840:	0a12      	lsrs	r2, r2, #8
 8002842:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
    break;
 800284c:	e00c      	b.n	8002868 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	0a12      	lsrs	r2, r2, #8
 800285c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    break;
 8002866:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0e5b      	lsrs	r3, r3, #25
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	007a1200 	.word	0x007a1200
 8002898:	00f42400 	.word	0x00f42400

0800289c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a8:	2300      	movs	r3, #0
 80028aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8098 	beq.w	80029ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4a3f      	ldr	r2, [pc, #252]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f2:	f7fe f9d1 	bl	8000c98 <HAL_GetTick>
 80028f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f8:	e009      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe f9cd 	bl	8000c98 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d902      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	74fb      	strb	r3, [r7, #19]
        break;
 800290c:	e005      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ef      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d159      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01e      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe f98d 	bl	8000c98 <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002980:	e00b      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f989 	bl	8000c98 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d902      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	74fb      	strb	r3, [r7, #19]
            break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ec      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c4:	e008      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	74bb      	strb	r3, [r7, #18]
 80029ca:	e005      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d8:	7c7b      	ldrb	r3, [r7, #17]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4ba7      	ldr	r3, [pc, #668]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	4aa6      	ldr	r2, [pc, #664]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f6:	4ba1      	ldr	r3, [pc, #644]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	499d      	ldr	r1, [pc, #628]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a18:	4b98      	ldr	r3, [pc, #608]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f023 020c 	bic.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4995      	ldr	r1, [pc, #596]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3a:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	498c      	ldr	r1, [pc, #560]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a5c:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	4984      	ldr	r1, [pc, #528]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	497b      	ldr	r1, [pc, #492]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	4973      	ldr	r1, [pc, #460]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac2:	4b6e      	ldr	r3, [pc, #440]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	496a      	ldr	r1, [pc, #424]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4962      	ldr	r1, [pc, #392]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	4959      	ldr	r1, [pc, #356]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b28:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	4951      	ldr	r1, [pc, #324]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4948      	ldr	r1, [pc, #288]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4940      	ldr	r1, [pc, #256]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba4:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	4932      	ldr	r1, [pc, #200]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	4916      	ldr	r1, [pc, #88]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4908      	ldr	r1, [pc, #32]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c76:	60d3      	str	r3, [r2, #12]
 8002c78:	e002      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4926      	ldr	r1, [pc, #152]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	4918      	ldr	r1, [pc, #96]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d28:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e042      	b.n	8002dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fd fe43 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2224      	movs	r2, #36	; 0x24
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fbb2 	bl	80034ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8b3 	bl	8002ef4 <UART_SetConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01b      	b.n	8002dd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fc31 	bl	8003630 <UART_CheckIdleState>
 8002dce:	4603      	mov	r3, r0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d17b      	bne.n	8002eea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_UART_Transmit+0x26>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e074      	b.n	8002eec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2221      	movs	r2, #33	; 0x21
 8002e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e12:	f7fd ff41 	bl	8000c98 <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d108      	bne.n	8002e44 <HAL_UART_Transmit+0x6c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e003      	b.n	8002e4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e4c:	e030      	b.n	8002eb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fc93 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e03d      	b.n	8002eec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10b      	bne.n	8002e8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e007      	b.n	8002e9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1c8      	bne.n	8002e4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fc5c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e006      	b.n	8002eec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef8:	b08c      	sub	sp, #48	; 0x30
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4baa      	ldr	r3, [pc, #680]	; (80031cc <UART_SetConfig+0x2d8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <UART_SetConfig+0x2dc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f023 010f 	bic.w	r1, r3, #15
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a90      	ldr	r2, [pc, #576]	; (80031d4 <UART_SetConfig+0x2e0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d125      	bne.n	8002fe4 <UART_SetConfig+0xf0>
 8002f98:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <UART_SetConfig+0x2e4>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d81a      	bhi.n	8002fdc <UART_SetConfig+0xe8>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0xb8>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcd 	.word	0x08002fcd
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fd5 	.word	0x08002fd5
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc2:	e116      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fca:	e112      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd2:	e10e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fda:	e10a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fe2:	e106      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <UART_SetConfig+0x2e8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d138      	bne.n	8003060 <UART_SetConfig+0x16c>
 8002fee:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <UART_SetConfig+0x2e4>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d82d      	bhi.n	8003058 <UART_SetConfig+0x164>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0x110>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	08003059 	.word	0x08003059
 800300c:	08003059 	.word	0x08003059
 8003010:	08003059 	.word	0x08003059
 8003014:	08003049 	.word	0x08003049
 8003018:	08003059 	.word	0x08003059
 800301c:	08003059 	.word	0x08003059
 8003020:	08003059 	.word	0x08003059
 8003024:	08003041 	.word	0x08003041
 8003028:	08003059 	.word	0x08003059
 800302c:	08003059 	.word	0x08003059
 8003030:	08003059 	.word	0x08003059
 8003034:	08003051 	.word	0x08003051
 8003038:	2300      	movs	r3, #0
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303e:	e0d8      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003040:	2302      	movs	r3, #2
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003046:	e0d4      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003048:	2304      	movs	r3, #4
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e0d0      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003050:	2308      	movs	r3, #8
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003056:	e0cc      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e0c8      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <UART_SetConfig+0x2ec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d125      	bne.n	80030b6 <UART_SetConfig+0x1c2>
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <UART_SetConfig+0x2e4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003074:	2b30      	cmp	r3, #48	; 0x30
 8003076:	d016      	beq.n	80030a6 <UART_SetConfig+0x1b2>
 8003078:	2b30      	cmp	r3, #48	; 0x30
 800307a:	d818      	bhi.n	80030ae <UART_SetConfig+0x1ba>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d00a      	beq.n	8003096 <UART_SetConfig+0x1a2>
 8003080:	2b20      	cmp	r3, #32
 8003082:	d814      	bhi.n	80030ae <UART_SetConfig+0x1ba>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <UART_SetConfig+0x19a>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d008      	beq.n	800309e <UART_SetConfig+0x1aa>
 800308c:	e00f      	b.n	80030ae <UART_SetConfig+0x1ba>
 800308e:	2300      	movs	r3, #0
 8003090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003094:	e0ad      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003096:	2302      	movs	r3, #2
 8003098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800309c:	e0a9      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800309e:	2304      	movs	r3, #4
 80030a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a4:	e0a5      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030a6:	2308      	movs	r3, #8
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ac:	e0a1      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030ae:	2310      	movs	r3, #16
 80030b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b4:	e09d      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <UART_SetConfig+0x2f0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d125      	bne.n	800310c <UART_SetConfig+0x218>
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <UART_SetConfig+0x2e4>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030ca:	2bc0      	cmp	r3, #192	; 0xc0
 80030cc:	d016      	beq.n	80030fc <UART_SetConfig+0x208>
 80030ce:	2bc0      	cmp	r3, #192	; 0xc0
 80030d0:	d818      	bhi.n	8003104 <UART_SetConfig+0x210>
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d00a      	beq.n	80030ec <UART_SetConfig+0x1f8>
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d814      	bhi.n	8003104 <UART_SetConfig+0x210>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <UART_SetConfig+0x1f0>
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d008      	beq.n	80030f4 <UART_SetConfig+0x200>
 80030e2:	e00f      	b.n	8003104 <UART_SetConfig+0x210>
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e082      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f2:	e07e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fa:	e07a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003102:	e076      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310a:	e072      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <UART_SetConfig+0x2f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12a      	bne.n	800316c <UART_SetConfig+0x278>
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <UART_SetConfig+0x2e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003124:	d01a      	beq.n	800315c <UART_SetConfig+0x268>
 8003126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312a:	d81b      	bhi.n	8003164 <UART_SetConfig+0x270>
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d00c      	beq.n	800314c <UART_SetConfig+0x258>
 8003132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003136:	d815      	bhi.n	8003164 <UART_SetConfig+0x270>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <UART_SetConfig+0x250>
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d008      	beq.n	8003154 <UART_SetConfig+0x260>
 8003142:	e00f      	b.n	8003164 <UART_SetConfig+0x270>
 8003144:	2300      	movs	r3, #0
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314a:	e052      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800314c:	2302      	movs	r3, #2
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003152:	e04e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003154:	2304      	movs	r3, #4
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315a:	e04a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800315c:	2308      	movs	r3, #8
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003162:	e046      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003164:	2310      	movs	r3, #16
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316a:	e042      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <UART_SetConfig+0x2dc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d13a      	bne.n	80031ec <UART_SetConfig+0x2f8>
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <UART_SetConfig+0x2e4>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003180:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003184:	d01a      	beq.n	80031bc <UART_SetConfig+0x2c8>
 8003186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318a:	d81b      	bhi.n	80031c4 <UART_SetConfig+0x2d0>
 800318c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003190:	d00c      	beq.n	80031ac <UART_SetConfig+0x2b8>
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d815      	bhi.n	80031c4 <UART_SetConfig+0x2d0>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <UART_SetConfig+0x2b0>
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d008      	beq.n	80031b4 <UART_SetConfig+0x2c0>
 80031a2:	e00f      	b.n	80031c4 <UART_SetConfig+0x2d0>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031aa:	e022      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b2:	e01e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031b4:	2304      	movs	r3, #4
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ba:	e01a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031bc:	2308      	movs	r3, #8
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c2:	e016      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031c4:	2310      	movs	r3, #16
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ca:	e012      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031cc:	cfff69f3 	.word	0xcfff69f3
 80031d0:	40008000 	.word	0x40008000
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40004400 	.word	0x40004400
 80031e0:	40004800 	.word	0x40004800
 80031e4:	40004c00 	.word	0x40004c00
 80031e8:	40005000 	.word	0x40005000
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4aae      	ldr	r2, [pc, #696]	; (80034b0 <UART_SetConfig+0x5bc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f040 8097 	bne.w	800332c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003202:	2b08      	cmp	r3, #8
 8003204:	d823      	bhi.n	800324e <UART_SetConfig+0x35a>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <UART_SetConfig+0x318>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003231 	.word	0x08003231
 8003210:	0800324f 	.word	0x0800324f
 8003214:	08003239 	.word	0x08003239
 8003218:	0800324f 	.word	0x0800324f
 800321c:	0800323f 	.word	0x0800323f
 8003220:	0800324f 	.word	0x0800324f
 8003224:	0800324f 	.word	0x0800324f
 8003228:	0800324f 	.word	0x0800324f
 800322c:	08003247 	.word	0x08003247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7ff fac2 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8003234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003236:	e010      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003238:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <UART_SetConfig+0x5c0>)
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800323c:	e00d      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323e:	f7ff fa4d 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003242:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003244:	e009      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800324c:	e005      	b.n	800325a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8130 	beq.w	80034c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	4a94      	ldr	r2, [pc, #592]	; (80034b8 <UART_SetConfig+0x5c4>)
 8003268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800326c:	461a      	mov	r2, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	fbb3 f3f2 	udiv	r3, r3, r2
 8003274:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	d305      	bcc.n	8003292 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	d903      	bls.n	800329a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003298:	e113      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2200      	movs	r2, #0
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	60fa      	str	r2, [r7, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	4a84      	ldr	r2, [pc, #528]	; (80034b8 <UART_SetConfig+0x5c4>)
 80032a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032bc:	f7fc ffb4 	bl	8000228 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	020b      	lsls	r3, r1, #8
 80032d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032d6:	0202      	lsls	r2, r0, #8
 80032d8:	6979      	ldr	r1, [r7, #20]
 80032da:	6849      	ldr	r1, [r1, #4]
 80032dc:	0849      	lsrs	r1, r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	460c      	mov	r4, r1
 80032e2:	4605      	mov	r5, r0
 80032e4:	eb12 0804 	adds.w	r8, r2, r4
 80032e8:	eb43 0905 	adc.w	r9, r3, r5
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	469a      	mov	sl, r3
 80032f4:	4693      	mov	fp, r2
 80032f6:	4652      	mov	r2, sl
 80032f8:	465b      	mov	r3, fp
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fc ff93 	bl	8000228 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4613      	mov	r3, r2
 8003308:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003310:	d308      	bcc.n	8003324 <UART_SetConfig+0x430>
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003318:	d204      	bcs.n	8003324 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e0ce      	b.n	80034c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800332a:	e0ca      	b.n	80034c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003334:	d166      	bne.n	8003404 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800333a:	2b08      	cmp	r3, #8
 800333c:	d827      	bhi.n	800338e <UART_SetConfig+0x49a>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x450>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7ff fa26 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7ff fa38 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <UART_SetConfig+0x5c0>)
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7ff f9ad 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8090 	beq.w	80034c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	4a44      	ldr	r2, [pc, #272]	; (80034b8 <UART_SetConfig+0x5c4>)
 80033a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	441a      	add	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	d916      	bls.n	80033fc <UART_SetConfig+0x508>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d212      	bcs.n	80033fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	8bfb      	ldrh	r3, [r7, #30]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	8bfa      	ldrh	r2, [r7, #30]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e062      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003402:	e05e      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003408:	2b08      	cmp	r3, #8
 800340a:	d828      	bhi.n	800345e <UART_SetConfig+0x56a>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <UART_SetConfig+0x520>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003439 	.word	0x08003439
 8003418:	08003441 	.word	0x08003441
 800341c:	08003449 	.word	0x08003449
 8003420:	0800345f 	.word	0x0800345f
 8003424:	0800344f 	.word	0x0800344f
 8003428:	0800345f 	.word	0x0800345f
 800342c:	0800345f 	.word	0x0800345f
 8003430:	0800345f 	.word	0x0800345f
 8003434:	08003457 	.word	0x08003457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003438:	f7ff f9be 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800343e:	e014      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7ff f9d0 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003446:	e010      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <UART_SetConfig+0x5c0>)
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800344c:	e00d      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7ff f945 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003452:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003454:	e009      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800345c:	e005      	b.n	800346a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003468:	bf00      	nop
    }

    if (pclk != 0U)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d028      	beq.n	80034c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <UART_SetConfig+0x5c4>)
 8003476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800347a:	461a      	mov	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	d910      	bls.n	80034bc <UART_SetConfig+0x5c8>
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d20c      	bcs.n	80034bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x5ce>
 80034ae:	bf00      	nop
 80034b0:	40008000 	.word	0x40008000
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	08003e34 	.word	0x08003e34
      }
      else
      {
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80034de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01a      	beq.n	8003602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ea:	d10a      	bne.n	8003602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b098      	sub	sp, #96	; 0x60
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003640:	f7fd fb2a 	bl	8000c98 <HAL_GetTick>
 8003644:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d12f      	bne.n	80036b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f88e 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d022      	beq.n	80036b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003682:	653b      	str	r3, [r7, #80]	; 0x50
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
 800368e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e063      	b.n	800377c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d149      	bne.n	8003756 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ca:	2200      	movs	r2, #0
 80036cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f857 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03c      	beq.n	8003756 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	623b      	str	r3, [r7, #32]
   return(result);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
 80036fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e6      	bne.n	80036dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3308      	adds	r3, #8
 8003714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	60fb      	str	r3, [r7, #12]
   return(result);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	64bb      	str	r3, [r7, #72]	; 0x48
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	617b      	str	r3, [r7, #20]
   return(result);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e012      	b.n	800377c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	; 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fa7b 	bl	8000c98 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f838 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f81e 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b095      	sub	sp, #84	; 0x54
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	643b      	str	r3, [r7, #64]	; 0x40
 8003886:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e6      	bne.n	8003866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e3      	bne.n	8003898 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d118      	bne.n	800390a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 0310 	bic.w	r3, r3, #16
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800391e:	bf00      	nop
 8003920:	3754      	adds	r7, #84	; 0x54
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UARTEx_DisableFifoMode+0x16>
 800393c:	2302      	movs	r3, #2
 800393e:	e027      	b.n	8003990 <HAL_UARTEx_DisableFifoMode+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800396e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e02d      	b.n	8003a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f84f 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e02d      	b.n	8003a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f811 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ab4:	e031      	b.n	8003b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aba:	2308      	movs	r3, #8
 8003abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	7b3a      	ldrb	r2, [r7, #12]
 8003ae2:	4911      	ldr	r1, [pc, #68]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	7b3a      	ldrb	r2, [r7, #12]
 8003aec:	490f      	ldr	r1, [pc, #60]	; (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	7b7a      	ldrb	r2, [r7, #13]
 8003b00:	4909      	ldr	r1, [pc, #36]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003b02:	5c8a      	ldrb	r2, [r1, r2]
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b08:	7b7a      	ldrb	r2, [r7, #13]
 8003b0a:	4908      	ldr	r1, [pc, #32]	; (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	08003e4c 	.word	0x08003e4c
 8003b2c:	08003e54 	.word	0x08003e54

08003b30 <_ZdlPvj>:
 8003b30:	f000 b800 	b.w	8003b34 <_ZdlPv>

08003b34 <_ZdlPv>:
 8003b34:	f000 b808 	b.w	8003b48 <free>

08003b38 <malloc>:
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <malloc+0xc>)
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f000 b82b 	b.w	8003b98 <_malloc_r>
 8003b42:	bf00      	nop
 8003b44:	2000008c 	.word	0x2000008c

08003b48 <free>:
 8003b48:	4b02      	ldr	r3, [pc, #8]	; (8003b54 <free+0xc>)
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	f000 b8f3 	b.w	8003d38 <_free_r>
 8003b52:	bf00      	nop
 8003b54:	2000008c 	.word	0x2000008c

08003b58 <sbrk_aligned>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4e0e      	ldr	r6, [pc, #56]	; (8003b94 <sbrk_aligned+0x3c>)
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	6831      	ldr	r1, [r6, #0]
 8003b60:	4605      	mov	r5, r0
 8003b62:	b911      	cbnz	r1, 8003b6a <sbrk_aligned+0x12>
 8003b64:	f000 f8ac 	bl	8003cc0 <_sbrk_r>
 8003b68:	6030      	str	r0, [r6, #0]
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 f8a7 	bl	8003cc0 <_sbrk_r>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d00a      	beq.n	8003b8c <sbrk_aligned+0x34>
 8003b76:	1cc4      	adds	r4, r0, #3
 8003b78:	f024 0403 	bic.w	r4, r4, #3
 8003b7c:	42a0      	cmp	r0, r4
 8003b7e:	d007      	beq.n	8003b90 <sbrk_aligned+0x38>
 8003b80:	1a21      	subs	r1, r4, r0
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 f89c 	bl	8003cc0 <_sbrk_r>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d101      	bne.n	8003b90 <sbrk_aligned+0x38>
 8003b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b90:	4620      	mov	r0, r4
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	20000150 	.word	0x20000150

08003b98 <_malloc_r>:
 8003b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	1ccd      	adds	r5, r1, #3
 8003b9e:	f025 0503 	bic.w	r5, r5, #3
 8003ba2:	3508      	adds	r5, #8
 8003ba4:	2d0c      	cmp	r5, #12
 8003ba6:	bf38      	it	cc
 8003ba8:	250c      	movcc	r5, #12
 8003baa:	2d00      	cmp	r5, #0
 8003bac:	4607      	mov	r7, r0
 8003bae:	db01      	blt.n	8003bb4 <_malloc_r+0x1c>
 8003bb0:	42a9      	cmp	r1, r5
 8003bb2:	d905      	bls.n	8003bc0 <_malloc_r+0x28>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	2600      	movs	r6, #0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c94 <_malloc_r+0xfc>
 8003bc4:	f000 f868 	bl	8003c98 <__malloc_lock>
 8003bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bcc:	461c      	mov	r4, r3
 8003bce:	bb5c      	cbnz	r4, 8003c28 <_malloc_r+0x90>
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f7ff ffc0 	bl	8003b58 <sbrk_aligned>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	4604      	mov	r4, r0
 8003bdc:	d155      	bne.n	8003c8a <_malloc_r+0xf2>
 8003bde:	f8d8 4000 	ldr.w	r4, [r8]
 8003be2:	4626      	mov	r6, r4
 8003be4:	2e00      	cmp	r6, #0
 8003be6:	d145      	bne.n	8003c74 <_malloc_r+0xdc>
 8003be8:	2c00      	cmp	r4, #0
 8003bea:	d048      	beq.n	8003c7e <_malloc_r+0xe6>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	4631      	mov	r1, r6
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	eb04 0903 	add.w	r9, r4, r3
 8003bf6:	f000 f863 	bl	8003cc0 <_sbrk_r>
 8003bfa:	4581      	cmp	r9, r0
 8003bfc:	d13f      	bne.n	8003c7e <_malloc_r+0xe6>
 8003bfe:	6821      	ldr	r1, [r4, #0]
 8003c00:	1a6d      	subs	r5, r5, r1
 8003c02:	4629      	mov	r1, r5
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7ff ffa7 	bl	8003b58 <sbrk_aligned>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d037      	beq.n	8003c7e <_malloc_r+0xe6>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	442b      	add	r3, r5
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	f8d8 3000 	ldr.w	r3, [r8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d038      	beq.n	8003c8e <_malloc_r+0xf6>
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	42a2      	cmp	r2, r4
 8003c20:	d12b      	bne.n	8003c7a <_malloc_r+0xe2>
 8003c22:	2200      	movs	r2, #0
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	e00f      	b.n	8003c48 <_malloc_r+0xb0>
 8003c28:	6822      	ldr	r2, [r4, #0]
 8003c2a:	1b52      	subs	r2, r2, r5
 8003c2c:	d41f      	bmi.n	8003c6e <_malloc_r+0xd6>
 8003c2e:	2a0b      	cmp	r2, #11
 8003c30:	d917      	bls.n	8003c62 <_malloc_r+0xca>
 8003c32:	1961      	adds	r1, r4, r5
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	6025      	str	r5, [r4, #0]
 8003c38:	bf18      	it	ne
 8003c3a:	6059      	strne	r1, [r3, #4]
 8003c3c:	6863      	ldr	r3, [r4, #4]
 8003c3e:	bf08      	it	eq
 8003c40:	f8c8 1000 	streq.w	r1, [r8]
 8003c44:	5162      	str	r2, [r4, r5]
 8003c46:	604b      	str	r3, [r1, #4]
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f104 060b 	add.w	r6, r4, #11
 8003c4e:	f000 f829 	bl	8003ca4 <__malloc_unlock>
 8003c52:	f026 0607 	bic.w	r6, r6, #7
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	1af2      	subs	r2, r6, r3
 8003c5a:	d0ae      	beq.n	8003bba <_malloc_r+0x22>
 8003c5c:	1b9b      	subs	r3, r3, r6
 8003c5e:	50a3      	str	r3, [r4, r2]
 8003c60:	e7ab      	b.n	8003bba <_malloc_r+0x22>
 8003c62:	42a3      	cmp	r3, r4
 8003c64:	6862      	ldr	r2, [r4, #4]
 8003c66:	d1dd      	bne.n	8003c24 <_malloc_r+0x8c>
 8003c68:	f8c8 2000 	str.w	r2, [r8]
 8003c6c:	e7ec      	b.n	8003c48 <_malloc_r+0xb0>
 8003c6e:	4623      	mov	r3, r4
 8003c70:	6864      	ldr	r4, [r4, #4]
 8003c72:	e7ac      	b.n	8003bce <_malloc_r+0x36>
 8003c74:	4634      	mov	r4, r6
 8003c76:	6876      	ldr	r6, [r6, #4]
 8003c78:	e7b4      	b.n	8003be4 <_malloc_r+0x4c>
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	e7cc      	b.n	8003c18 <_malloc_r+0x80>
 8003c7e:	230c      	movs	r3, #12
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4638      	mov	r0, r7
 8003c84:	f000 f80e 	bl	8003ca4 <__malloc_unlock>
 8003c88:	e797      	b.n	8003bba <_malloc_r+0x22>
 8003c8a:	6025      	str	r5, [r4, #0]
 8003c8c:	e7dc      	b.n	8003c48 <_malloc_r+0xb0>
 8003c8e:	605b      	str	r3, [r3, #4]
 8003c90:	deff      	udf	#255	; 0xff
 8003c92:	bf00      	nop
 8003c94:	2000014c 	.word	0x2000014c

08003c98 <__malloc_lock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	; (8003ca0 <__malloc_lock+0x8>)
 8003c9a:	f000 b84b 	b.w	8003d34 <__retarget_lock_acquire_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	20000290 	.word	0x20000290

08003ca4 <__malloc_unlock>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__malloc_unlock+0x8>)
 8003ca6:	f000 b846 	b.w	8003d36 <__retarget_lock_release_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000290 	.word	0x20000290

08003cb0 <memset>:
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <memset+0xa>
 8003cb8:	4770      	bx	lr
 8003cba:	f803 1b01 	strb.w	r1, [r3], #1
 8003cbe:	e7f9      	b.n	8003cb4 <memset+0x4>

08003cc0 <_sbrk_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4d06      	ldr	r5, [pc, #24]	; (8003cdc <_sbrk_r+0x1c>)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	4608      	mov	r0, r1
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	f7fc ff0e 	bl	8000aec <_sbrk>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_sbrk_r+0x1a>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_sbrk_r+0x1a>
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	2000028c 	.word	0x2000028c

08003ce0 <__errno>:
 8003ce0:	4b01      	ldr	r3, [pc, #4]	; (8003ce8 <__errno+0x8>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	2000008c 	.word	0x2000008c

08003cec <__libc_init_array>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4d0d      	ldr	r5, [pc, #52]	; (8003d24 <__libc_init_array+0x38>)
 8003cf0:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <__libc_init_array+0x3c>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	42a6      	cmp	r6, r4
 8003cfa:	d109      	bne.n	8003d10 <__libc_init_array+0x24>
 8003cfc:	4d0b      	ldr	r5, [pc, #44]	; (8003d2c <__libc_init_array+0x40>)
 8003cfe:	4c0c      	ldr	r4, [pc, #48]	; (8003d30 <__libc_init_array+0x44>)
 8003d00:	f000 f866 	bl	8003dd0 <_init>
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	2600      	movs	r6, #0
 8003d0a:	42a6      	cmp	r6, r4
 8003d0c:	d105      	bne.n	8003d1a <__libc_init_array+0x2e>
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d14:	4798      	blx	r3
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7ee      	b.n	8003cf8 <__libc_init_array+0xc>
 8003d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1e:	4798      	blx	r3
 8003d20:	3601      	adds	r6, #1
 8003d22:	e7f2      	b.n	8003d0a <__libc_init_array+0x1e>
 8003d24:	08003e64 	.word	0x08003e64
 8003d28:	08003e64 	.word	0x08003e64
 8003d2c:	08003e64 	.word	0x08003e64
 8003d30:	08003e6c 	.word	0x08003e6c

08003d34 <__retarget_lock_acquire_recursive>:
 8003d34:	4770      	bx	lr

08003d36 <__retarget_lock_release_recursive>:
 8003d36:	4770      	bx	lr

08003d38 <_free_r>:
 8003d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d044      	beq.n	8003dc8 <_free_r+0x90>
 8003d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d42:	9001      	str	r0, [sp, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f1a1 0404 	sub.w	r4, r1, #4
 8003d4a:	bfb8      	it	lt
 8003d4c:	18e4      	addlt	r4, r4, r3
 8003d4e:	f7ff ffa3 	bl	8003c98 <__malloc_lock>
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <_free_r+0x94>)
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	b933      	cbnz	r3, 8003d68 <_free_r+0x30>
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	6014      	str	r4, [r2, #0]
 8003d5e:	b003      	add	sp, #12
 8003d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d64:	f7ff bf9e 	b.w	8003ca4 <__malloc_unlock>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d908      	bls.n	8003d7e <_free_r+0x46>
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	1961      	adds	r1, r4, r5
 8003d70:	428b      	cmp	r3, r1
 8003d72:	bf01      	itttt	eq
 8003d74:	6819      	ldreq	r1, [r3, #0]
 8003d76:	685b      	ldreq	r3, [r3, #4]
 8003d78:	1949      	addeq	r1, r1, r5
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	e7ed      	b.n	8003d5a <_free_r+0x22>
 8003d7e:	461a      	mov	r2, r3
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b10b      	cbz	r3, 8003d88 <_free_r+0x50>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d9fa      	bls.n	8003d7e <_free_r+0x46>
 8003d88:	6811      	ldr	r1, [r2, #0]
 8003d8a:	1855      	adds	r5, r2, r1
 8003d8c:	42a5      	cmp	r5, r4
 8003d8e:	d10b      	bne.n	8003da8 <_free_r+0x70>
 8003d90:	6824      	ldr	r4, [r4, #0]
 8003d92:	4421      	add	r1, r4
 8003d94:	1854      	adds	r4, r2, r1
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	d1e0      	bne.n	8003d5e <_free_r+0x26>
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	6053      	str	r3, [r2, #4]
 8003da2:	440c      	add	r4, r1
 8003da4:	6014      	str	r4, [r2, #0]
 8003da6:	e7da      	b.n	8003d5e <_free_r+0x26>
 8003da8:	d902      	bls.n	8003db0 <_free_r+0x78>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6003      	str	r3, [r0, #0]
 8003dae:	e7d6      	b.n	8003d5e <_free_r+0x26>
 8003db0:	6825      	ldr	r5, [r4, #0]
 8003db2:	1961      	adds	r1, r4, r5
 8003db4:	428b      	cmp	r3, r1
 8003db6:	bf04      	itt	eq
 8003db8:	6819      	ldreq	r1, [r3, #0]
 8003dba:	685b      	ldreq	r3, [r3, #4]
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	bf04      	itt	eq
 8003dc0:	1949      	addeq	r1, r1, r5
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	6054      	str	r4, [r2, #4]
 8003dc6:	e7ca      	b.n	8003d5e <_free_r+0x26>
 8003dc8:	b003      	add	sp, #12
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	2000014c 	.word	0x2000014c

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
